//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JSchema.Antlr {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="SchemaParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
internal interface ISchemaParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>CompleteSchema</c>
	/// labeled alternative in <see cref="SchemaParser.schema"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompleteSchema([NotNull] SchemaParser.CompleteSchemaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ShortSchema</c>
	/// labeled alternative in <see cref="SchemaParser.schema"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitShortSchema([NotNull] SchemaParser.ShortSchemaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.schemaCoreNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSchemaCoreNode([NotNull] SchemaParser.SchemaCoreNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.titleNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTitleNode([NotNull] SchemaParser.TitleNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.versionNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVersionNode([NotNull] SchemaParser.VersionNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.importNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportNode([NotNull] SchemaParser.ImportNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.pragmaNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPragmaNode([NotNull] SchemaParser.PragmaNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.defineNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefineNode([NotNull] SchemaParser.DefineNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.validatorNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValidatorNode([NotNull] SchemaParser.ValidatorNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.validatorMainNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValidatorMainNode([NotNull] SchemaParser.ValidatorMainNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.aliasNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAliasNode([NotNull] SchemaParser.AliasNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.valueNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValueNode([NotNull] SchemaParser.ValueNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.receiverNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReceiverNode([NotNull] SchemaParser.ReceiverNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.objectNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectNode([NotNull] SchemaParser.ObjectNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.propertyNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropertyNode([NotNull] SchemaParser.PropertyNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.arrayNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayNode([NotNull] SchemaParser.ArrayNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.datatypeNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatatypeNode([NotNull] SchemaParser.DatatypeNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.functionNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionNode([NotNull] SchemaParser.FunctionNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.argumentNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentNode([NotNull] SchemaParser.ArgumentNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TrueNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrueNode([NotNull] SchemaParser.TrueNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FalseNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFalseNode([NotNull] SchemaParser.FalseNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringNode([NotNull] SchemaParser.StringNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntegerNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerNode([NotNull] SchemaParser.IntegerNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FloatNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatNode([NotNull] SchemaParser.FloatNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DoubleNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoubleNode([NotNull] SchemaParser.DoubleNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NullNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullNode([NotNull] SchemaParser.NullNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UndefinedNode</c>
	/// labeled alternative in <see cref="SchemaParser.primitiveNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUndefinedNode([NotNull] SchemaParser.UndefinedNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.scriptNode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScriptNode([NotNull] SchemaParser.ScriptNodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.globalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobalStatement([NotNull] SchemaParser.GlobalStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] SchemaParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] SchemaParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.varStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarStatement([NotNull] SchemaParser.VarStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDeclaration([NotNull] SchemaParser.VarDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] SchemaParser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] SchemaParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] SchemaParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] SchemaParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] SchemaParser.ExpressionListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.foreachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForeachStatement([NotNull] SchemaParser.ForeachStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] SchemaParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] SchemaParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStatement([NotNull] SchemaParser.BlockStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CallerExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCallerExpression([NotNull] SchemaParser.CallerExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndExpression([NotNull] SchemaParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentBracketExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentBracketExpression([NotNull] SchemaParser.AssignmentBracketExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrExpression([NotNull] SchemaParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TryofExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTryofExpression([NotNull] SchemaParser.TryofExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentAugExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentAugExpression([NotNull] SchemaParser.AssignmentAugExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinusExpression([NotNull] SchemaParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPlusExpression([NotNull] SchemaParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpression([NotNull] SchemaParser.EqualityExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] SchemaParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PreIncDecExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreIncDecExpression([NotNull] SchemaParser.PreIncDecExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RangeEndExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRangeEndExpression([NotNull] SchemaParser.RangeEndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] SchemaParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] SchemaParser.AdditiveExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpression([NotNull] SchemaParser.RelationalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberBracketExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberBracketExpression([NotNull] SchemaParser.MemberBracketExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PostIncDecExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostIncDecExpression([NotNull] SchemaParser.PostIncDecExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpression([NotNull] SchemaParser.LiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberDotExpression([NotNull] SchemaParser.MemberDotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TargetExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTargetExpression([NotNull] SchemaParser.TargetExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalNotExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalNotExpression([NotNull] SchemaParser.LogicalNotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ThrowExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitThrowExpression([NotNull] SchemaParser.ThrowExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] SchemaParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InvokeFunctionExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeFunctionExpression([NotNull] SchemaParser.InvokeFunctionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentIdExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentIdExpression([NotNull] SchemaParser.AssignmentIdExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InvokeMethodExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvokeMethodExpression([NotNull] SchemaParser.InvokeMethodExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentDotExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentDotExpression([NotNull] SchemaParser.AssignmentDotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RangeBothExpression</c>
	/// labeled alternative in <see cref="SchemaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRangeBothExpression([NotNull] SchemaParser.RangeBothExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TrueLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrueLiteral([NotNull] SchemaParser.TrueLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FalseLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFalseLiteral([NotNull] SchemaParser.FalseLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerLiteral([NotNull] SchemaParser.IntegerLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DoubleLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoubleLiteral([NotNull] SchemaParser.DoubleLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] SchemaParser.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArrayLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayLiteral([NotNull] SchemaParser.ArrayLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ObjectLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectLiteral([NotNull] SchemaParser.ObjectLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullLiteral([NotNull] SchemaParser.NullLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UndefinedLiteral</c>
	/// labeled alternative in <see cref="SchemaParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUndefinedLiteral([NotNull] SchemaParser.UndefinedLiteralContext context);
}
} // namespace RelogicLabs.JSchema.Antlr