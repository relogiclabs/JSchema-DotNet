//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JSchema.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
internal partial class JsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, NULL=3, LBRACKET=4, RBRACKET=5, LBRACE=6, RBRACE=7, COMMA=8,
		COLON=9, STRING=10, INTEGER=11, FLOAT=12, DOUBLE=13, WHITE_SPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "NULL", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "COMMA",
		"COLON", "STRING", "ESCAPE", "UNICODE", "HEXDIGIT", "SAFE_CODEPOINT",
		"INTEGER", "FLOAT", "DOUBLE", "FRACTION", "INTDIGIT", "EXPONENT", "DIGIT",
		"WHITE_SPACE"
	};


	public JsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'null'", "'['", "']'", "'{'", "'}'", "','",
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "NULL", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE",
		"COMMA", "COLON", "STRING", "INTEGER", "FLOAT", "DOUBLE", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,77,8,9,10,
		9,12,9,80,9,9,1,9,1,9,1,10,1,10,1,10,3,10,87,8,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,100,8,14,1,14,1,14,1,15,1,15,1,
		15,1,16,1,16,3,16,109,8,16,1,16,1,16,1,17,1,17,4,17,115,8,17,11,17,12,
		17,116,1,18,1,18,1,18,5,18,122,8,18,10,18,12,18,125,9,18,3,18,127,8,18,
		1,19,1,19,3,19,131,8,19,1,19,4,19,134,8,19,11,19,12,19,135,1,20,1,20,1,
		21,4,21,141,8,21,11,21,12,21,142,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,0,23,0,25,0,27,0,29,11,31,12,33,13,35,0,37,
		0,39,0,41,0,43,14,1,0,8,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,
		114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,49,57,2,0,
		69,69,101,101,2,0,43,43,45,45,1,0,48,57,3,0,9,10,13,13,32,32,148,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,50,1,0,0,0,5,56,1,0,0,0,7,61,
		1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,71,1,
		0,0,0,19,73,1,0,0,0,21,83,1,0,0,0,23,88,1,0,0,0,25,94,1,0,0,0,27,96,1,
		0,0,0,29,99,1,0,0,0,31,103,1,0,0,0,33,106,1,0,0,0,35,112,1,0,0,0,37,126,
		1,0,0,0,39,128,1,0,0,0,41,137,1,0,0,0,43,140,1,0,0,0,45,46,5,116,0,0,46,
		47,5,114,0,0,47,48,5,117,0,0,48,49,5,101,0,0,49,2,1,0,0,0,50,51,5,102,
		0,0,51,52,5,97,0,0,52,53,5,108,0,0,53,54,5,115,0,0,54,55,5,101,0,0,55,
		4,1,0,0,0,56,57,5,110,0,0,57,58,5,117,0,0,58,59,5,108,0,0,59,60,5,108,
		0,0,60,6,1,0,0,0,61,62,5,91,0,0,62,8,1,0,0,0,63,64,5,93,0,0,64,10,1,0,
		0,0,65,66,5,123,0,0,66,12,1,0,0,0,67,68,5,125,0,0,68,14,1,0,0,0,69,70,
		5,44,0,0,70,16,1,0,0,0,71,72,5,58,0,0,72,18,1,0,0,0,73,78,5,34,0,0,74,
		77,3,21,10,0,75,77,3,27,13,0,76,74,1,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,
		78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,34,0,0,
		82,20,1,0,0,0,83,86,5,92,0,0,84,87,7,0,0,0,85,87,3,23,11,0,86,84,1,0,0,
		0,86,85,1,0,0,0,87,22,1,0,0,0,88,89,5,117,0,0,89,90,3,25,12,0,90,91,3,
		25,12,0,91,92,3,25,12,0,92,93,3,25,12,0,93,24,1,0,0,0,94,95,7,1,0,0,95,
		26,1,0,0,0,96,97,8,2,0,0,97,28,1,0,0,0,98,100,5,45,0,0,99,98,1,0,0,0,99,
		100,1,0,0,0,100,101,1,0,0,0,101,102,3,37,18,0,102,30,1,0,0,0,103,104,3,
		29,14,0,104,105,3,35,17,0,105,32,1,0,0,0,106,108,3,29,14,0,107,109,3,35,
		17,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,3,39,19,0,
		111,34,1,0,0,0,112,114,5,46,0,0,113,115,3,41,20,0,114,113,1,0,0,0,115,
		116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,36,1,0,0,0,118,127,5,48,
		0,0,119,123,7,3,0,0,120,122,3,41,20,0,121,120,1,0,0,0,122,125,1,0,0,0,
		123,121,1,0,0,0,123,124,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,126,118,
		1,0,0,0,126,119,1,0,0,0,127,38,1,0,0,0,128,130,7,4,0,0,129,131,7,5,0,0,
		130,129,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,134,3,41,20,0,133,
		132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,40,1,0,
		0,0,137,138,7,6,0,0,138,42,1,0,0,0,139,141,7,7,0,0,140,139,1,0,0,0,141,
		142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,6,
		21,0,0,145,44,1,0,0,0,12,0,76,78,86,99,108,116,123,126,130,135,142,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RelogicLabs.JSchema.Antlr