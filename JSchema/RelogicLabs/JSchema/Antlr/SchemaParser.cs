//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JSchema.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
internal partial class SchemaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, VERSION=2, IMPORT=3, PRAGMA=4, DEFINE=5, SCHEMA=6, SCRIPT=7,
		TRUE=8, FALSE=9, NULL=10, COLON=11, COMMA=12, STAR=13, LBRACE=14, RBRACE=15,
		LBRACKET=16, RBRACKET=17, LPAREN=18, RPAREN=19, OPTIONAL=20, UNDEFINED=21,
		FULL_IDENTIFIER=22, ALIAS=23, DATATYPE=24, FUNCTION=25, RECEIVER=26, STRING=27,
		INTEGER=28, FLOAT=29, DOUBLE=30, WHITE_SPACE=31, BLOCK_COMMENT=32, LINE_COMMENT=33,
		G_VAR=34, G_IF=35, G_ELSE=36, G_WHILE=37, G_FOR=38, G_FOREACH=39, G_IN=40,
		G_BREAK=41, G_CONSTRAINT=42, G_TARGET=43, G_CALLER=44, G_SUBROUTINE=45,
		G_TRYOF=46, G_THROW=47, G_FUNCTION=48, G_RETURN=49, G_FUTURE=50, G_TRUE=51,
		G_FALSE=52, G_NULL=53, G_UNDEFINED=54, G_THIS=55, G_NEW=56, G_CONTINUE=57,
		G_DO=58, G_CONST=59, G_SWITCH=60, G_CASE=61, G_IMPORT=62, G_CLASS=63,
		G_SUPER=64, G_DEFAULT=65, G_INTEGER=66, G_DOUBLE=67, G_STRING=68, G_IDENTIFIER=69,
		G_LBRACE=70, G_RBRACE=71, G_LBRACKET=72, G_RBRACKET=73, G_LPAREN=74, G_RPAREN=75,
		G_SEMI=76, G_COMMA=77, G_DOT=78, G_COLON=79, G_RANGE=80, G_ELLIPSIS=81,
		G_ASSIGN=82, G_INC=83, G_DEC=84, G_PLUS=85, G_MINUS=86, G_MUL=87, G_DIV=88,
		G_GT=89, G_LT=90, G_LE=91, G_GE=92, G_EQ=93, G_NE=94, G_NOT=95, G_AND=96,
		G_OR=97, WHITE_SPACE1=98, BLOCK_COMMENT1=99, LINE_COMMENT1=100;
	public const int
		RULE_schema = 0, RULE_schemaMain = 1, RULE_titleNode = 2, RULE_versionNode = 3,
		RULE_importNode = 4, RULE_pragmaNode = 5, RULE_defineNode = 6, RULE_aliasNode = 7,
		RULE_validatorMain = 8, RULE_validatorNode = 9, RULE_valueNode = 10, RULE_receiverNode = 11,
		RULE_objectNode = 12, RULE_propertyNode = 13, RULE_arrayNode = 14, RULE_datatypeNode = 15,
		RULE_functionNode = 16, RULE_argumentNode = 17, RULE_primitiveNode = 18,
		RULE_scriptNode = 19, RULE_globalStatement = 20, RULE_statement = 21,
		RULE_functionDeclaration = 22, RULE_varStatement = 23, RULE_varInitialization = 24,
		RULE_expressionStatement = 25, RULE_ifStatement = 26, RULE_whileStatement = 27,
		RULE_forStatement = 28, RULE_expressionList = 29, RULE_foreachStatement = 30,
		RULE_returnStatement = 31, RULE_breakStatement = 32, RULE_blockStatement = 33,
		RULE_expression = 34, RULE_refExpression = 35, RULE_literal = 36;
	public static readonly string[] ruleNames = {
		"schema", "schemaMain", "titleNode", "versionNode", "importNode", "pragmaNode",
		"defineNode", "aliasNode", "validatorMain", "validatorNode", "valueNode",
		"receiverNode", "objectNode", "propertyNode", "arrayNode", "datatypeNode",
		"functionNode", "argumentNode", "primitiveNode", "scriptNode", "globalStatement",
		"statement", "functionDeclaration", "varStatement", "varInitialization",
		"expressionStatement", "ifStatement", "whileStatement", "forStatement",
		"expressionList", "foreachStatement", "returnStatement", "breakStatement",
		"blockStatement", "expression", "refExpression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'%title'", "'%version'", "'%import'", "'%pragma'", null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, "'?'", null, null, null, null, null, null, null, null, null, null,
		null, null, null, "'var'", "'if'", "'else'", "'while'", "'for'", "'foreach'",
		"'in'", "'break'", "'constraint'", "'target'", "'caller'", "'subroutine'",
		"'tryof'", "'throw'", "'function'", "'return'", "'future'", null, null,
		null, "'undefined'", "'this'", "'new'", "'continue'", "'do'", "'const'",
		"'switch'", "'case'", "'import'", "'class'", "'super'", "'default'", null,
		null, null, null, null, null, null, null, null, null, "';'", null, "'.'",
		null, "'..'", "'...'", "'='", "'++'", "'--'", "'+'", "'-'", null, "'/'",
		"'>'", "'<'", "'<='", "'>='", "'=='", "'!='", null, "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "VERSION", "IMPORT", "PRAGMA", "DEFINE", "SCHEMA", "SCRIPT",
		"TRUE", "FALSE", "NULL", "COLON", "COMMA", "STAR", "LBRACE", "RBRACE",
		"LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "OPTIONAL", "UNDEFINED", "FULL_IDENTIFIER",
		"ALIAS", "DATATYPE", "FUNCTION", "RECEIVER", "STRING", "INTEGER", "FLOAT",
		"DOUBLE", "WHITE_SPACE", "BLOCK_COMMENT", "LINE_COMMENT", "G_VAR", "G_IF",
		"G_ELSE", "G_WHILE", "G_FOR", "G_FOREACH", "G_IN", "G_BREAK", "G_CONSTRAINT",
		"G_TARGET", "G_CALLER", "G_SUBROUTINE", "G_TRYOF", "G_THROW", "G_FUNCTION",
		"G_RETURN", "G_FUTURE", "G_TRUE", "G_FALSE", "G_NULL", "G_UNDEFINED",
		"G_THIS", "G_NEW", "G_CONTINUE", "G_DO", "G_CONST", "G_SWITCH", "G_CASE",
		"G_IMPORT", "G_CLASS", "G_SUPER", "G_DEFAULT", "G_INTEGER", "G_DOUBLE",
		"G_STRING", "G_IDENTIFIER", "G_LBRACE", "G_RBRACE", "G_LBRACKET", "G_RBRACKET",
		"G_LPAREN", "G_RPAREN", "G_SEMI", "G_COMMA", "G_DOT", "G_COLON", "G_RANGE",
		"G_ELLIPSIS", "G_ASSIGN", "G_INC", "G_DEC", "G_PLUS", "G_MINUS", "G_MUL",
		"G_DIV", "G_GT", "G_LT", "G_LE", "G_GE", "G_EQ", "G_NE", "G_NOT", "G_AND",
		"G_OR", "WHITE_SPACE1", "BLOCK_COMMENT1", "LINE_COMMENT1"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SchemaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SchemaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SchemaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SchemaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SchemaContext : ParserRuleContext {
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }

		public SchemaContext() { }
		public virtual void CopyFrom(SchemaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompleteSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaMainContext schemaMain() {
			return GetRuleContext<SchemaMainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleNodeContext titleNode() {
			return GetRuleContext<TitleNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionNodeContext versionNode() {
			return GetRuleContext<VersionNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNodeContext[] importNode() {
			return GetRuleContexts<ImportNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNodeContext importNode(int i) {
			return GetRuleContext<ImportNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNodeContext[] pragmaNode() {
			return GetRuleContexts<PragmaNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNodeContext pragmaNode(int i) {
			return GetRuleContext<PragmaNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineNodeContext[] defineNode() {
			return GetRuleContexts<DefineNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineNodeContext defineNode(int i) {
			return GetRuleContext<DefineNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptNodeContext[] scriptNode() {
			return GetRuleContexts<ScriptNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptNodeContext scriptNode(int i) {
			return GetRuleContext<ScriptNodeContext>(i);
		}
		public CompleteSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorNodeContext validatorNode() {
			return GetRuleContext<ValidatorNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		public ShortSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TITLE:
			case VERSION:
			case IMPORT:
			case PRAGMA:
			case DEFINE:
			case SCHEMA:
			case SCRIPT:
				_localctx = new CompleteSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TITLE) {
					{
					State = 74;
					titleNode();
					}
				}

				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 77;
					versionNode();
					}
				}

				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IMPORT || _la==PRAGMA) {
					{
					State = 82;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IMPORT:
						{
						State = 80;
						importNode();
						}
						break;
					case PRAGMA:
						{
						State = 81;
						pragmaNode();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE || _la==SCRIPT) {
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DEFINE:
						{
						State = 87;
						defineNode();
						}
						break;
					case SCRIPT:
						{
						State = 88;
						scriptNode();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 94;
				schemaMain();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE || _la==SCRIPT) {
					{
					State = 97;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DEFINE:
						{
						State = 95;
						defineNode();
						}
						break;
					case SCRIPT:
						{
						State = 96;
						scriptNode();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 102;
				Match(Eof);
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case ALIAS:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				_localctx = new ShortSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				validatorNode();
				State = 105;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaMainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SchemaParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorNodeContext validatorNode() {
			return GetRuleContext<ValidatorNodeContext>(0);
		}
		public SchemaMainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaMain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaMainContext schemaMain() {
		SchemaMainContext _localctx = new SchemaMainContext(Context, State);
		EnterRule(_localctx, 2, RULE_schemaMain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(SCHEMA);
			State = 110;
			Match(COLON);
			State = 111;
			validatorNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(SchemaParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public TitleNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_titleNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitleNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleNodeContext titleNode() {
		TitleNodeContext _localctx = new TitleNodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_titleNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(TITLE);
			State = 114;
			Match(COLON);
			State = 115;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SchemaParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public VersionNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionNodeContext versionNode() {
		VersionNodeContext _localctx = new VersionNodeContext(Context, State);
		EnterRule(_localctx, 6, RULE_versionNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(VERSION);
			State = 118;
			Match(COLON);
			State = 119;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(SchemaParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FULL_IDENTIFIER() { return GetTokens(SchemaParser.FULL_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_IDENTIFIER(int i) {
			return GetToken(SchemaParser.FULL_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SchemaParser.COMMA, 0); }
		public ImportNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNodeContext importNode() {
		ImportNodeContext _localctx = new ImportNodeContext(Context, State);
		EnterRule(_localctx, 8, RULE_importNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(IMPORT);
			State = 122;
			Match(COLON);
			State = 123;
			Match(FULL_IDENTIFIER);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 124;
				Match(COMMA);
				State = 125;
				Match(FULL_IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(SchemaParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_IDENTIFIER() { return GetToken(SchemaParser.FULL_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveNodeContext primitiveNode() {
			return GetRuleContext<PrimitiveNodeContext>(0);
		}
		public PragmaNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNodeContext pragmaNode() {
		PragmaNodeContext _localctx = new PragmaNodeContext(Context, State);
		EnterRule(_localctx, 10, RULE_pragmaNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(PRAGMA);
			State = 129;
			Match(FULL_IDENTIFIER);
			State = 130;
			Match(COLON);
			State = 131;
			primitiveNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SchemaParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNodeContext aliasNode() {
			return GetRuleContext<AliasNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		public DefineNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineNodeContext defineNode() {
		DefineNodeContext _localctx = new DefineNodeContext(Context, State);
		EnterRule(_localctx, 12, RULE_defineNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(DEFINE);
			State = 134;
			aliasNode();
			State = 135;
			Match(COLON);
			State = 136;
			validatorMain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(SchemaParser.ALIAS, 0); }
		public AliasNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNodeContext aliasNode() {
		AliasNodeContext _localctx = new AliasNodeContext(Context, State);
		EnterRule(_localctx, 14, RULE_aliasNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorMainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNodeContext valueNode() {
			return GetRuleContext<ValueNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNodeContext[] functionNode() {
			return GetRuleContexts<FunctionNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNodeContext functionNode(int i) {
			return GetRuleContext<FunctionNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeNodeContext[] datatypeNode() {
			return GetRuleContexts<DatatypeNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeNodeContext datatypeNode(int i) {
			return GetRuleContext<DatatypeNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverNodeContext[] receiverNode() {
			return GetRuleContexts<ReceiverNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverNodeContext receiverNode(int i) {
			return GetRuleContext<ReceiverNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(SchemaParser.OPTIONAL, 0); }
		public ValidatorMainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validatorMain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidatorMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorMainContext validatorMain() {
		ValidatorMainContext _localctx = new ValidatorMainContext(Context, State);
		EnterRule(_localctx, 16, RULE_validatorMain);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				valueNode();
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FUNCTION) {
					{
					{
					State = 141;
					functionNode();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 147;
					datatypeNode();
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 153;
					receiverNode();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 159;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 162;
					functionNode();
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FUNCTION );
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 167;
					datatypeNode();
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 173;
					receiverNode();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 179;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case DATATYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 182;
					datatypeNode();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DATATYPE );
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 187;
					receiverNode();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 193;
					Match(OPTIONAL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasNodeContext aliasNode() {
			return GetRuleContext<AliasNodeContext>(0);
		}
		public ValidatorNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validatorNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidatorNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorNodeContext validatorNode() {
		ValidatorNodeContext _localctx = new ValidatorNodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_validatorNode);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				validatorMain();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				aliasNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveNodeContext primitiveNode() {
			return GetRuleContext<PrimitiveNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNodeContext objectNode() {
			return GetRuleContext<ObjectNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNodeContext arrayNode() {
			return GetRuleContext<ArrayNodeContext>(0);
		}
		public ValueNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueNodeContext valueNode() {
		ValueNodeContext _localctx = new ValueNodeContext(Context, State);
		EnterRule(_localctx, 20, RULE_valueNode);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				primitiveNode();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				objectNode();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				arrayNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVER() { return GetToken(SchemaParser.RECEIVER, 0); }
		public ReceiverNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverNodeContext receiverNode() {
		ReceiverNodeContext _localctx = new ReceiverNodeContext(Context, State);
		EnterRule(_localctx, 22, RULE_receiverNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(RECEIVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SchemaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SchemaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNodeContext[] propertyNode() {
			return GetRuleContexts<PropertyNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNodeContext propertyNode(int i) {
			return GetRuleContext<PropertyNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ObjectNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNodeContext objectNode() {
		ObjectNodeContext _localctx = new ObjectNodeContext(Context, State);
		EnterRule(_localctx, 24, RULE_objectNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(LBRACE);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 210;
				propertyNode();
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 211;
					Match(COMMA);
					State = 212;
					propertyNode();
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 220;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorNodeContext validatorNode() {
			return GetRuleContext<ValidatorNodeContext>(0);
		}
		public PropertyNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNodeContext propertyNode() {
		PropertyNodeContext _localctx = new PropertyNodeContext(Context, State);
		EnterRule(_localctx, 26, RULE_propertyNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(STRING);
			State = 223;
			Match(COLON);
			State = 224;
			validatorNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(SchemaParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(SchemaParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorNodeContext[] validatorNode() {
			return GetRuleContexts<ValidatorNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorNodeContext validatorNode(int i) {
			return GetRuleContext<ValidatorNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ArrayNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayNodeContext arrayNode() {
		ArrayNodeContext _localctx = new ArrayNodeContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(LBRACKET);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2074167040L) != 0)) {
				{
				State = 227;
				validatorNode();
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 228;
					Match(COMMA);
					State = 229;
					validatorNode();
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 237;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATATYPE() { return GetToken(SchemaParser.DATATYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNodeContext aliasNode() {
			return GetRuleContext<AliasNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		public DatatypeNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatypeNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatypeNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeNodeContext datatypeNode() {
		DatatypeNodeContext _localctx = new DatatypeNodeContext(Context, State);
		EnterRule(_localctx, 30, RULE_datatypeNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(DATATYPE);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 240;
				Match(STAR);
				}
			}

			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 243;
				Match(LPAREN);
				State = 244;
				aliasNode();
				State = 245;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SchemaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentNodeContext[] argumentNode() {
			return GetRuleContexts<ArgumentNodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentNodeContext argumentNode(int i) {
			return GetRuleContext<ArgumentNodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public FunctionNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNodeContext functionNode() {
		FunctionNodeContext _localctx = new FunctionNodeContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(FUNCTION);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 250;
				Match(STAR);
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 253;
				Match(LPAREN);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2082555648L) != 0)) {
					{
					State = 254;
					argumentNode();
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 255;
						Match(COMMA);
						State = 256;
						argumentNode();
						}
						}
						State = 261;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 264;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNodeContext valueNode() {
			return GetRuleContext<ValueNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverNodeContext receiverNode() {
			return GetRuleContext<ReceiverNodeContext>(0);
		}
		public ArgumentNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNodeContext argumentNode() {
		ArgumentNodeContext _localctx = new ArgumentNodeContext(Context, State);
		EnterRule(_localctx, 34, RULE_argumentNode);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				valueNode();
				}
				break;
			case RECEIVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				receiverNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveNodeContext : ParserRuleContext {
		public PrimitiveNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveNode; } }

		public PrimitiveNodeContext() { }
		public virtual void CopyFrom(PrimitiveNodeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveDoubleContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SchemaParser.DOUBLE, 0); }
		public PrimitiveDoubleContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFloatContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SchemaParser.FLOAT, 0); }
		public PrimitiveFloatContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveNullContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SchemaParser.NULL, 0); }
		public PrimitiveNullContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveUndefinedContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(SchemaParser.UNDEFINED, 0); }
		public PrimitiveUndefinedContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveUndefined(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveTrueContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SchemaParser.TRUE, 0); }
		public PrimitiveTrueContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFalseContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SchemaParser.FALSE, 0); }
		public PrimitiveFalseContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveStringContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public PrimitiveStringContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveIntegerContext : PrimitiveNodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SchemaParser.INTEGER, 0); }
		public PrimitiveIntegerContext(PrimitiveNodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveNodeContext primitiveNode() {
		PrimitiveNodeContext _localctx = new PrimitiveNodeContext(Context, State);
		EnterRule(_localctx, 36, RULE_primitiveNode);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				_localctx = new PrimitiveTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new PrimitiveFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				Match(FALSE);
				}
				break;
			case STRING:
				_localctx = new PrimitiveStringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new PrimitiveIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new PrimitiveFloatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 275;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				_localctx = new PrimitiveDoubleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 276;
				Match(DOUBLE);
				}
				break;
			case NULL:
				_localctx = new PrimitiveNullContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 277;
				Match(NULL);
				}
				break;
			case UNDEFINED:
				_localctx = new PrimitiveUndefinedContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 278;
				Match(UNDEFINED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPT() { return GetToken(SchemaParser.SCRIPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COLON() { return GetToken(SchemaParser.G_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LBRACE() { return GetToken(SchemaParser.G_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RBRACE() { return GetToken(SchemaParser.G_RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext[] globalStatement() {
			return GetRuleContexts<GlobalStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext globalStatement(int i) {
			return GetRuleContext<GlobalStatementContext>(i);
		}
		public ScriptNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptNodeContext scriptNode() {
		ScriptNodeContext _localctx = new ScriptNodeContext(Context, State);
		EnterRule(_localctx, 38, RULE_scriptNode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(SCRIPT);
			State = 282;
			Match(G_COLON);
			State = 283;
			Match(G_LBRACE);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 284;
				globalStatement();
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1165499505311744L) != 0) );
			State = 289;
			Match(G_RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		public GlobalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalStatementContext globalStatement() {
		GlobalStatementContext _localctx = new GlobalStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_globalStatement);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case G_CONSTRAINT:
			case G_SUBROUTINE:
			case G_FUTURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				functionDeclaration();
				}
				break;
			case G_VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				varStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_statement);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				varStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 298;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 299;
				forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 300;
				foreachStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 301;
				returnStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 302;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 303;
				blockStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_IDENTIFIER() { return GetTokens(SchemaParser.G_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER(int i) {
			return GetToken(SchemaParser.G_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_CONSTRAINT() { return GetToken(SchemaParser.G_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_FUTURE() { return GetToken(SchemaParser.G_FUTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SUBROUTINE() { return GetToken(SchemaParser.G_SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_FUNCTION() { return GetToken(SchemaParser.G_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_ELLIPSIS() { return GetToken(SchemaParser.G_ELLIPSIS, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case G_CONSTRAINT:
				{
				State = 306;
				Match(G_CONSTRAINT);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_FUNCTION) {
					{
					State = 307;
					Match(G_FUNCTION);
					}
				}

				}
				break;
			case G_FUTURE:
				{
				State = 310;
				Match(G_FUTURE);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_CONSTRAINT) {
					{
					State = 311;
					Match(G_CONSTRAINT);
					}
				}

				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_FUNCTION) {
					{
					State = 314;
					Match(G_FUNCTION);
					}
				}

				}
				break;
			case G_SUBROUTINE:
				{
				State = 317;
				Match(G_SUBROUTINE);
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_FUNCTION) {
					{
					State = 318;
					Match(G_FUNCTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 323;
			_localctx.name = Match(G_IDENTIFIER);
			State = 324;
			Match(G_LPAREN);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==G_IDENTIFIER) {
				{
				State = 325;
				Match(G_IDENTIFIER);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==G_COMMA) {
					{
					{
					State = 326;
					Match(G_COMMA);
					State = 327;
					Match(G_IDENTIFIER);
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_ELLIPSIS) {
					{
					State = 333;
					Match(G_ELLIPSIS);
					}
				}

				}
			}

			State = 338;
			Match(G_RPAREN);
			State = 339;
			blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_VAR() { return GetToken(SchemaParser.G_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarInitializationContext[] varInitialization() {
			return GetRuleContexts<VarInitializationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarInitializationContext varInitialization(int i) {
			return GetRuleContext<VarInitializationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SEMI() { return GetToken(SchemaParser.G_SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_varStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(G_VAR);
			State = 342;
			varInitialization();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==G_COMMA) {
				{
				{
				State = 343;
				Match(G_COMMA);
				State = 344;
				varInitialization();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 350;
			Match(G_SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarInitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER() { return GetToken(SchemaParser.G_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_ASSIGN() { return GetToken(SchemaParser.G_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varInitialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarInitializationContext varInitialization() {
		VarInitializationContext _localctx = new VarInitializationContext(Context, State);
		EnterRule(_localctx, 48, RULE_varInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(G_IDENTIFIER);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==G_ASSIGN) {
				{
				State = 353;
				Match(G_ASSIGN);
				State = 354;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SEMI() { return GetToken(SchemaParser.G_SEMI, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			expression(0);
			State = 358;
			Match(G_SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IF() { return GetToken(SchemaParser.G_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_ELSE() { return GetToken(SchemaParser.G_ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(G_IF);
			State = 361;
			Match(G_LPAREN);
			State = 362;
			expression(0);
			State = 363;
			Match(G_RPAREN);
			State = 364;
			statement();
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 365;
				Match(G_ELSE);
				State = 366;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_WHILE() { return GetToken(SchemaParser.G_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(G_WHILE);
			State = 370;
			Match(G_LPAREN);
			State = 371;
			expression(0);
			State = 372;
			Match(G_RPAREN);
			State = 373;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionListContext initialization;
		public ExpressionContext condition;
		public ExpressionListContext updation;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_FOR() { return GetToken(SchemaParser.G_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_SEMI() { return GetTokens(SchemaParser.G_SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SEMI(int i) {
			return GetToken(SchemaParser.G_SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(G_FOR);
			State = 376;
			Match(G_LPAREN);
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case G_VAR:
				{
				State = 377;
				varStatement();
				}
				break;
			case G_TARGET:
			case G_CALLER:
			case G_TRYOF:
			case G_THROW:
			case G_TRUE:
			case G_FALSE:
			case G_NULL:
			case G_UNDEFINED:
			case G_INTEGER:
			case G_DOUBLE:
			case G_STRING:
			case G_IDENTIFIER:
			case G_LBRACE:
			case G_LBRACKET:
			case G_LPAREN:
			case G_RANGE:
			case G_INC:
			case G_DEC:
			case G_MINUS:
			case G_NOT:
				{
				State = 378;
				_localctx.initialization = expressionList();
				State = 379;
				Match(G_SEMI);
				}
				break;
			case G_SEMI:
				{
				State = 381;
				Match(G_SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4515834638634779L) != 0)) {
				{
				State = 384;
				_localctx.condition = expression(0);
				}
			}

			State = 387;
			Match(G_SEMI);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4515834638634779L) != 0)) {
				{
				State = 388;
				_localctx.updation = expressionList();
				}
			}

			State = 391;
			Match(G_RPAREN);
			State = 392;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			expression(0);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==G_COMMA) {
				{
				{
				State = 395;
				Match(G_COMMA);
				State = 396;
				expression(0);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_FOREACH() { return GetToken(SchemaParser.G_FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_VAR() { return GetToken(SchemaParser.G_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER() { return GetToken(SchemaParser.G_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IN() { return GetToken(SchemaParser.G_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(G_FOREACH);
			State = 403;
			Match(G_LPAREN);
			State = 404;
			Match(G_VAR);
			State = 405;
			Match(G_IDENTIFIER);
			State = 406;
			Match(G_IN);
			State = 407;
			expression(0);
			State = 408;
			Match(G_RPAREN);
			State = 409;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RETURN() { return GetToken(SchemaParser.G_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SEMI() { return GetToken(SchemaParser.G_SEMI, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(G_RETURN);
			State = 412;
			expression(0);
			State = 413;
			Match(G_SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_BREAK() { return GetToken(SchemaParser.G_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_SEMI() { return GetToken(SchemaParser.G_SEMI, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(G_BREAK);
			State = 416;
			Match(G_SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LBRACE() { return GetToken(SchemaParser.G_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RBRACE() { return GetToken(SchemaParser.G_RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(G_LBRACE);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 2312107334981039803L) != 0)) {
				{
				{
				State = 419;
				statement();
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			Match(G_RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }

		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RangeEndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RANGE() { return GetToken(SchemaParser.G_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RangeEndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeEndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_INC() { return GetToken(SchemaParser.G_INC, 0); }
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_PLUS() { return GetToken(SchemaParser.G_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_MINUS() { return GetToken(SchemaParser.G_MINUS, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_GE() { return GetToken(SchemaParser.G_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LE() { return GetToken(SchemaParser.G_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_GT() { return GetToken(SchemaParser.G_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LT() { return GetToken(SchemaParser.G_LT, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_AND() { return GetToken(SchemaParser.G_AND, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_DEC() { return GetToken(SchemaParser.G_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_INC() { return GetToken(SchemaParser.G_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_OR() { return GetToken(SchemaParser.G_OR, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_NOT() { return GetToken(SchemaParser.G_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_THROW() { return GetToken(SchemaParser.G_THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA() { return GetToken(SchemaParser.G_COMMA, 0); }
		public ThrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AllRefExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		public AllRefExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllRefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryofExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_TRYOF() { return GetToken(SchemaParser.G_TRYOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		public TryofExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_MINUS() { return GetToken(SchemaParser.G_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_ASSIGN() { return GetToken(SchemaParser.G_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_DEC() { return GetToken(SchemaParser.G_DEC, 0); }
		public PostDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_EQ() { return GetToken(SchemaParser.G_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_NE() { return GetToken(SchemaParser.G_NE, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_MUL() { return GetToken(SchemaParser.G_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_DIV() { return GetToken(SchemaParser.G_DIV, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeBothExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RANGE() { return GetToken(SchemaParser.G_RANGE, 0); }
		public RangeBothExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeBothExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				_localctx = new AllRefExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 428;
				refExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 429;
				Match(G_MINUS);
				State = 430;
				expression(19);
				}
				break;
			case 3:
				{
				_localctx = new LogicalNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 431;
				Match(G_NOT);
				State = 432;
				expression(18);
				}
				break;
			case 4:
				{
				_localctx = new PostIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 433;
				refExpression(0);
				State = 434;
				Match(G_INC);
				}
				break;
			case 5:
				{
				_localctx = new PostDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 436;
				refExpression(0);
				State = 437;
				Match(G_DEC);
				}
				break;
			case 6:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439;
				Match(G_INC);
				State = 440;
				refExpression(0);
				}
				break;
			case 7:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 441;
				Match(G_DEC);
				State = 442;
				refExpression(0);
				}
				break;
			case 8:
				{
				_localctx = new RangeEndExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 443;
				Match(G_RANGE);
				State = 444;
				expression(10);
				}
				break;
			case 9:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 445;
				refExpression(0);
				State = 446;
				Match(G_ASSIGN);
				State = 447;
				expression(5);
				}
				break;
			case 10:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 449;
				literal();
				}
				break;
			case 11:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450;
				Match(G_LPAREN);
				State = 451;
				expression(0);
				State = 452;
				Match(G_RPAREN);
				}
				break;
			case 12:
				{
				_localctx = new TryofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 454;
				Match(G_TRYOF);
				State = 455;
				Match(G_LPAREN);
				State = 456;
				expression(0);
				State = 457;
				Match(G_RPAREN);
				}
				break;
			case 13:
				{
				_localctx = new ThrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 459;
				Match(G_THROW);
				State = 460;
				Match(G_LPAREN);
				State = 461;
				expression(0);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_COMMA) {
					{
					State = 462;
					Match(G_COMMA);
					State = 463;
					expression(0);
					}
				}

				State = 466;
				Match(G_RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 495;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 493;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 470;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 471;
						_la = TokenStream.LA(1);
						if ( !(_la==G_MUL || _la==G_DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 472;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 473;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 474;
						_la = TokenStream.LA(1);
						if ( !(_la==G_PLUS || _la==G_MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 475;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 477;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 15L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 478;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 479;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 480;
						_la = TokenStream.LA(1);
						if ( !(_la==G_EQ || _la==G_NE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 481;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 482;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 483;
						Match(G_AND);
						State = 484;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 485;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 486;
						Match(G_OR);
						State = 487;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new RangeBothExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 488;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 489;
						Match(G_RANGE);
						State = 491;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
						case 1:
							{
							State = 490;
							expression(0);
							}
							break;
						}
						}
						break;
					}
					}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RefExpressionContext : ParserRuleContext {
		public RefExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refExpression; } }

		public RefExpressionContext() { }
		public virtual void CopyFrom(RefExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallerExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_CALLER() { return GetToken(SchemaParser.G_CALLER, 0); }
		public CallerExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER() { return GetToken(SchemaParser.G_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LPAREN() { return GetToken(SchemaParser.G_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RPAREN() { return GetToken(SchemaParser.G_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		public InvokeExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_DOT() { return GetToken(SchemaParser.G_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER() { return GetToken(SchemaParser.G_IDENTIFIER, 0); }
		public DotExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TargetExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_TARGET() { return GetToken(SchemaParser.G_TARGET, 0); }
		public TargetExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefExpressionContext refExpression() {
			return GetRuleContext<RefExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LBRACKET() { return GetToken(SchemaParser.G_LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RBRACKET() { return GetToken(SchemaParser.G_RBRACKET, 0); }
		public IndexExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : RefExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER() { return GetToken(SchemaParser.G_IDENTIFIER, 0); }
		public IdentifierExpressionContext(RefExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefExpressionContext refExpression() {
		return refExpression(0);
	}

	private RefExpressionContext refExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RefExpressionContext _localctx = new RefExpressionContext(Context, _parentState);
		RefExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_refExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				_localctx = new InvokeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 499;
				Match(G_IDENTIFIER);
				State = 500;
				Match(G_LPAREN);
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4515834638634779L) != 0)) {
					{
					State = 501;
					expression(0);
					State = 506;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==G_COMMA) {
						{
						{
						State = 502;
						Match(G_COMMA);
						State = 503;
						expression(0);
						}
						}
						State = 508;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 511;
				Match(G_RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new TargetExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 512;
				Match(G_TARGET);
				}
				break;
			case 3:
				{
				_localctx = new CallerExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 513;
				Match(G_CALLER);
				}
				break;
			case 4:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 514;
				Match(G_IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 525;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new DotExpressionContext(new RefExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_refExpression);
						State = 517;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 518;
						Match(G_DOT);
						State = 519;
						Match(G_IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new IndexExpressionContext(new RefExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_refExpression);
						State = 520;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 521;
						Match(G_LBRACKET);
						State = 522;
						expression(0);
						State = 523;
						Match(G_RBRACKET);
						}
						break;
					}
					}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }

		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ObjectLiteralContext : LiteralContext {
		public IToken _G_IDENTIFIER;
		public IList<IToken> _keys = new List<IToken>();
		public IToken _G_STRING;
		public IToken _tset1232;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _values = new List<ExpressionContext>();
		public IToken _tset1254;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LBRACE() { return GetToken(SchemaParser.G_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RBRACE() { return GetToken(SchemaParser.G_RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COLON() { return GetTokens(SchemaParser.G_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COLON(int i) {
			return GetToken(SchemaParser.G_COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_IDENTIFIER() { return GetTokens(SchemaParser.G_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_IDENTIFIER(int i) {
			return GetToken(SchemaParser.G_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_STRING() { return GetTokens(SchemaParser.G_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_STRING(int i) {
			return GetToken(SchemaParser.G_STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		public ObjectLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UndefinedLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_UNDEFINED() { return GetToken(SchemaParser.G_UNDEFINED, 0); }
		public UndefinedLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefinedLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_TRUE() { return GetToken(SchemaParser.G_TRUE, 0); }
		public TrueLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_STRING() { return GetToken(SchemaParser.G_STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_DOUBLE() { return GetToken(SchemaParser.G_DOUBLE, 0); }
		public DoubleLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_LBRACKET() { return GetToken(SchemaParser.G_LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_RBRACKET() { return GetToken(SchemaParser.G_RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] G_COMMA() { return GetTokens(SchemaParser.G_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_COMMA(int i) {
			return GetToken(SchemaParser.G_COMMA, i);
		}
		public ArrayLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_NULL() { return GetToken(SchemaParser.G_NULL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_INTEGER() { return GetToken(SchemaParser.G_INTEGER, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G_FALSE() { return GetToken(SchemaParser.G_FALSE, 0); }
		public FalseLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 72, RULE_literal);
		int _la;
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case G_TRUE:
				_localctx = new TrueLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 530;
				Match(G_TRUE);
				}
				break;
			case G_FALSE:
				_localctx = new FalseLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 531;
				Match(G_FALSE);
				}
				break;
			case G_INTEGER:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 532;
				Match(G_INTEGER);
				}
				break;
			case G_DOUBLE:
				_localctx = new DoubleLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 533;
				Match(G_DOUBLE);
				}
				break;
			case G_STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 534;
				Match(G_STRING);
				}
				break;
			case G_LBRACKET:
				_localctx = new ArrayLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 535;
				Match(G_LBRACKET);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4515834638634779L) != 0)) {
					{
					State = 536;
					expression(0);
					State = 541;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==G_COMMA) {
						{
						{
						State = 537;
						Match(G_COMMA);
						State = 538;
						expression(0);
						}
						}
						State = 543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 546;
				Match(G_RBRACKET);
				}
				break;
			case G_LBRACE:
				_localctx = new ObjectLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 547;
				Match(G_LBRACE);
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==G_STRING || _la==G_IDENTIFIER) {
					{
					State = 548;
					((ObjectLiteralContext)_localctx)._tset1232 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==G_STRING || _la==G_IDENTIFIER) ) {
						((ObjectLiteralContext)_localctx)._tset1232 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					((ObjectLiteralContext)_localctx)._keys.Add(((ObjectLiteralContext)_localctx)._tset1232);
					State = 549;
					Match(G_COLON);
					State = 550;
					((ObjectLiteralContext)_localctx)._expression = expression(0);
					((ObjectLiteralContext)_localctx)._values.Add(((ObjectLiteralContext)_localctx)._expression);
					State = 557;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==G_COMMA) {
						{
						{
						State = 551;
						Match(G_COMMA);
						State = 552;
						((ObjectLiteralContext)_localctx)._tset1254 = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==G_STRING || _la==G_IDENTIFIER) ) {
							((ObjectLiteralContext)_localctx)._tset1254 = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						((ObjectLiteralContext)_localctx)._keys.Add(((ObjectLiteralContext)_localctx)._tset1254);
						State = 553;
						Match(G_COLON);
						State = 554;
						((ObjectLiteralContext)_localctx)._expression = expression(0);
						((ObjectLiteralContext)_localctx)._values.Add(((ObjectLiteralContext)_localctx)._expression);
						}
						}
						State = 559;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 562;
				Match(G_RBRACE);
				}
				break;
			case G_NULL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 563;
				Match(G_NULL);
				}
				break;
			case G_UNDEFINED:
				_localctx = new UndefinedLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 564;
				Match(G_UNDEFINED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 35: return refExpression_sempred((RefExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 11);
		}
		return true;
	}
	private bool refExpression_sempred(RefExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,100,568,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,3,0,76,8,0,1,0,3,0,79,8,0,1,0,1,0,5,0,83,8,0,10,0,12,0,86,
		9,0,1,0,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,1,0,1,0,5,0,98,8,0,10,0,12,
		0,101,9,0,1,0,1,0,1,0,1,0,1,0,3,0,108,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,127,8,4,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,5,8,143,8,8,10,8,12,8,146,9,8,1,
		8,5,8,149,8,8,10,8,12,8,152,9,8,1,8,5,8,155,8,8,10,8,12,8,158,9,8,1,8,
		3,8,161,8,8,1,8,4,8,164,8,8,11,8,12,8,165,1,8,5,8,169,8,8,10,8,12,8,172,
		9,8,1,8,5,8,175,8,8,10,8,12,8,178,9,8,1,8,3,8,181,8,8,1,8,4,8,184,8,8,
		11,8,12,8,185,1,8,5,8,189,8,8,10,8,12,8,192,9,8,1,8,3,8,195,8,8,3,8,197,
		8,8,1,9,1,9,3,9,201,8,9,1,10,1,10,1,10,3,10,206,8,10,1,11,1,11,1,12,1,
		12,1,12,1,12,5,12,214,8,12,10,12,12,12,217,9,12,3,12,219,8,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,231,8,14,10,14,12,14,234,
		9,14,3,14,236,8,14,1,14,1,14,1,15,1,15,3,15,242,8,15,1,15,1,15,1,15,1,
		15,3,15,248,8,15,1,16,1,16,3,16,252,8,16,1,16,1,16,1,16,1,16,5,16,258,
		8,16,10,16,12,16,261,9,16,3,16,263,8,16,1,16,3,16,266,8,16,1,17,1,17,3,
		17,270,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,280,8,18,1,19,
		1,19,1,19,1,19,4,19,286,8,19,11,19,12,19,287,1,19,1,19,1,20,1,20,3,20,
		294,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,305,8,21,1,
		22,1,22,3,22,309,8,22,1,22,1,22,3,22,313,8,22,1,22,3,22,316,8,22,1,22,
		1,22,3,22,320,8,22,3,22,322,8,22,1,22,1,22,1,22,1,22,1,22,5,22,329,8,22,
		10,22,12,22,332,9,22,1,22,3,22,335,8,22,3,22,337,8,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,5,23,346,8,23,10,23,12,23,349,9,23,1,23,1,23,1,24,1,
		24,1,24,3,24,356,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,368,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,3,28,383,8,28,1,28,3,28,386,8,28,1,28,1,28,3,28,390,8,28,1,28,
		1,28,1,28,1,29,1,29,1,29,5,29,398,8,29,10,29,12,29,401,9,29,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
		1,33,1,33,5,33,421,8,33,10,33,12,33,424,9,33,1,33,1,33,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,3,34,465,8,34,1,34,1,34,3,34,469,8,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,492,8,34,5,34,494,8,34,10,34,12,
		34,497,9,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,505,8,35,10,35,12,35,508,
		9,35,3,35,510,8,35,1,35,1,35,1,35,1,35,3,35,516,8,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,5,35,526,8,35,10,35,12,35,529,9,35,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,540,8,36,10,36,12,36,543,9,36,3,
		36,545,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,556,8,36,
		10,36,12,36,559,9,36,3,36,561,8,36,1,36,1,36,1,36,3,36,566,8,36,1,36,0,
		2,68,70,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,5,1,0,87,88,1,0,85,86,1,
		0,89,92,1,0,93,94,1,0,68,69,642,0,107,1,0,0,0,2,109,1,0,0,0,4,113,1,0,
		0,0,6,117,1,0,0,0,8,121,1,0,0,0,10,128,1,0,0,0,12,133,1,0,0,0,14,138,1,
		0,0,0,16,196,1,0,0,0,18,200,1,0,0,0,20,205,1,0,0,0,22,207,1,0,0,0,24,209,
		1,0,0,0,26,222,1,0,0,0,28,226,1,0,0,0,30,239,1,0,0,0,32,249,1,0,0,0,34,
		269,1,0,0,0,36,279,1,0,0,0,38,281,1,0,0,0,40,293,1,0,0,0,42,304,1,0,0,
		0,44,321,1,0,0,0,46,341,1,0,0,0,48,352,1,0,0,0,50,357,1,0,0,0,52,360,1,
		0,0,0,54,369,1,0,0,0,56,375,1,0,0,0,58,394,1,0,0,0,60,402,1,0,0,0,62,411,
		1,0,0,0,64,415,1,0,0,0,66,418,1,0,0,0,68,468,1,0,0,0,70,515,1,0,0,0,72,
		565,1,0,0,0,74,76,3,4,2,0,75,74,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,
		79,3,6,3,0,78,77,1,0,0,0,78,79,1,0,0,0,79,84,1,0,0,0,80,83,3,8,4,0,81,
		83,3,10,5,0,82,80,1,0,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,
		85,1,0,0,0,85,91,1,0,0,0,86,84,1,0,0,0,87,90,3,12,6,0,88,90,3,38,19,0,
		89,87,1,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
		92,94,1,0,0,0,93,91,1,0,0,0,94,99,3,2,1,0,95,98,3,12,6,0,96,98,3,38,19,
		0,97,95,1,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,
		0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,0,0,1,103,108,1,0,0,0,104,
		105,3,18,9,0,105,106,5,0,0,1,106,108,1,0,0,0,107,75,1,0,0,0,107,104,1,
		0,0,0,108,1,1,0,0,0,109,110,5,6,0,0,110,111,5,11,0,0,111,112,3,18,9,0,
		112,3,1,0,0,0,113,114,5,1,0,0,114,115,5,11,0,0,115,116,5,27,0,0,116,5,
		1,0,0,0,117,118,5,2,0,0,118,119,5,11,0,0,119,120,5,27,0,0,120,7,1,0,0,
		0,121,122,5,3,0,0,122,123,5,11,0,0,123,126,5,22,0,0,124,125,5,12,0,0,125,
		127,5,22,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,9,1,0,0,0,128,129,5,4,
		0,0,129,130,5,22,0,0,130,131,5,11,0,0,131,132,3,36,18,0,132,11,1,0,0,0,
		133,134,5,5,0,0,134,135,3,14,7,0,135,136,5,11,0,0,136,137,3,16,8,0,137,
		13,1,0,0,0,138,139,5,23,0,0,139,15,1,0,0,0,140,144,3,20,10,0,141,143,3,
		32,16,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,
		0,145,150,1,0,0,0,146,144,1,0,0,0,147,149,3,30,15,0,148,147,1,0,0,0,149,
		152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,156,1,0,0,0,152,150,1,
		0,0,0,153,155,3,22,11,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,
		0,156,157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,159,161,5,20,0,0,160,
		159,1,0,0,0,160,161,1,0,0,0,161,197,1,0,0,0,162,164,3,32,16,0,163,162,
		1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,170,1,0,0,
		0,167,169,3,30,15,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,
		171,1,0,0,0,171,176,1,0,0,0,172,170,1,0,0,0,173,175,3,22,11,0,174,173,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,
		0,178,176,1,0,0,0,179,181,5,20,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,
		197,1,0,0,0,182,184,3,30,15,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,
		1,0,0,0,185,186,1,0,0,0,186,190,1,0,0,0,187,189,3,22,11,0,188,187,1,0,
		0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,0,0,192,
		190,1,0,0,0,193,195,5,20,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,1,
		0,0,0,196,140,1,0,0,0,196,163,1,0,0,0,196,183,1,0,0,0,197,17,1,0,0,0,198,
		201,3,16,8,0,199,201,3,14,7,0,200,198,1,0,0,0,200,199,1,0,0,0,201,19,1,
		0,0,0,202,206,3,36,18,0,203,206,3,24,12,0,204,206,3,28,14,0,205,202,1,
		0,0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,21,1,0,0,0,207,208,5,26,0,0,
		208,23,1,0,0,0,209,218,5,14,0,0,210,215,3,26,13,0,211,212,5,12,0,0,212,
		214,3,26,13,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
		1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,218,210,1,0,0,0,218,219,1,0,0,
		0,219,220,1,0,0,0,220,221,5,15,0,0,221,25,1,0,0,0,222,223,5,27,0,0,223,
		224,5,11,0,0,224,225,3,18,9,0,225,27,1,0,0,0,226,235,5,16,0,0,227,232,
		3,18,9,0,228,229,5,12,0,0,229,231,3,18,9,0,230,228,1,0,0,0,231,234,1,0,
		0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,235,
		227,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,5,17,0,0,238,29,1,
		0,0,0,239,241,5,24,0,0,240,242,5,13,0,0,241,240,1,0,0,0,241,242,1,0,0,
		0,242,247,1,0,0,0,243,244,5,18,0,0,244,245,3,14,7,0,245,246,5,19,0,0,246,
		248,1,0,0,0,247,243,1,0,0,0,247,248,1,0,0,0,248,31,1,0,0,0,249,251,5,25,
		0,0,250,252,5,13,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,265,1,0,0,0,253,
		262,5,18,0,0,254,259,3,34,17,0,255,256,5,12,0,0,256,258,3,34,17,0,257,
		255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,263,1,
		0,0,0,261,259,1,0,0,0,262,254,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,
		264,266,5,19,0,0,265,253,1,0,0,0,265,266,1,0,0,0,266,33,1,0,0,0,267,270,
		3,20,10,0,268,270,3,22,11,0,269,267,1,0,0,0,269,268,1,0,0,0,270,35,1,0,
		0,0,271,280,5,8,0,0,272,280,5,9,0,0,273,280,5,27,0,0,274,280,5,28,0,0,
		275,280,5,29,0,0,276,280,5,30,0,0,277,280,5,10,0,0,278,280,5,21,0,0,279,
		271,1,0,0,0,279,272,1,0,0,0,279,273,1,0,0,0,279,274,1,0,0,0,279,275,1,
		0,0,0,279,276,1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,37,1,0,0,0,281,
		282,5,7,0,0,282,283,5,79,0,0,283,285,5,70,0,0,284,286,3,40,20,0,285,284,
		1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,
		0,289,290,5,71,0,0,290,39,1,0,0,0,291,294,3,44,22,0,292,294,3,46,23,0,
		293,291,1,0,0,0,293,292,1,0,0,0,294,41,1,0,0,0,295,305,3,46,23,0,296,305,
		3,50,25,0,297,305,3,52,26,0,298,305,3,54,27,0,299,305,3,56,28,0,300,305,
		3,60,30,0,301,305,3,62,31,0,302,305,3,64,32,0,303,305,3,66,33,0,304,295,
		1,0,0,0,304,296,1,0,0,0,304,297,1,0,0,0,304,298,1,0,0,0,304,299,1,0,0,
		0,304,300,1,0,0,0,304,301,1,0,0,0,304,302,1,0,0,0,304,303,1,0,0,0,305,
		43,1,0,0,0,306,308,5,42,0,0,307,309,5,48,0,0,308,307,1,0,0,0,308,309,1,
		0,0,0,309,322,1,0,0,0,310,312,5,50,0,0,311,313,5,42,0,0,312,311,1,0,0,
		0,312,313,1,0,0,0,313,315,1,0,0,0,314,316,5,48,0,0,315,314,1,0,0,0,315,
		316,1,0,0,0,316,322,1,0,0,0,317,319,5,45,0,0,318,320,5,48,0,0,319,318,
		1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,306,1,0,0,0,321,310,1,0,0,
		0,321,317,1,0,0,0,322,323,1,0,0,0,323,324,5,69,0,0,324,336,5,74,0,0,325,
		330,5,69,0,0,326,327,5,77,0,0,327,329,5,69,0,0,328,326,1,0,0,0,329,332,
		1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,
		0,333,335,5,81,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,
		325,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,5,75,0,0,339,340,3,
		66,33,0,340,45,1,0,0,0,341,342,5,34,0,0,342,347,3,48,24,0,343,344,5,77,
		0,0,344,346,3,48,24,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,
		347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,5,76,0,0,351,47,
		1,0,0,0,352,355,5,69,0,0,353,354,5,82,0,0,354,356,3,68,34,0,355,353,1,
		0,0,0,355,356,1,0,0,0,356,49,1,0,0,0,357,358,3,68,34,0,358,359,5,76,0,
		0,359,51,1,0,0,0,360,361,5,35,0,0,361,362,5,74,0,0,362,363,3,68,34,0,363,
		364,5,75,0,0,364,367,3,42,21,0,365,366,5,36,0,0,366,368,3,42,21,0,367,
		365,1,0,0,0,367,368,1,0,0,0,368,53,1,0,0,0,369,370,5,37,0,0,370,371,5,
		74,0,0,371,372,3,68,34,0,372,373,5,75,0,0,373,374,3,42,21,0,374,55,1,0,
		0,0,375,376,5,38,0,0,376,382,5,74,0,0,377,383,3,46,23,0,378,379,3,58,29,
		0,379,380,5,76,0,0,380,383,1,0,0,0,381,383,5,76,0,0,382,377,1,0,0,0,382,
		378,1,0,0,0,382,381,1,0,0,0,383,385,1,0,0,0,384,386,3,68,34,0,385,384,
		1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,389,5,76,0,0,388,390,3,58,
		29,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,5,75,0,0,
		392,393,3,42,21,0,393,57,1,0,0,0,394,399,3,68,34,0,395,396,5,77,0,0,396,
		398,3,68,34,0,397,395,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,
		1,0,0,0,400,59,1,0,0,0,401,399,1,0,0,0,402,403,5,39,0,0,403,404,5,74,0,
		0,404,405,5,34,0,0,405,406,5,69,0,0,406,407,5,40,0,0,407,408,3,68,34,0,
		408,409,5,75,0,0,409,410,3,42,21,0,410,61,1,0,0,0,411,412,5,49,0,0,412,
		413,3,68,34,0,413,414,5,76,0,0,414,63,1,0,0,0,415,416,5,41,0,0,416,417,
		5,76,0,0,417,65,1,0,0,0,418,422,5,70,0,0,419,421,3,42,21,0,420,419,1,0,
		0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,
		422,1,0,0,0,425,426,5,71,0,0,426,67,1,0,0,0,427,428,6,34,-1,0,428,469,
		3,70,35,0,429,430,5,86,0,0,430,469,3,68,34,19,431,432,5,95,0,0,432,469,
		3,68,34,18,433,434,3,70,35,0,434,435,5,83,0,0,435,469,1,0,0,0,436,437,
		3,70,35,0,437,438,5,84,0,0,438,469,1,0,0,0,439,440,5,83,0,0,440,469,3,
		70,35,0,441,442,5,84,0,0,442,469,3,70,35,0,443,444,5,80,0,0,444,469,3,
		68,34,10,445,446,3,70,35,0,446,447,5,82,0,0,447,448,3,68,34,5,448,469,
		1,0,0,0,449,469,3,72,36,0,450,451,5,74,0,0,451,452,3,68,34,0,452,453,5,
		75,0,0,453,469,1,0,0,0,454,455,5,46,0,0,455,456,5,74,0,0,456,457,3,68,
		34,0,457,458,5,75,0,0,458,469,1,0,0,0,459,460,5,47,0,0,460,461,5,74,0,
		0,461,464,3,68,34,0,462,463,5,77,0,0,463,465,3,68,34,0,464,462,1,0,0,0,
		464,465,1,0,0,0,465,466,1,0,0,0,466,467,5,75,0,0,467,469,1,0,0,0,468,427,
		1,0,0,0,468,429,1,0,0,0,468,431,1,0,0,0,468,433,1,0,0,0,468,436,1,0,0,
		0,468,439,1,0,0,0,468,441,1,0,0,0,468,443,1,0,0,0,468,445,1,0,0,0,468,
		449,1,0,0,0,468,450,1,0,0,0,468,454,1,0,0,0,468,459,1,0,0,0,469,495,1,
		0,0,0,470,471,10,13,0,0,471,472,7,0,0,0,472,494,3,68,34,14,473,474,10,
		12,0,0,474,475,7,1,0,0,475,494,3,68,34,13,476,477,10,9,0,0,477,478,7,2,
		0,0,478,494,3,68,34,10,479,480,10,8,0,0,480,481,7,3,0,0,481,494,3,68,34,
		9,482,483,10,7,0,0,483,484,5,96,0,0,484,494,3,68,34,8,485,486,10,6,0,0,
		486,487,5,97,0,0,487,494,3,68,34,7,488,489,10,11,0,0,489,491,5,80,0,0,
		490,492,3,68,34,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,
		470,1,0,0,0,493,473,1,0,0,0,493,476,1,0,0,0,493,479,1,0,0,0,493,482,1,
		0,0,0,493,485,1,0,0,0,493,488,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,
		495,496,1,0,0,0,496,69,1,0,0,0,497,495,1,0,0,0,498,499,6,35,-1,0,499,500,
		5,69,0,0,500,509,5,74,0,0,501,506,3,68,34,0,502,503,5,77,0,0,503,505,3,
		68,34,0,504,502,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,
		0,507,510,1,0,0,0,508,506,1,0,0,0,509,501,1,0,0,0,509,510,1,0,0,0,510,
		511,1,0,0,0,511,516,5,75,0,0,512,516,5,43,0,0,513,516,5,44,0,0,514,516,
		5,69,0,0,515,498,1,0,0,0,515,512,1,0,0,0,515,513,1,0,0,0,515,514,1,0,0,
		0,516,527,1,0,0,0,517,518,10,6,0,0,518,519,5,78,0,0,519,526,5,69,0,0,520,
		521,10,5,0,0,521,522,5,72,0,0,522,523,3,68,34,0,523,524,5,73,0,0,524,526,
		1,0,0,0,525,517,1,0,0,0,525,520,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,
		0,527,528,1,0,0,0,528,71,1,0,0,0,529,527,1,0,0,0,530,566,5,51,0,0,531,
		566,5,52,0,0,532,566,5,66,0,0,533,566,5,67,0,0,534,566,5,68,0,0,535,544,
		5,72,0,0,536,541,3,68,34,0,537,538,5,77,0,0,538,540,3,68,34,0,539,537,
		1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,545,1,0,0,
		0,543,541,1,0,0,0,544,536,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,
		566,5,73,0,0,547,560,5,70,0,0,548,549,7,4,0,0,549,550,5,79,0,0,550,557,
		3,68,34,0,551,552,5,77,0,0,552,553,7,4,0,0,553,554,5,79,0,0,554,556,3,
		68,34,0,555,551,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,
		0,558,561,1,0,0,0,559,557,1,0,0,0,560,548,1,0,0,0,560,561,1,0,0,0,561,
		562,1,0,0,0,562,566,5,71,0,0,563,566,5,53,0,0,564,566,5,54,0,0,565,530,
		1,0,0,0,565,531,1,0,0,0,565,532,1,0,0,0,565,533,1,0,0,0,565,534,1,0,0,
		0,565,535,1,0,0,0,565,547,1,0,0,0,565,563,1,0,0,0,565,564,1,0,0,0,566,
		73,1,0,0,0,70,75,78,82,84,89,91,97,99,107,126,144,150,156,160,165,170,
		176,180,185,190,194,196,200,205,215,218,232,235,241,247,251,259,262,265,
		269,279,287,293,304,308,312,315,319,321,330,334,336,347,355,367,382,385,
		389,399,422,464,468,491,493,495,506,509,515,525,527,541,544,557,560,565
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RelogicLabs.JSchema.Antlr