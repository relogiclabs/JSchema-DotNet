//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JsonSchema.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
internal partial class SchemaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, VERSION=2, INCLUDE=3, PRAGMA=4, DEFINE=5, SCHEMA=6, TRUE=7, FALSE=8,
		NULL=9, COLON=10, COMMA=11, STAR=12, LBRACE=13, RBRACE=14, LBRACKET=15,
		RBRACKET=16, LPAREN=17, RPAREN=18, OPTIONAL=19, UNDEFINED=20, IDENTIFIER=21,
		ALIAS=22, DATATYPE=23, FUNCTION=24, RECEIVER=25, STRING=26, INTEGER=27,
		FLOAT=28, DOUBLE=29, MULTILINE_COMMENT=30, LINE_COMMENT=31, WHITE_SPACE=32,
		COLON1=33, VERSION_NUMBER1=34, WHITE_SPACE1=35, MULTILINE_COMMENT1=36,
		LINE_COMMENT1=37;
	public const int
		RULE_schema = 0, RULE_schemaBase = 1, RULE_title = 2, RULE_version = 3,
		RULE_include = 4, RULE_pragma = 5, RULE_define = 6, RULE_alias = 7, RULE_validatorMain = 8,
		RULE_validator = 9, RULE_value = 10, RULE_receiver = 11, RULE_object = 12,
		RULE_property = 13, RULE_array = 14, RULE_datatype = 15, RULE_function = 16,
		RULE_argument = 17, RULE_primitive = 18;
	public static readonly string[] ruleNames = {
		"schema", "schemaBase", "title", "version", "include", "pragma", "define",
		"alias", "validatorMain", "validator", "value", "receiver", "object",
		"property", "array", "datatype", "function", "argument", "primitive"
	};

	private static readonly string[] _LiteralNames = {
		null, "'%title'", "'%version'", "'%include'", "'%pragma'", "'%define'",
		"'%schema'", "'true'", "'false'", "'null'", null, "','", "'*'", "'{'",
		"'}'", "'['", "']'", "'('", "')'", "'?'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "VERSION", "INCLUDE", "PRAGMA", "DEFINE", "SCHEMA", "TRUE",
		"FALSE", "NULL", "COLON", "COMMA", "STAR", "LBRACE", "RBRACE", "LBRACKET",
		"RBRACKET", "LPAREN", "RPAREN", "OPTIONAL", "UNDEFINED", "IDENTIFIER",
		"ALIAS", "DATATYPE", "FUNCTION", "RECEIVER", "STRING", "INTEGER", "FLOAT",
		"DOUBLE", "MULTILINE_COMMENT", "LINE_COMMENT", "WHITE_SPACE", "COLON1",
		"VERSION_NUMBER1", "WHITE_SPACE1", "MULTILINE_COMMENT1", "LINE_COMMENT1"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SchemaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SchemaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SchemaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SchemaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SchemaContext : ParserRuleContext {
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }

		public SchemaContext() { }
		public virtual void CopyFrom(SchemaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoreSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		public CoreSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoreSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaBaseContext schemaBase() {
			return GetRuleContext<SchemaBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext[] pragma() {
			return GetRuleContexts<PragmaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma(int i) {
			return GetRuleContext<PragmaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext[] define() {
			return GetRuleContexts<DefineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define(int i) {
			return GetRuleContext<DefineContext>(i);
		}
		public AggregateSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TITLE:
			case VERSION:
			case INCLUDE:
			case PRAGMA:
			case DEFINE:
			case SCHEMA:
				_localctx = new AggregateSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TITLE) {
					{
					State = 38;
					title();
					}
				}

				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 41;
					version();
					}
				}

				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INCLUDE) {
					{
					{
					State = 44;
					include();
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PRAGMA) {
					{
					{
					State = 50;
					pragma();
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE) {
					{
					{
					State = 56;
					define();
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 62;
				schemaBase();
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE) {
					{
					{
					State = 63;
					define();
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 69;
				Match(Eof);
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case ALIAS:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				_localctx = new CoreSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				validator();
				State = 72;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SchemaParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		public SchemaBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaBaseContext schemaBase() {
		SchemaBaseContext _localctx = new SchemaBaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_schemaBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(SCHEMA);
			State = 77;
			Match(COLON);
			State = 78;
			validator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(SchemaParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 4, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(TITLE);
			State = 81;
			Match(COLON);
			State = 82;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SchemaParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON1() { return GetToken(SchemaParser.COLON1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_NUMBER1() { return GetToken(SchemaParser.VERSION_NUMBER1, 0); }
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 6, RULE_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(VERSION);
			State = 85;
			Match(COLON1);
			State = 86;
			Match(VERSION_NUMBER1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(SchemaParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SchemaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SchemaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SchemaParser.COMMA, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 8, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(INCLUDE);
			State = 89;
			Match(COLON);
			State = 90;
			Match(IDENTIFIER);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 91;
				Match(COMMA);
				State = 92;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(SchemaParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SchemaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 10, RULE_pragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(PRAGMA);
			State = 96;
			Match(IDENTIFIER);
			State = 97;
			Match(COLON);
			State = 98;
			primitive();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SchemaParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 12, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(DEFINE);
			State = 101;
			alias();
			State = 102;
			Match(COLON);
			State = 103;
			validatorMain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(SchemaParser.ALIAS, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 14, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorMainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext[] receiver() {
			return GetRuleContexts<ReceiverContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext receiver(int i) {
			return GetRuleContext<ReceiverContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(SchemaParser.OPTIONAL, 0); }
		public ValidatorMainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validatorMain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidatorMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorMainContext validatorMain() {
		ValidatorMainContext _localctx = new ValidatorMainContext(Context, State);
		EnterRule(_localctx, 16, RULE_validatorMain);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				value();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FUNCTION) {
					{
					{
					State = 108;
					function();
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 114;
					datatype();
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 120;
					receiver();
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 126;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 129;
					function();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FUNCTION );
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 134;
					datatype();
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 140;
					receiver();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 146;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case DATATYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 149;
					datatype();
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DATATYPE );
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RECEIVER) {
					{
					{
					State = 154;
					receiver();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 160;
					Match(OPTIONAL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public ValidatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorContext validator() {
		ValidatorContext _localctx = new ValidatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_validator);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				validatorMain();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				alias();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				primitive();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				@object();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVER() { return GetToken(SchemaParser.RECEIVER, 0); }
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(Context, State);
		EnterRule(_localctx, 22, RULE_receiver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(RECEIVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SchemaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SchemaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 24, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(LBRACE);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 177;
				property();
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 178;
					Match(COMMA);
					State = 179;
					property();
					}
					}
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 187;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 26, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(STRING);
			State = 190;
			Match(COLON);
			State = 191;
			validator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(SchemaParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(SchemaParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext[] validator() {
			return GetRuleContexts<ValidatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator(int i) {
			return GetRuleContext<ValidatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 28, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(LBRACKET);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1037083520L) != 0)) {
				{
				State = 194;
				validator();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 195;
					Match(COMMA);
					State = 196;
					validator();
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 204;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATATYPE() { return GetToken(SchemaParser.DATATYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(DATATYPE);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 207;
				Match(STAR);
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 210;
				Match(LPAREN);
				State = 211;
				alias();
				State = 212;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SchemaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(FUNCTION);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 217;
				Match(STAR);
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 220;
				Match(LPAREN);
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1041277824L) != 0)) {
					{
					State = 221;
					argument();
					State = 226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 222;
						Match(COMMA);
						State = 223;
						argument();
						}
						}
						State = 228;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 231;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_argument);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNDEFINED:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				value();
				}
				break;
			case RECEIVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				receiver();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }

		public PrimitiveContext() { }
		public virtual void CopyFrom(PrimitiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveDoubleContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SchemaParser.DOUBLE, 0); }
		public PrimitiveDoubleContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFloatContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SchemaParser.FLOAT, 0); }
		public PrimitiveFloatContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveNullContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SchemaParser.NULL, 0); }
		public PrimitiveNullContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveUndefinedContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(SchemaParser.UNDEFINED, 0); }
		public PrimitiveUndefinedContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveUndefined(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveTrueContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SchemaParser.TRUE, 0); }
		public PrimitiveTrueContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFalseContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SchemaParser.FALSE, 0); }
		public PrimitiveFalseContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveStringContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public PrimitiveStringContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveIntegerContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SchemaParser.INTEGER, 0); }
		public PrimitiveIntegerContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 36, RULE_primitive);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				_localctx = new PrimitiveTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new PrimitiveFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				Match(FALSE);
				}
				break;
			case STRING:
				_localctx = new PrimitiveStringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 240;
				Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new PrimitiveIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 241;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new PrimitiveFloatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 242;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				_localctx = new PrimitiveDoubleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 243;
				Match(DOUBLE);
				}
				break;
			case NULL:
				_localctx = new PrimitiveNullContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 244;
				Match(NULL);
				}
				break;
			case UNDEFINED:
				_localctx = new PrimitiveUndefinedContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 245;
				Match(UNDEFINED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,249,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,0,40,8,0,1,0,3,0,43,8,0,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,5,
		0,58,8,0,10,0,12,0,61,9,0,1,0,1,0,5,0,65,8,0,10,0,12,0,68,9,0,1,0,1,0,
		1,0,1,0,1,0,3,0,75,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,3,4,94,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,1,8,1,8,5,8,110,8,8,10,8,12,8,113,9,8,1,8,5,8,116,8,8,10,8,12,
		8,119,9,8,1,8,5,8,122,8,8,10,8,12,8,125,9,8,1,8,3,8,128,8,8,1,8,4,8,131,
		8,8,11,8,12,8,132,1,8,5,8,136,8,8,10,8,12,8,139,9,8,1,8,5,8,142,8,8,10,
		8,12,8,145,9,8,1,8,3,8,148,8,8,1,8,4,8,151,8,8,11,8,12,8,152,1,8,5,8,156,
		8,8,10,8,12,8,159,9,8,1,8,3,8,162,8,8,3,8,164,8,8,1,9,1,9,3,9,168,8,9,
		1,10,1,10,1,10,3,10,173,8,10,1,11,1,11,1,12,1,12,1,12,1,12,5,12,181,8,
		12,10,12,12,12,184,9,12,3,12,186,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,5,14,198,8,14,10,14,12,14,201,9,14,3,14,203,8,14,1,14,
		1,14,1,15,1,15,3,15,209,8,15,1,15,1,15,1,15,1,15,3,15,215,8,15,1,16,1,
		16,3,16,219,8,16,1,16,1,16,1,16,1,16,5,16,225,8,16,10,16,12,16,228,9,16,
		3,16,230,8,16,1,16,3,16,233,8,16,1,17,1,17,3,17,237,8,17,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,3,18,247,8,18,1,18,0,0,19,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,0,0,271,0,74,1,0,0,0,2,76,1,0,0,0,4,80,
		1,0,0,0,6,84,1,0,0,0,8,88,1,0,0,0,10,95,1,0,0,0,12,100,1,0,0,0,14,105,
		1,0,0,0,16,163,1,0,0,0,18,167,1,0,0,0,20,172,1,0,0,0,22,174,1,0,0,0,24,
		176,1,0,0,0,26,189,1,0,0,0,28,193,1,0,0,0,30,206,1,0,0,0,32,216,1,0,0,
		0,34,236,1,0,0,0,36,246,1,0,0,0,38,40,3,4,2,0,39,38,1,0,0,0,39,40,1,0,
		0,0,40,42,1,0,0,0,41,43,3,6,3,0,42,41,1,0,0,0,42,43,1,0,0,0,43,47,1,0,
		0,0,44,46,3,8,4,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,
		0,0,48,53,1,0,0,0,49,47,1,0,0,0,50,52,3,10,5,0,51,50,1,0,0,0,52,55,1,0,
		0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,59,1,0,0,0,55,53,1,0,0,0,56,58,3,12,
		6,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,
		0,0,61,59,1,0,0,0,62,66,3,2,1,0,63,65,3,12,6,0,64,63,1,0,0,0,65,68,1,0,
		0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,0,0,69,70,5,0,
		0,1,70,75,1,0,0,0,71,72,3,18,9,0,72,73,5,0,0,1,73,75,1,0,0,0,74,39,1,0,
		0,0,74,71,1,0,0,0,75,1,1,0,0,0,76,77,5,6,0,0,77,78,5,10,0,0,78,79,3,18,
		9,0,79,3,1,0,0,0,80,81,5,1,0,0,81,82,5,10,0,0,82,83,5,26,0,0,83,5,1,0,
		0,0,84,85,5,2,0,0,85,86,5,33,0,0,86,87,5,34,0,0,87,7,1,0,0,0,88,89,5,3,
		0,0,89,90,5,10,0,0,90,93,5,21,0,0,91,92,5,11,0,0,92,94,5,21,0,0,93,91,
		1,0,0,0,93,94,1,0,0,0,94,9,1,0,0,0,95,96,5,4,0,0,96,97,5,21,0,0,97,98,
		5,10,0,0,98,99,3,36,18,0,99,11,1,0,0,0,100,101,5,5,0,0,101,102,3,14,7,
		0,102,103,5,10,0,0,103,104,3,16,8,0,104,13,1,0,0,0,105,106,5,22,0,0,106,
		15,1,0,0,0,107,111,3,20,10,0,108,110,3,32,16,0,109,108,1,0,0,0,110,113,
		1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,117,1,0,0,0,113,111,1,0,0,
		0,114,116,3,30,15,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,
		118,1,0,0,0,118,123,1,0,0,0,119,117,1,0,0,0,120,122,3,22,11,0,121,120,
		1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,127,1,0,0,
		0,125,123,1,0,0,0,126,128,5,19,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,
		164,1,0,0,0,129,131,3,32,16,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,
		1,0,0,0,132,133,1,0,0,0,133,137,1,0,0,0,134,136,3,30,15,0,135,134,1,0,
		0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,143,1,0,0,0,139,
		137,1,0,0,0,140,142,3,22,11,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,
		1,0,0,0,143,144,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,146,148,5,19,0,
		0,147,146,1,0,0,0,147,148,1,0,0,0,148,164,1,0,0,0,149,151,3,30,15,0,150,
		149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,157,1,
		0,0,0,154,156,3,22,11,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,
		0,157,158,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,160,162,5,19,0,0,161,
		160,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,107,1,0,0,0,163,130,1,
		0,0,0,163,150,1,0,0,0,164,17,1,0,0,0,165,168,3,16,8,0,166,168,3,14,7,0,
		167,165,1,0,0,0,167,166,1,0,0,0,168,19,1,0,0,0,169,173,3,36,18,0,170,173,
		3,24,12,0,171,173,3,28,14,0,172,169,1,0,0,0,172,170,1,0,0,0,172,171,1,
		0,0,0,173,21,1,0,0,0,174,175,5,25,0,0,175,23,1,0,0,0,176,185,5,13,0,0,
		177,182,3,26,13,0,178,179,5,11,0,0,179,181,3,26,13,0,180,178,1,0,0,0,181,
		184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,1,0,0,0,184,182,1,
		0,0,0,185,177,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,5,14,0,0,
		188,25,1,0,0,0,189,190,5,26,0,0,190,191,5,10,0,0,191,192,3,18,9,0,192,
		27,1,0,0,0,193,202,5,15,0,0,194,199,3,18,9,0,195,196,5,11,0,0,196,198,
		3,18,9,0,197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,
		0,200,203,1,0,0,0,201,199,1,0,0,0,202,194,1,0,0,0,202,203,1,0,0,0,203,
		204,1,0,0,0,204,205,5,16,0,0,205,29,1,0,0,0,206,208,5,23,0,0,207,209,5,
		12,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,214,1,0,0,0,210,211,5,17,0,
		0,211,212,3,14,7,0,212,213,5,18,0,0,213,215,1,0,0,0,214,210,1,0,0,0,214,
		215,1,0,0,0,215,31,1,0,0,0,216,218,5,24,0,0,217,219,5,12,0,0,218,217,1,
		0,0,0,218,219,1,0,0,0,219,232,1,0,0,0,220,229,5,17,0,0,221,226,3,34,17,
		0,222,223,5,11,0,0,223,225,3,34,17,0,224,222,1,0,0,0,225,228,1,0,0,0,226,
		224,1,0,0,0,226,227,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,229,221,1,
		0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,233,5,18,0,0,232,220,1,0,0,0,
		232,233,1,0,0,0,233,33,1,0,0,0,234,237,3,20,10,0,235,237,3,22,11,0,236,
		234,1,0,0,0,236,235,1,0,0,0,237,35,1,0,0,0,238,247,5,7,0,0,239,247,5,8,
		0,0,240,247,5,26,0,0,241,247,5,27,0,0,242,247,5,28,0,0,243,247,5,29,0,
		0,244,247,5,9,0,0,245,247,5,20,0,0,246,238,1,0,0,0,246,239,1,0,0,0,246,
		240,1,0,0,0,246,241,1,0,0,0,246,242,1,0,0,0,246,243,1,0,0,0,246,244,1,
		0,0,0,246,245,1,0,0,0,247,37,1,0,0,0,34,39,42,47,53,59,66,74,93,111,117,
		123,127,132,137,143,147,152,157,161,163,167,172,182,185,199,202,208,214,
		218,226,229,232,236,246
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RelogicLabs.JsonSchema.Antlr