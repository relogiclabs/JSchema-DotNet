{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Json Schema",
    "keywords": "API Documentation The API documentation is auto-generated from both source code and source code comments. For broader understandings, exploring the source code itself often reveals even more valuable insights and details. To access and explore the source code, please visit the GitHub repository here."
  },
  "api/RelogicLabs.JsonSchema.Exceptions.ClassInstantiationException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.ClassInstantiationException.html",
    "title": "Class ClassInstantiationException | Json Schema",
    "keywords": "Class ClassInstantiationException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class ClassInstantiationException : CommonException, ISerializable Inheritance object Exception CommonException ClassInstantiationException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClassInstantiationException(ErrorDetail) public ClassInstantiationException(ErrorDetail detail) Parameters detail ErrorDetail ClassInstantiationException(ErrorDetail, Exception?) public ClassInstantiationException(ErrorDetail detail, Exception? innerException) Parameters detail ErrorDetail innerException Exception ClassInstantiationException(string, string) public ClassInstantiationException(string code, string message) Parameters code string message string ClassInstantiationException(string, string, Exception?) public ClassInstantiationException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.ClassNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.ClassNotFoundException.html",
    "title": "Class ClassNotFoundException | Json Schema",
    "keywords": "Class ClassNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class ClassNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException ClassNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClassNotFoundException(ErrorDetail) public ClassNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail ClassNotFoundException(string, string) public ClassNotFoundException(string code, string message) Parameters code string message string ClassNotFoundException(string, string, Exception?) public ClassNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.CommonException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.CommonException.html",
    "title": "Class CommonException | Json Schema",
    "keywords": "Class CommonException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class CommonException : Exception, ISerializable Inheritance object Exception CommonException Implements ISerializable Derived ClassInstantiationException ClassNotFoundException DateTimeLexerException DefinitionNotFoundException DuplicateDefinitionException DuplicateIncludeException DuplicatePragmaException DuplicatePropertyKeyException FunctionMismatchException FunctionNotFoundException InvalidDateTimeException InvalidFunctionException InvalidIncludeException InvalidPragmaValueException JsonLexerException JsonParserException JsonSchemaException PragmaNotFoundException SchemaLexerException SchemaParserException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommonException(ErrorDetail) protected CommonException(ErrorDetail detail) Parameters detail ErrorDetail CommonException(ErrorDetail, Exception?) protected CommonException(ErrorDetail detail, Exception? innerException) Parameters detail ErrorDetail innerException Exception CommonException(string, string) protected CommonException(string code, string message) Parameters code string message string CommonException(string, string, Exception?) protected CommonException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception Properties ErrorCode public string ErrorCode { get; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DateTimeLexerException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DateTimeLexerException.html",
    "title": "Class DateTimeLexerException | Json Schema",
    "keywords": "Class DateTimeLexerException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DateTimeLexerException : CommonException, ISerializable Inheritance object Exception CommonException DateTimeLexerException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DateTimeLexerException(string, string) public DateTimeLexerException(string code, string message) Parameters code string message string DateTimeLexerException(string, string, Exception?) public DateTimeLexerException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DefinitionNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DefinitionNotFoundException.html",
    "title": "Class DefinitionNotFoundException | Json Schema",
    "keywords": "Class DefinitionNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DefinitionNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException DefinitionNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DefinitionNotFoundException(ErrorDetail) public DefinitionNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail DefinitionNotFoundException(string, string) public DefinitionNotFoundException(string code, string message) Parameters code string message string DefinitionNotFoundException(string, string, Exception?) public DefinitionNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicateDefinitionException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicateDefinitionException.html",
    "title": "Class DuplicateDefinitionException | Json Schema",
    "keywords": "Class DuplicateDefinitionException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicateDefinitionException : CommonException, ISerializable Inheritance object Exception CommonException DuplicateDefinitionException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicateDefinitionException(ErrorDetail) public DuplicateDefinitionException(ErrorDetail detail) Parameters detail ErrorDetail DuplicateDefinitionException(string, string) public DuplicateDefinitionException(string code, string message) Parameters code string message string DuplicateDefinitionException(string, string, Exception?) public DuplicateDefinitionException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicateIncludeException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicateIncludeException.html",
    "title": "Class DuplicateIncludeException | Json Schema",
    "keywords": "Class DuplicateIncludeException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicateIncludeException : CommonException, ISerializable Inheritance object Exception CommonException DuplicateIncludeException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicateIncludeException(ErrorDetail) public DuplicateIncludeException(ErrorDetail detail) Parameters detail ErrorDetail DuplicateIncludeException(string, string, Exception?) public DuplicateIncludeException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePragmaException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePragmaException.html",
    "title": "Class DuplicatePragmaException | Json Schema",
    "keywords": "Class DuplicatePragmaException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicatePragmaException : CommonException, ISerializable Inheritance object Exception CommonException DuplicatePragmaException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicatePragmaException(ErrorDetail) public DuplicatePragmaException(ErrorDetail detail) Parameters detail ErrorDetail DuplicatePragmaException(string, string) public DuplicatePragmaException(string code, string message) Parameters code string message string DuplicatePragmaException(string, string, Exception?) public DuplicatePragmaException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePropertyKeyException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePropertyKeyException.html",
    "title": "Class DuplicatePropertyKeyException | Json Schema",
    "keywords": "Class DuplicatePropertyKeyException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicatePropertyKeyException : CommonException, ISerializable Inheritance object Exception CommonException DuplicatePropertyKeyException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicatePropertyKeyException(ErrorDetail) public DuplicatePropertyKeyException(ErrorDetail detail) Parameters detail ErrorDetail DuplicatePropertyKeyException(string, string) public DuplicatePropertyKeyException(string code, string message) Parameters code string message string DuplicatePropertyKeyException(string, string, Exception?) public DuplicatePropertyKeyException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.FunctionMismatchException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.FunctionMismatchException.html",
    "title": "Class FunctionMismatchException | Json Schema",
    "keywords": "Class FunctionMismatchException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class FunctionMismatchException : CommonException, ISerializable Inheritance object Exception CommonException FunctionMismatchException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionMismatchException(ErrorDetail) public FunctionMismatchException(ErrorDetail detail) Parameters detail ErrorDetail FunctionMismatchException(string, string) public FunctionMismatchException(string code, string message) Parameters code string message string FunctionMismatchException(string, string, Exception?) public FunctionMismatchException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.FunctionNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.FunctionNotFoundException.html",
    "title": "Class FunctionNotFoundException | Json Schema",
    "keywords": "Class FunctionNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class FunctionNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException FunctionNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionNotFoundException(ErrorDetail) public FunctionNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail FunctionNotFoundException(string, string) public FunctionNotFoundException(string code, string message) Parameters code string message string FunctionNotFoundException(string, string, Exception?) public FunctionNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.html",
    "title": "Namespace RelogicLabs.JsonSchema.Exceptions | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Exceptions Classes ClassInstantiationException ClassNotFoundException CommonException DateTimeLexerException DefinitionNotFoundException DuplicateDefinitionException DuplicateIncludeException DuplicatePragmaException DuplicatePropertyKeyException FunctionMismatchException FunctionNotFoundException InvalidDateTimeException InvalidFunctionException InvalidIncludeException InvalidPragmaValueException JsonLexerException JsonParserException JsonSchemaException PragmaNotFoundException SchemaLexerException SchemaParserException"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidDateTimeException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidDateTimeException.html",
    "title": "Class InvalidDateTimeException | Json Schema",
    "keywords": "Class InvalidDateTimeException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidDateTimeException : CommonException, ISerializable Inheritance object Exception CommonException InvalidDateTimeException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidDateTimeException(ErrorDetail) public InvalidDateTimeException(ErrorDetail detail) Parameters detail ErrorDetail InvalidDateTimeException(ErrorDetail, Exception?) public InvalidDateTimeException(ErrorDetail detail, Exception? innerException) Parameters detail ErrorDetail innerException Exception InvalidDateTimeException(string, string) public InvalidDateTimeException(string code, string message) Parameters code string message string InvalidDateTimeException(string, string, Exception?) public InvalidDateTimeException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidFunctionException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidFunctionException.html",
    "title": "Class InvalidFunctionException | Json Schema",
    "keywords": "Class InvalidFunctionException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidFunctionException : CommonException, ISerializable Inheritance object Exception CommonException InvalidFunctionException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidFunctionException(ErrorDetail) public InvalidFunctionException(ErrorDetail detail) Parameters detail ErrorDetail InvalidFunctionException(string, string) public InvalidFunctionException(string code, string message) Parameters code string message string InvalidFunctionException(string, string, Exception?) public InvalidFunctionException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidIncludeException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidIncludeException.html",
    "title": "Class InvalidIncludeException | Json Schema",
    "keywords": "Class InvalidIncludeException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidIncludeException : CommonException, ISerializable Inheritance object Exception CommonException InvalidIncludeException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidIncludeException(ErrorDetail) public InvalidIncludeException(ErrorDetail detail) Parameters detail ErrorDetail InvalidIncludeException(string, string) public InvalidIncludeException(string code, string message) Parameters code string message string InvalidIncludeException(string, string, Exception?) public InvalidIncludeException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidPragmaValueException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidPragmaValueException.html",
    "title": "Class InvalidPragmaValueException | Json Schema",
    "keywords": "Class InvalidPragmaValueException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidPragmaValueException : CommonException, ISerializable Inheritance object Exception CommonException InvalidPragmaValueException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidPragmaValueException(ErrorDetail) public InvalidPragmaValueException(ErrorDetail detail) Parameters detail ErrorDetail InvalidPragmaValueException(string, string) public InvalidPragmaValueException(string code, string message) Parameters code string message string InvalidPragmaValueException(string, string, Exception?) public InvalidPragmaValueException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonLexerException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonLexerException.html",
    "title": "Class JsonLexerException | Json Schema",
    "keywords": "Class JsonLexerException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonLexerException : CommonException, ISerializable Inheritance object Exception CommonException JsonLexerException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonLexerException(string, string) public JsonLexerException(string code, string message) Parameters code string message string JsonLexerException(string, string, Exception?) public JsonLexerException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonParserException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonParserException.html",
    "title": "Class JsonParserException | Json Schema",
    "keywords": "Class JsonParserException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonParserException : CommonException, ISerializable Inheritance object Exception CommonException JsonParserException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonParserException(string, string) public JsonParserException(string code, string message) Parameters code string message string JsonParserException(string, string, Exception?) public JsonParserException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonSchemaException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonSchemaException.html",
    "title": "Class JsonSchemaException | Json Schema",
    "keywords": "Class JsonSchemaException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonSchemaException : CommonException, ISerializable Inheritance object Exception CommonException JsonSchemaException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonSchemaException(ErrorDetail, ExpectedDetail, ActualDetail) public JsonSchemaException(ErrorDetail error, ExpectedDetail expected, ActualDetail actual) Parameters error ErrorDetail expected ExpectedDetail actual ActualDetail JsonSchemaException(ErrorDetail, ExpectedDetail, ActualDetail, Exception) public JsonSchemaException(ErrorDetail error, ExpectedDetail expected, ActualDetail actual, Exception innerException) Parameters error ErrorDetail expected ExpectedDetail actual ActualDetail innerException Exception Properties Actual public ActualDetail Actual { get; } Property Value ActualDetail Expected public ExpectedDetail Expected { get; } Property Value ExpectedDetail"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.PragmaNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.PragmaNotFoundException.html",
    "title": "Class PragmaNotFoundException | Json Schema",
    "keywords": "Class PragmaNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class PragmaNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException PragmaNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PragmaNotFoundException(ErrorDetail) public PragmaNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail PragmaNotFoundException(string, string) public PragmaNotFoundException(string code, string message) Parameters code string message string PragmaNotFoundException(string, string, Exception?) public PragmaNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.SchemaLexerException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.SchemaLexerException.html",
    "title": "Class SchemaLexerException | Json Schema",
    "keywords": "Class SchemaLexerException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class SchemaLexerException : CommonException, ISerializable Inheritance object Exception CommonException SchemaLexerException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SchemaLexerException(string, string) public SchemaLexerException(string code, string message) Parameters code string message string SchemaLexerException(string, string, Exception?) public SchemaLexerException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.SchemaParserException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.SchemaParserException.html",
    "title": "Class SchemaParserException | Json Schema",
    "keywords": "Class SchemaParserException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class SchemaParserException : CommonException, ISerializable Inheritance object Exception CommonException SchemaParserException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SchemaParserException(string, string) public SchemaParserException(string code, string message) Parameters code string message string SchemaParserException(string, string, Exception?) public SchemaParserException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Functions.CoreFunctions.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.CoreFunctions.html",
    "title": "Class CoreFunctions | Json Schema",
    "keywords": "Class CoreFunctions Namespace RelogicLabs.JsonSchema.Functions Assembly RelogicLabs.JsonSchema.dll public class CoreFunctions : FunctionBase Inheritance object FunctionBase CoreFunctions Inherited Members FunctionBase.Runtime FunctionBase.Function FunctionBase.FailWith(JsonSchemaException) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreFunctions(RuntimeContext) public CoreFunctions(RuntimeContext runtime) Parameters runtime RuntimeContext Methods Date(JString, JString) public bool Date(JString target, JString pattern) Parameters target JString pattern JString Returns bool Elements(JArray, params JNode[]) public bool Elements(JArray target, params JNode[] items) Parameters target JArray items JNode[] Returns bool Email(JString) public bool Email(JString target) Parameters target JString Returns bool Enum(JNumber, params JNumber[]) public bool Enum(JNumber target, params JNumber[] items) Parameters target JNumber items JNumber[] Returns bool Enum(JString, params JString[]) public bool Enum(JString target, params JString[] items) Parameters target JString items JString[] Returns bool Keys(JObject, params JString[]) public bool Keys(JObject target, params JString[] items) Parameters target JObject items JString[] Returns bool Length(JArray, JInteger) public bool Length(JArray target, JInteger length) Parameters target JArray length JInteger Returns bool Length(JArray, JInteger, JInteger) public bool Length(JArray target, JInteger minimum, JInteger maximum) Parameters target JArray minimum JInteger maximum JInteger Returns bool Length(JArray, JInteger, JUndefined) public bool Length(JArray target, JInteger minimum, JUndefined undefined) Parameters target JArray minimum JInteger undefined JUndefined Returns bool Length(JArray, JUndefined, JInteger) public bool Length(JArray target, JUndefined undefined, JInteger maximum) Parameters target JArray undefined JUndefined maximum JInteger Returns bool Length(JObject, JInteger) public bool Length(JObject target, JInteger length) Parameters target JObject length JInteger Returns bool Length(JObject, JInteger, JInteger) public bool Length(JObject target, JInteger minimum, JInteger maximum) Parameters target JObject minimum JInteger maximum JInteger Returns bool Length(JObject, JInteger, JUndefined) public bool Length(JObject target, JInteger minimum, JUndefined undefined) Parameters target JObject minimum JInteger undefined JUndefined Returns bool Length(JObject, JUndefined, JInteger) public bool Length(JObject target, JUndefined undefined, JInteger maximum) Parameters target JObject undefined JUndefined maximum JInteger Returns bool Length(JString, JInteger) public bool Length(JString target, JInteger length) Parameters target JString length JInteger Returns bool Length(JString, JInteger, JInteger) public bool Length(JString target, JInteger minimum, JInteger maximum) Parameters target JString minimum JInteger maximum JInteger Returns bool Length(JString, JInteger, JUndefined) public bool Length(JString target, JInteger minimum, JUndefined undefined) Parameters target JString minimum JInteger undefined JUndefined Returns bool Length(JString, JUndefined, JInteger) public bool Length(JString target, JUndefined undefined, JInteger maximum) Parameters target JString undefined JUndefined maximum JInteger Returns bool Negative(JNumber) public bool Negative(JNumber target) Parameters target JNumber Returns bool Nonempty(JArray) public bool Nonempty(JArray target) Parameters target JArray Returns bool Nonempty(JObject) public bool Nonempty(JObject target) Parameters target JObject Returns bool Nonempty(JString) public bool Nonempty(JString target) Parameters target JString Returns bool Phone(JString) public bool Phone(JString target) Parameters target JString Returns bool Positive(JNumber) public bool Positive(JNumber target) Parameters target JNumber Returns bool Range(JNumber, JNumber, JNumber) public bool Range(JNumber target, JNumber minimum, JNumber maximum) Parameters target JNumber minimum JNumber maximum JNumber Returns bool Range(JNumber, JNumber, JUndefined) public bool Range(JNumber target, JNumber minimum, JUndefined undefined) Parameters target JNumber minimum JNumber undefined JUndefined Returns bool Range(JNumber, JUndefined, JNumber) public bool Range(JNumber target, JUndefined undefined, JNumber maximum) Parameters target JNumber undefined JUndefined maximum JNumber Returns bool Regex(JString, JString) public bool Regex(JString target, JString pattern) Parameters target JString pattern JString Returns bool Time(JString, JString) public bool Time(JString target, JString pattern) Parameters target JString pattern JString Returns bool Url(JString) public bool Url(JString target) Parameters target JString Returns bool Url(JString, JString) public bool Url(JString target, JString scheme) Parameters target JString scheme JString Returns bool Values(JObject, params JNode[]) public bool Values(JObject target, params JNode[] items) Parameters target JObject items JNode[] Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Functions.FunctionBase.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.FunctionBase.html",
    "title": "Class FunctionBase | Json Schema",
    "keywords": "Class FunctionBase Namespace RelogicLabs.JsonSchema.Functions Assembly RelogicLabs.JsonSchema.dll public abstract class FunctionBase Inheritance object FunctionBase Derived CoreFunctions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionBase(RuntimeContext) protected FunctionBase(RuntimeContext runtime) Parameters runtime RuntimeContext Properties Function public JFunction Function { get; set; } Property Value JFunction Runtime public required RuntimeContext Runtime { get; init; } Property Value RuntimeContext Methods FailWith(JsonSchemaException) protected bool FailWith(JsonSchemaException exception) Parameters exception JsonSchemaException Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Functions.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.html",
    "title": "Namespace RelogicLabs.JsonSchema.Functions | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Functions Classes CoreFunctions FunctionBase"
  },
  "api/RelogicLabs.JsonSchema.html": {
    "href": "api/RelogicLabs.JsonSchema.html",
    "title": "Namespace RelogicLabs.JsonSchema | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema Classes JsonAssert JsonSchema Provides Schema validation functionalities for JSON document."
  },
  "api/RelogicLabs.JsonSchema.JsonAssert.html": {
    "href": "api/RelogicLabs.JsonSchema.JsonAssert.html",
    "title": "Class JsonAssert | Json Schema",
    "keywords": "Class JsonAssert Namespace RelogicLabs.JsonSchema Assembly RelogicLabs.JsonSchema.dll public static class JsonAssert Inheritance object JsonAssert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AreEqual(string, string) Tests if the provided JSON strings are logically equivalent, meaning their structural composition and internal data are identical. If the JSON strings are not equivalent, an exception is thrown. public static void AreEqual(string jsonExpected, string jsonActual) Parameters jsonExpected string The expected JSON to compare. jsonActual string The actual JSON to compare. IsValid(string, string) Tests whether the specified JSON string conforms to the given Schema string and throws an exception if the JSON string does not conform to the Schema. public static void IsValid(string schemaExpected, string jsonActual) Parameters schemaExpected string The expected Schema to compare. jsonActual string The actual JSON to compare."
  },
  "api/RelogicLabs.JsonSchema.JsonSchema.html": {
    "href": "api/RelogicLabs.JsonSchema.JsonSchema.html",
    "title": "Class JsonSchema | Json Schema",
    "keywords": "Class JsonSchema Namespace RelogicLabs.JsonSchema Assembly RelogicLabs.JsonSchema.dll Provides Schema validation functionalities for JSON document. public class JsonSchema Inheritance object JsonSchema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonSchema(string) Initializes a new instance of the JsonSchema class for the specified Schema string. public JsonSchema(string schema) Parameters schema string A Schema string to compare. Properties Exceptions public Queue<Exception> Exceptions { get; } Property Value Queue<Exception> Runtime public RuntimeContext Runtime { get; } Property Value RuntimeContext SchemaTree public SchemaTree SchemaTree { get; } Property Value SchemaTree Methods IsValid(string) Indicates whether the input JSON string conforms to the Schema specified in the JsonSchema constructor. public bool IsValid(string json) Parameters json string The JSON to compare with Schema. Returns bool true if the JSON string conforms to the Schema; otherwise, false. IsValid(string, string) Indicates whether the input JSON string conforms to the given Schema string. public static bool IsValid(string schema, string json) Parameters schema string The Schema string to compare. json string The JSON string to compare. Returns bool true if the JSON string conforms to the Schema; otherwise, false. WriteError() Writes error messages that occur during Schema validation process, to the standard error stream. public void WriteError()"
  },
  "api/RelogicLabs.JsonSchema.Message.ActualDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ActualDetail.html",
    "title": "Class ActualDetail | Json Schema",
    "keywords": "Class ActualDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ActualDetail : CommonDetail<ActualDetail> Inheritance object CommonDetail<ActualDetail> ActualDetail Inherited Members CommonDetail<ActualDetail>.Context CommonDetail<ActualDetail>.Message CommonDetail<ActualDetail>.Location object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActualDetail(Context, string) public ActualDetail(Context context, string message) Parameters context Context message string ActualDetail(JNode, string) public ActualDetail(JNode node, string message) Parameters node JNode message string"
  },
  "api/RelogicLabs.JsonSchema.Message.CommonDetail-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.CommonDetail-1.html",
    "title": "Class CommonDetail<T> | Json Schema",
    "keywords": "Class CommonDetail<T> Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public abstract class CommonDetail<T> where T : CommonDetail<T> Type Parameters T Inheritance object CommonDetail<T> Derived ActualDetail ExpectedDetail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommonDetail(Context, string) protected CommonDetail(Context context, string message) Parameters context Context message string CommonDetail(JNode, string) protected CommonDetail(JNode node, string message) Parameters node JNode message string Properties Context public required Context Context { get; init; } Property Value Context Location public required Location Location { get; init; } Property Value Location Message public required string Message { get; init; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Message.ErrorDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ErrorDetail.html",
    "title": "Class ErrorDetail | Json Schema",
    "keywords": "Class ErrorDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ErrorDetail Inheritance object ErrorDetail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ErrorDetail(string, string) public ErrorDetail(string code, string message) Parameters code string message string Properties Code public required string Code { get; init; } Property Value string Message public required string Message { get; init; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Message.ExpectedDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ExpectedDetail.html",
    "title": "Class ExpectedDetail | Json Schema",
    "keywords": "Class ExpectedDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ExpectedDetail : CommonDetail<ExpectedDetail> Inheritance object CommonDetail<ExpectedDetail> ExpectedDetail Inherited Members CommonDetail<ExpectedDetail>.Context CommonDetail<ExpectedDetail>.Message CommonDetail<ExpectedDetail>.Location object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpectedDetail(Context, string) public ExpectedDetail(Context context, string message) Parameters context Context message string ExpectedDetail(JNode, string) public ExpectedDetail(JNode node, string message) Parameters node JNode message string"
  },
  "api/RelogicLabs.JsonSchema.Message.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.html",
    "title": "Namespace RelogicLabs.JsonSchema.Message | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Message Classes ActualDetail CommonDetail<T> ErrorDetail ExpectedDetail MessageFormatter"
  },
  "api/RelogicLabs.JsonSchema.Message.MessageFormatter.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.MessageFormatter.html",
    "title": "Class MessageFormatter | Json Schema",
    "keywords": "Class MessageFormatter Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public abstract class MessageFormatter Inheritance object MessageFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields JsonAssertion public static readonly MessageFormatter JsonAssertion Field Value MessageFormatter SchemaAssertion public static readonly MessageFormatter SchemaAssertion Field Value MessageFormatter SchemaValidation public static readonly MessageFormatter SchemaValidation Field Value MessageFormatter Properties Actual public required string Actual { get; init; } Property Value string Expected public required string Expected { get; init; } Property Value string Header public required string Header { get; init; } Property Value string OutlineLength public int OutlineLength { get; set; } Property Value int"
  },
  "api/RelogicLabs.JsonSchema.Tree.Context.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.Context.html",
    "title": "Class Context | Json Schema",
    "keywords": "Class Context Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class Context Inheritance object Context Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Context(ParserRuleContext, RuntimeContext) public Context(ParserRuleContext parser, RuntimeContext runtime) Parameters parser ParserRuleContext runtime RuntimeContext Properties Parser public required ParserRuleContext Parser { get; init; } Property Value ParserRuleContext Runtime public required RuntimeContext Runtime { get; init; } Property Value RuntimeContext Methods GetLocation() public Location GetLocation() Returns Location GetText() public string GetText() Returns string"
  },
  "api/RelogicLabs.JsonSchema.Tree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.html",
    "title": "Namespace RelogicLabs.JsonSchema.Tree | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Tree Classes Context JsonTree Location RuntimeContext SchemaTree"
  },
  "api/RelogicLabs.JsonSchema.Tree.JsonTree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.JsonTree.html",
    "title": "Class JsonTree | Json Schema",
    "keywords": "Class JsonTree Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class JsonTree Inheritance object JsonTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonTree(RuntimeContext, string) public JsonTree(RuntimeContext context, string input) Parameters context RuntimeContext input string Properties Root public JRoot Root { get; } Property Value JRoot"
  },
  "api/RelogicLabs.JsonSchema.Tree.Location.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.Location.html",
    "title": "Class Location | Json Schema",
    "keywords": "Class Location Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class Location Inheritance object Location Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Location(int, int) public Location(int line, int column) Parameters line int column int Properties Column public required int Column { get; init; } Property Value int Line public required int Line { get; init; } Property Value int Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Tree.RuntimeContext.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.RuntimeContext.html",
    "title": "Class RuntimeContext | Json Schema",
    "keywords": "Class RuntimeContext Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class RuntimeContext Inheritance object RuntimeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Definitions public Dictionary<JAlias, JValidator> Definitions { get; } Property Value Dictionary<JAlias, JValidator> ErrorQueue public Queue<Exception> ErrorQueue { get; } Property Value Queue<Exception> FloatingPointTolerance public double FloatingPointTolerance { get; } Property Value double IgnoreObjectPropertyOrder public bool IgnoreObjectPropertyOrder { get; } Property Value bool IgnoreUndefinedProperties public bool IgnoreUndefinedProperties { get; } Property Value bool Pragmas public Dictionary<string, JPragma> Pragmas { get; } Property Value Dictionary<string, JPragma> ThrowException public bool ThrowException { get; set; } Property Value bool Methods AddDefinition(JDefinition) public JDefinition AddDefinition(JDefinition definition) Parameters definition JDefinition Returns JDefinition AddFunctions(string, Context?) public void AddFunctions(string className, Context? context = null) Parameters className string context Context AddInclude(JInclude) public JInclude AddInclude(JInclude include) Parameters include JInclude Returns JInclude AddPragma(JPragma) public JPragma AddPragma(JPragma pragma) Parameters pragma JPragma Returns JPragma InvokeFunction(JFunction, JNode) public bool InvokeFunction(JFunction function, JNode target) Parameters function JFunction target JNode Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Tree.SchemaTree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.SchemaTree.html",
    "title": "Class SchemaTree | Json Schema",
    "keywords": "Class SchemaTree Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class SchemaTree Inheritance object SchemaTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SchemaTree(RuntimeContext, string) public SchemaTree(RuntimeContext context, string input) Parameters context RuntimeContext input string Properties Root public JRoot Root { get; } Property Value JRoot"
  },
  "api/RelogicLabs.JsonSchema.Types.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.html",
    "title": "Namespace RelogicLabs.JsonSchema.Types | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Types Classes JAlias JArray JBoolean JBranch JDataType JDefinition JDirective JDouble JFloat JFunction JInclude JInteger JLeaf JNode JNull JNumber JObject JPragma JPrimitive JProperty JRoot JString JTitle JUndefined JValidator JVersion JsonType Interfaces IJsonComposite IJsonFloat IJsonType<T> INestedMode IPragmaValue<T>"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonComposite.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonComposite.html",
    "title": "Interface IJsonComposite | Json Schema",
    "keywords": "Interface IJsonComposite Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonComposite Methods ExtractComponents() IList<JNode> ExtractComponents() Returns IList<JNode>"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonFloat.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonFloat.html",
    "title": "Interface IJsonFloat | Json Schema",
    "keywords": "Interface IJsonFloat Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonFloat Properties Value double Value { get; init; } Property Value double"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonType-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonType-1.html",
    "title": "Interface IJsonType<T> | Json Schema",
    "keywords": "Interface IJsonType<T> Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonType<out T> where T : JNode Type Parameters T Properties Node T Node { get; } Property Value T Type JsonType Type { get; } Property Value JsonType"
  },
  "api/RelogicLabs.JsonSchema.Types.INestedMode.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.INestedMode.html",
    "title": "Interface INestedMode | Json Schema",
    "keywords": "Interface INestedMode Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface INestedMode Fields NestedMarker public const string NestedMarker = \"*\" Field Value string Properties Nested bool Nested { get; init; } Property Value bool"
  },
  "api/RelogicLabs.JsonSchema.Types.IPragmaValue-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IPragmaValue-1.html",
    "title": "Interface IPragmaValue<T> | Json Schema",
    "keywords": "Interface IPragmaValue<T> Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IPragmaValue<out T> Type Parameters T Properties Value T Value { get; } Property Value T"
  },
  "api/RelogicLabs.JsonSchema.Types.JAlias.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JAlias.html",
    "title": "Class JAlias | Json Schema",
    "keywords": "Class JAlias Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JAlias : JLeaf Inheritance object JNode JLeaf JAlias Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Name public required string Name { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JArray.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JArray.html",
    "title": "Class JArray | Json Schema",
    "keywords": "Class JArray Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JArray : JBranch, IJsonType<JArray>, IJsonComposite Inheritance object JNode JBranch JArray Implements IJsonType<JArray> IJsonComposite Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Elements public required IList<JNode> Elements { get; init; } Property Value IList<JNode> Type public JsonType Type { get; } Property Value JsonType Methods ExtractComponents() public IList<JNode> ExtractComponents() Returns IList<JNode> Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JBoolean.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JBoolean.html",
    "title": "Class JBoolean | Json Schema",
    "keywords": "Class JBoolean Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JBoolean : JPrimitive, IJsonType<JBoolean>, IPragmaValue<bool> Inheritance object JNode JLeaf JPrimitive JBoolean Implements IJsonType<JBoolean> IPragmaValue<bool> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public JsonType Type { get; } Property Value JsonType Value public required bool Value { get; init; } Property Value bool Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JBranch.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JBranch.html",
    "title": "Class JBranch | Json Schema",
    "keywords": "Class JBranch Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JBranch : JNode Inheritance object JNode JBranch Derived JArray JDataType JFunction JObject JProperty JValidator Inherited Members JNode.Context JNode.Parent JNode.Children JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RelogicLabs.JsonSchema.Types.JDataType.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDataType.html",
    "title": "Class JDataType | Json Schema",
    "keywords": "Class JDataType Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDataType : JBranch, INestedMode Inheritance object JNode JBranch JDataType Implements INestedMode Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Alias public required JAlias? Alias { get; init; } Property Value JAlias Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> JsonType public required JsonType JsonType { get; init; } Property Value JsonType Nested public required bool Nested { get; init; } Property Value bool Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsApplicable(JNode) public bool IsApplicable(JNode node) Parameters node JNode Returns bool Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JDefinition.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDefinition.html",
    "title": "Class JDefinition | Json Schema",
    "keywords": "Class JDefinition Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDefinition : JDirective Inheritance object JNode JDirective JDefinition Inherited Members JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DefineMarker public const string DefineMarker = \"%define\" Field Value string Properties Alias public required JAlias Alias { get; init; } Property Value JAlias Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Validator public required JValidator Validator { get; init; } Property Value JValidator Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JDirective.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDirective.html",
    "title": "Class JDirective | Json Schema",
    "keywords": "Class JDirective Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JDirective : JNode Inheritance object JNode JDirective Derived JDefinition JInclude JPragma JTitle JVersion Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false."
  },
  "api/RelogicLabs.JsonSchema.Types.JDouble.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDouble.html",
    "title": "Class JDouble | Json Schema",
    "keywords": "Class JDouble Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDouble : JNumber, IJsonType<JNumber>, IJsonFloat, IPragmaValue<double> Inheritance object JNode JLeaf JPrimitive JNumber JDouble Implements IJsonType<JNumber> IJsonFloat IPragmaValue<double> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required double Value { get; init; } Property Value double Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JDouble) public static implicit operator double(JDouble @double) Parameters double JDouble Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JFloat.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JFloat.html",
    "title": "Class JFloat | Json Schema",
    "keywords": "Class JFloat Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JFloat : JNumber, IJsonType<JNumber>, IJsonFloat, IPragmaValue<double> Inheritance object JNode JLeaf JPrimitive JNumber JFloat Implements IJsonType<JNumber> IJsonFloat IPragmaValue<double> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required double Value { get; init; } Property Value double Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JFloat) public static implicit operator double(JFloat @float) Parameters float JFloat Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JFunction.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JFunction.html",
    "title": "Class JFunction | Json Schema",
    "keywords": "Class JFunction Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JFunction : JBranch, INestedMode Inheritance object JNode JBranch JFunction Implements INestedMode Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Arguments public required IList<JNode> Arguments { get; init; } Property Value IList<JNode> Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Name public required string Name { get; init; } Property Value string Nested public required bool Nested { get; init; } Property Value bool Methods IsApplicable(JNode) public bool IsApplicable(JNode node) Parameters node JNode Returns bool Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JInclude.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JInclude.html",
    "title": "Class JInclude | Json Schema",
    "keywords": "Class JInclude Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JInclude : JDirective Inheritance object JNode JDirective JInclude Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields IncludeMarker public const string IncludeMarker = \"%include\" Field Value string Properties ClassName public required string ClassName { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JInteger.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JInteger.html",
    "title": "Class JInteger | Json Schema",
    "keywords": "Class JInteger Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JInteger : JNumber, IJsonType<JNumber>, IPragmaValue<long> Inheritance object JNode JLeaf JPrimitive JNumber JInteger Implements IJsonType<JNumber> IPragmaValue<long> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required long Value { get; init; } Property Value long Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JInteger) public static implicit operator double(JInteger integer) Parameters integer JInteger Returns double implicit operator long(JInteger) public static implicit operator long(JInteger integer) Parameters integer JInteger Returns long"
  },
  "api/RelogicLabs.JsonSchema.Types.JLeaf.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JLeaf.html",
    "title": "Class JLeaf | Json Schema",
    "keywords": "Class JLeaf Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JLeaf : JNode Inheritance object JNode JLeaf Derived JAlias JPrimitive Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode>"
  },
  "api/RelogicLabs.JsonSchema.Types.JNode.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNode.html",
    "title": "Class JNode | Json Schema",
    "keywords": "Class JNode Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JNode Inheritance object JNode Derived JBranch JDirective JLeaf JRoot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public abstract IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Context public required Context Context { get; init; } Property Value Context Parent public virtual JNode? Parent { get; } Property Value JNode Parser public ParserRuleContext Parser { get; } Property Value ParserRuleContext Runtime public RuntimeContext Runtime { get; } Property Value RuntimeContext Methods CastType<T>(JNode) protected T? CastType<T>(JNode node) Parameters node JNode Returns T Type Parameters T CheckType<T>(JNode) protected bool CheckType<T>(JNode node) Parameters node JNode Returns bool Type Parameters T Match(JNode) Determines whether the specified node matches with the current node. public abstract bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public abstract string ToJson() Returns string A JSON string that represents the current object. ToOutline() Returns an abbreviated version of the string obtained from the ToJson() method of the specified length from OutlineLength and replaces a portion of the string with ellipses to match the specified length; otherwise, returns the string unmodified. public virtual string ToOutline() Returns string An abbreviated version of the ToJson() string."
  },
  "api/RelogicLabs.JsonSchema.Types.JNull.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNull.html",
    "title": "Class JNull | Json Schema",
    "keywords": "Class JNull Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JNull : JPrimitive, IJsonType<JNull> Inheritance object JNode JLeaf JPrimitive JNull Implements IJsonType<JNull> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields NullMarker public const string NullMarker = \"null\" Field Value string Properties Type public JsonType Type { get; } Property Value JsonType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JNumber.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNumber.html",
    "title": "Class JNumber | Json Schema",
    "keywords": "Class JNumber Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JNumber : JPrimitive, IJsonType<JNumber> Inheritance object JNode JLeaf JPrimitive JNumber Implements IJsonType<JNumber> Derived JDouble JFloat JInteger Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type public virtual JsonType Type { get; } Property Value JsonType Methods Compare(double) public int Compare(double other) Parameters other double Returns int Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToDouble() protected abstract double ToDouble() Returns double Operators implicit operator double(JNumber) public static implicit operator double(JNumber number) Parameters number JNumber Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JObject.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JObject.html",
    "title": "Class JObject | Json Schema",
    "keywords": "Class JObject Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JObject : JBranch, IJsonType<JObject>, IJsonComposite Inheritance object JNode JBranch JObject Implements IJsonType<JObject> IJsonComposite Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Properties public required IProperties<JProperty, string, JNode> Properties { get; init; } Property Value IProperties<JProperty, string, JNode> Type public JsonType Type { get; } Property Value JsonType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. ExtractComponents() public IList<JNode> ExtractComponents() Returns IList<JNode> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JPragma.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JPragma.html",
    "title": "Class JPragma | Json Schema",
    "keywords": "Class JPragma Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JPragma : JDirective Inheritance object JNode JDirective JPragma Inherited Members JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields PragmaMarker public const string PragmaMarker = \"%pragma\" Field Value string Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Name public required string Name { get; init; } Property Value string Value public required JPrimitive Value { get; init; } Property Value JPrimitive Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JPrimitive.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JPrimitive.html",
    "title": "Class JPrimitive | Json Schema",
    "keywords": "Class JPrimitive Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JPrimitive : JLeaf Inheritance object JNode JLeaf JPrimitive Derived JBoolean JNull JNumber JString JUndefined Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RelogicLabs.JsonSchema.Types.JProperty.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JProperty.html",
    "title": "Class JProperty | Json Schema",
    "keywords": "Class JProperty Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JProperty : JBranch, IProperty<string, JNode> Inheritance object JNode JBranch JProperty Implements IProperty<string, JNode> Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Key public required string Key { get; init; } Property Value string Value public required JNode Value { get; init; } Property Value JNode Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetPropertyKey() public string GetPropertyKey() Returns string GetPropertyValue() public JNode GetPropertyValue() Returns JNode Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JRoot.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JRoot.html",
    "title": "Class JRoot | Json Schema",
    "keywords": "Class JRoot Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JRoot : JNode Inheritance object JNode JRoot Inherited Members JNode.Context JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Definitions public IList<JDefinition>? Definitions { get; init; } Property Value IList<JDefinition> Includes public IList<JInclude>? Includes { get; init; } Property Value IList<JInclude> Parent public override JNode Parent { get; } Property Value JNode Pragmas public IList<JPragma>? Pragmas { get; init; } Property Value IList<JPragma> Title public JTitle? Title { get; init; } Property Value JTitle Value public required JNode Value { get; init; } Property Value JNode Version public JVersion? Version { get; init; } Property Value JVersion Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JsonType.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JsonType.html",
    "title": "Class JsonType | Json Schema",
    "keywords": "Class JsonType Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JsonType Inheritance object JsonType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields ANY public static readonly JsonType ANY Field Value JsonType ARRAY public static readonly JsonType ARRAY Field Value JsonType BOOLEAN public static readonly JsonType BOOLEAN Field Value JsonType DATE public static readonly JsonType DATE Field Value JsonType DOUBLE public static readonly JsonType DOUBLE Field Value JsonType FLOAT public static readonly JsonType FLOAT Field Value JsonType INTEGER public static readonly JsonType INTEGER Field Value JsonType NULL public static readonly JsonType NULL Field Value JsonType NUMBER public static readonly JsonType NUMBER Field Value JsonType OBJECT public static readonly JsonType OBJECT Field Value JsonType STRING public static readonly JsonType STRING Field Value JsonType TIME public static readonly JsonType TIME Field Value JsonType Properties Name public string Name { get; } Property Value string Type public Type Type { get; } Property Value Type Methods From(string) public static JsonType From(string name) Parameters name string Returns JsonType Match(JNode) public bool Match(JNode node) Parameters node JNode Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JString.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JString.html",
    "title": "Class JString | Json Schema",
    "keywords": "Class JString Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JString : JPrimitive, IJsonType<JString>, IPragmaValue<string> Inheritance object JNode JLeaf JPrimitive JString Implements IJsonType<JString> IPragmaValue<string> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public JsonType Type { get; } Property Value JsonType Value public required string Value { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(JString) public static implicit operator string(JString @string) Parameters string JString Returns string"
  },
  "api/RelogicLabs.JsonSchema.Types.JTitle.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JTitle.html",
    "title": "Class JTitle | Json Schema",
    "keywords": "Class JTitle Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JTitle : JDirective Inheritance object JNode JDirective JTitle Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields TitleMarker public const string TitleMarker = \"%title\" Field Value string Properties Title public required string Title { get; init; } Property Value string Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JUndefined.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JUndefined.html",
    "title": "Class JUndefined | Json Schema",
    "keywords": "Class JUndefined Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JUndefined : JPrimitive Inheritance object JNode JLeaf JPrimitive JUndefined Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields UndefinedMarker public const string UndefinedMarker = \"!\" Field Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JValidator.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JValidator.html",
    "title": "Class JValidator | Json Schema",
    "keywords": "Class JValidator Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JValidator : JBranch Inheritance object JNode JBranch JValidator Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields OptionalMarker public const string OptionalMarker = \"?\" Field Value string Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> DataTypes public required IList<JDataType> DataTypes { get; init; } Property Value IList<JDataType> Functions public required IList<JFunction> Functions { get; init; } Property Value IList<JFunction> Optional public bool Optional { get; init; } Property Value bool Value public JNode? Value { get; init; } Property Value JNode Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JVersion.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JVersion.html",
    "title": "Class JVersion | Json Schema",
    "keywords": "Class JVersion Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JVersion : JDirective Inheritance object JNode JDirective JVersion Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields VersionMarker public const string VersionMarker = \"%version\" Field Value string Properties Version public required string Version { get; init; } Property Value string Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Utilities.DebugUtils.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.DebugUtils.html",
    "title": "Class DebugUtils | Json Schema",
    "keywords": "Class DebugUtils Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public static class DebugUtils Inheritance object DebugUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DebugPrint public static bool DebugPrint Field Value bool"
  },
  "api/RelogicLabs.JsonSchema.Utilities.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.html",
    "title": "Namespace RelogicLabs.JsonSchema.Utilities | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Utilities Classes DebugUtils Properties<T, TK, TV> Interfaces IProperties<T, TK, TV> IProperty<TKey, TValue>"
  },
  "api/RelogicLabs.JsonSchema.Utilities.IProperties-3.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.IProperties-3.html",
    "title": "Interface IProperties<T, TK, TV> | Json Schema",
    "keywords": "Interface IProperties<T, TK, TV> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public interface IProperties<T, TK, TV> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : IProperty<TK, TV> where TK : notnull Type Parameters T TK TV Inherited Members IList<T>.IndexOf(T) IList<T>.Insert(int, T) IList<T>.RemoveAt(int) IList<T>.this[int] ICollection<T>.Add(T) ICollection<T>.Clear() ICollection<T>.Contains(T) ICollection<T>.CopyTo(T[], int) ICollection<T>.Remove(T) ICollection<T>.Count ICollection<T>.IsReadOnly IEnumerable<T>.GetEnumerator() Properties this[TK] T this[TK key] { get; } Parameters key TK Property Value T Keys IEnumerable<TK> Keys { get; } Property Value IEnumerable<TK> Pairs IEnumerable<T> Pairs { get; } Property Value IEnumerable<T> Values IEnumerable<TV> Values { get; } Property Value IEnumerable<TV> Methods ContainsKey(TK) bool ContainsKey(TK key) Parameters key TK Returns bool ContainsValue(TV) bool ContainsValue(TV value) Parameters value TV Returns bool TryGetValue(TK, out T) bool TryGetValue(TK key, out T value) Parameters key TK value T Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Utilities.IProperty-2.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.IProperty-2.html",
    "title": "Interface IProperty<TKey, TValue> | Json Schema",
    "keywords": "Interface IProperty<TKey, TValue> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public interface IProperty<out TKey, out TValue> Type Parameters TKey TValue Methods GetPropertyKey() TKey GetPropertyKey() Returns TKey GetPropertyValue() TValue GetPropertyValue() Returns TValue"
  },
  "api/RelogicLabs.JsonSchema.Utilities.Properties-3.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.Properties-3.html",
    "title": "Class Properties<T, TK, TV> | Json Schema",
    "keywords": "Class Properties<T, TK, TV> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public class Properties<T, TK, TV> : IProperties<T, TK, TV>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : IProperty<TK, TV> where TK : notnull Type Parameters T TK TV Inheritance object Properties<T, TK, TV> Implements IProperties<T, TK, TV> IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Properties(IEnumerable<T>) public Properties(IEnumerable<T> properties) Parameters properties IEnumerable<T> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value T The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. this[TK] public T this[TK key] { get; } Parameters key TK Property Value T Keys public IEnumerable<TK> Keys { get; } Property Value IEnumerable<TK> Pairs public IEnumerable<T> Pairs { get; } Property Value IEnumerable<T> Values public IEnumerable<TV> Values { get; } Property Value IEnumerable<TV> Methods Add(T) Adds an item to the ICollection<T>. public void Add(T item) Parameters item T The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<T>) public IProperties<T, TK, TV> AddRange(IEnumerable<T> values) Parameters values IEnumerable<T> Returns IProperties<T, TK, TV> Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T value) Parameters value T Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TK) public bool ContainsKey(TK key) Parameters key TK Returns bool ContainsValue(TV) public bool ContainsValue(TV value) Parameters value TV Returns bool CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. IndexOf(T) Determines the index of a specific item in the IList<T>. public int IndexOf(T item) Parameters item T The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, T) Inserts an item to the IList<T> at the specified index. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(T value) Parameters value T Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. RemoveRange(IEnumerable<T>) public IProperties<T, TK, TV> RemoveRange(IEnumerable<T> keys) Parameters keys IEnumerable<T> Returns IProperties<T, TK, TV> TryGetValue(TK, out T) public bool TryGetValue(TK key, out T value) Parameters key TK value T Returns bool"
  },
  "articles/datatypes.html": {
    "href": "articles/datatypes.html",
    "title": "Constraint Data Types | Json Schema",
    "keywords": "pre code { font-size: 1.3em; } Constraint Data Types Data types play a pivotal role in validating JSON data for compliance with the schema. Essentially, data types determine the kind of data that a JSON element or value can contain. This mechanism serves as a fundamental process in maintaining the accuracy, consistency, and integrity of JSON document and its structure throughout the system, where data quality and reliability are vital. In the schema document, data types are denoted by the # prefix. Here is an outline of all data types, including their subtypes, used in the schema document to validate a JSON document. When using multiple data types for validation, it indicates that the JSON value is considered valid if it complies with any of the specified alternative data types. All of these data types and their subtypes offer the flexibility of selecting the most appropriate type based on requirements. #any ┬ ├ #object ├ #array ├ #string │ ┬ │ ├ #date │ └ #time ├ #number │ ┬ │ ├ #integer │ ├ #float │ └ #double ├ #boolean └ #null The Any Data Type This data type accepts any valid JSON value that conforms to the JSON standard. It is the least restrictive data type and serves as the parent type for all other data types defined in this schema, each of which imposes more specific constraints. Here is the specification of JSON document containing rules of all valid JSON values. Following is the syntax for specifying this data type: #any The Object Data Type This data type represents the JSON object type and accepts any JSON object specified by the JSON standard. The specification document for JSON provides details about the different syntax and forms of JSON objects. Following is the syntax for specifying this data type: #object The Array Data Type This data type represents the JSON array type and accepts any JSON array specified by the JSON standard. The specification document for JSON provides details about the various syntax and forms of JSON arrays. Below is the syntax for specifying this data type: #array The String Data Type This is one of the most commonly used data types in a JSON document, designed to accept any JSON string as specified by the JSON standard. The syntax for specifying this data type is as follows: #string The Date Data Type The date data type accepts only a type of string which represent a date specified by ISO 8601 standard (date part only). It is a subtype of string data type and thus formatted as per the JSON string specification. Detailed explanations of the ISO 8601 standard can be found in this document. Furthermore, you can refer to this document for a detailed description of the date pattern associated with this data type. To define this data type in schema, use the following syntax: #date The Time Data Type The time data type only accepts strings representing date-time (including both date and time), in accordance with the ISO 8601 standard. Similar to the date data type, it is a subtype of string data type and thus formatted as per the JSON string specification. Here is the ISO 8601 standard document, which contains detailed explanations. Furthermore, you can refer to this document for a detailed description of the date-time pattern associated with this data type. To define this data type in schema, use the following syntax: #time The Number Data Type The number data type serves as the parent data type for all numeric types accommodated by the schema, including integer, floating-point, and exponent-based numbers. It accepts any JSON numerical value in accordance with the JSON standard. The syntax for specifying the number type is as follows: #number The Integer Data Type The integer data type is a subtype of the number data type that only allows integral numbers or whole numbers without any fraction and exponent and thus provides constraints for a wide range of real-world scenarios where numbers cannot involve decimal points or exponents. To specify the integer type in schema, use the following syntax: #integer The Float Data Type The float data type is also a subtype of the number data type that only accepts floating point numbers and does not allow exponent in numbers or integral numbers. This constraint is useful for various real-world applications that require numbers to be exclusively in floating-point format. To specify the float type in schema, use the following syntax: #float The Double Data Type The double data type, as a subtype of the number data type, exclusively accepts numbers with exponents. It can either be an integral number with an exponent or a floating-point number with an exponent. This constraint distinguishes it from other number formats and makes it particularly useful for handling large numbers with exponents. To specify the double type in a schema, use the following syntax: #double The Boolean Data Type The boolean data type is a binary or switch-based data type that only accepts two values, namely true and false. It is particularly useful in situations where toggling and switching are necessary. To specify the boolean type in the schema, use the following syntax: #boolean The Null Data Type The null data type serves as a special constraint within JSON schemas, facilitating the controlled use of null in place of other JSON elements or values. Typically, it is combined with other data types to permit the use of null for specific JSON elements or values. This can set constraints for scenarios in which an array without any elements and an object without any properties can either have null or only be allowed to be empty. Additionally, the @nonempty constraint functions can be employed to further control the use of empty values within a JSON document. To specify the null type in the schema, use the following syntax: #null"
  },
  "articles/datetime.html": {
    "href": "articles/datetime.html",
    "title": "Date and Time Patterns | Json Schema",
    "keywords": "Date and Time Patterns Dates and times are fundamental data types used in a wide range of data exchange scenarios. This schema offers a comprehensive set of tools for managing dates and times, including pattern-based formatting to meet the unique requirements of various systems and applications. Simultaneously, it incorporates validation processes to ensure compliance with the schema. Date and time formats are defined using date and time pattern strings. Within these pattern strings, unquoted letters ranging from 'A' to 'Z' and 'a' to 'z' serve as placeholders representing various components of a date or time string. To prevent their interpretation as patterns, text can be enclosed in single quotes ('). Additionally, two consecutive single quotes ('') are used to represent a literal single quote within the string. Any characters outside of these uppercase and lowercase letters, as well as the text enclosed in single quotes, are not interpreted and are matched against the input string during validation. Below, you will find a list of pattern letters and strings that are defined for date and time patterns. Please note that any characters within the 'A' to 'Z' and 'a' to 'z' range are reserved and should not be directly included in the pattern string. Pattern Description Example G Era period designator AD YYYY Four digit year number 1970 YY Two digit year number 70 MM Month number in year (2 digit form) 01 MMMM Full name of month January MMM Short name of month Jan M Month number in year (1-2 digit form) 1, 01 DDDD Full name of day in week Monday DDD Short name of day in week Mon DD Day in month (2 digit form) 01 D Day in month (1-2 digit form) 1, 01 t AM/PM designator AM, PM hh Hour in day (2 digit form) 01, 12 h Hour in day (1-2 digit form) 1, 01 mm Minute in hour (2 digit form) 01, 20 m Minute in hour (1-2 digit form) 1, 01 ss Second in minute (2 digit form) 1, 01 s Second in minute (1-2 digit form) 1, 01 f Tenths of a second 1 ff Hundredths of a second 11 fff Milliseconds of a second 111 ffff Ten thousandths of a second 1111 fffff Hundred thousandths of a second 11111 ffffff Millionths of a second 111111 F Fraction of a second upto 6 digits 1, 111 The pattern components listed above can be combined to create comprehensive and customized date and time patterns to accommodate all system and user requirements. The following table illustrates some examples of how different date-time pattern components can be combined. Combined Pattern Example YYYY-MM-DD 2023-09-01 YYYY-MM-DD'T'hh:mm:ss.fffZZ 2023-09-01T14:35:10.123+06:00 MMMM DD, YYYY G January 01, 1980 AD DDDD, D MMMM YYYY Tuesday, 11 July 2023 YYYY.MM.DD hh.mm.ss t 1980.11.21 10.30.50 pm DDD, D MMM YY hh:mm:ss ZZ Sun, 4 Jul 99 12:08:56 -06:00 hh:mm:ss t ZZ 03:11:30 AM +06:00 The first pattern in the table above adheres to the ISO 8601 date format and is used to validate the #date data type within the schema. The second pattern in the table follows the ISO 8601 format for date and time, validating the #time data type in the schema. Instead of explicitly specifying these patterns in the @date or @time functions, a more concise approach is to directly utilize the #date or #time type within the schema. When the AM/PM designator is included in the date and time pattern, the presence of any hour format specifier indicates that the time is in the 12-hour clock format. Conversely, when the AM/PM designator is omitted, the presence of any hour format specifier indicates that the time is in the 24-hour clock format."
  },
  "articles/functions.html": {
    "href": "articles/functions.html",
    "title": "Constraint Functions | Json Schema",
    "keywords": "pre code { font-size: 1.3em; } table th:first-of-type { min-width: 140px; } Constraint Functions This document serves as a brief overview, providing key insights into the built-in constraint functions that are part of the core schema. These functions significantly extend the scope of data and structural validation, going beyond the limits of basic data type restrictions. These functions are designed to enhance the effectiveness of schema validation, ensuring the accuracy, consistency, integrity, and compliance of the JSON data to the schema. The notation below outlines the typical structure of constraint or validation functions applicable to JSON elements or values. In this notation, Target comprises two components: the target type, which specifies the JSON value type under consideration, and the target name, which identifies the specific JSON value to which the validation or constraint function applies. The Constraint-Function refers to the name of the function responsible for the validation. Target - Constraint-Function[(Parameter-Set)] The Parameter-Set contains the parameters that control the validation process provided by the constraint function on the target JSON value. Please note that the Parameter-Set including the opening and closing parentheses are optional. The ellipsis or three dots ... after a parameter type indicates it can accept any number of arguments of that type. When using multiple validation functions, each function validates the target JSON value, and the overall validation succeeds only when every function independently deems the target JSON value as valid. Function Details Below, you will find a detailed explanation of the syntax and useful applications of each function, allowing you to gain a clear understanding of their usage. String Length #string target - @length(#integer number) Validates that the target string has the length specified by the number. If the length of the target string does not match the value specified by number, a validation error will generate. #string target - @length(#integer minimum, #integer maximum) Validates that the length of the target string satisfies the range requirement specified by the parameters. It checks that the length of the target string is equal to or greater than the minimum length specified and simultaneously less than or equal to the maximum length specified. If not, a validation error will generate. If either the parameter values for minimum or maximum are unspecified or undefined, the undefined symbol ! can be used in place of either of these parameters. The following examples illustrate the various use cases of the @length function of the two variations described above, for the target data type string: Ues Cases Valid Values Invalid Values @length(4) \"ABCD\" \"AB\", \"ABCDE\" @length(2, 4) \"AB\", \"ABC\", \"ABCD\" \"\", \"A\", \"ABCDE\" @length(2, !) \"AB\", \"ABCDEFGH\" \"\", \"A\" @length(!, 4) \"\", \"A\", \"ABC\", \"ABCD\" \"ABCDE\" \"ABCDEFGHI\" Array Length #array target - @length(#integer number) Validates that the target array has the length specified by the number. If the length of the target array does not match the value specified by number, a validation error will generate. #array target - @length(#integer minimum, #integer maximum) Validates that the length of the target array satisfies the range requirement specified by the parameters. It checks that the length of the target array is equal to or greater than the minimum length specified and simultaneously less than or equal to the maximum length specified. If not, a validation error will generate. If either the parameter values for minimum or maximum are unspecified or undefined, the undefined symbol ! can be used in place of either of these parameters. The following examples illustrate the various use cases of the @length function of the two variations described above, for the target data type array: Ues Cases Valid Values Invalid Values @length(4) [1, 2, 3, 4] [1, 2, 3], [1, 2, 3, 4, 5] @length(2, 4) [1, 2], [1, 2, 3], [1, 2, 3, 4] [], [1], [1, 2, 3, 4, 5] @length(2, !) [1, 2], [1, 2, 3, 4, 5] [], [1] @length(!, 4) [], [1, 2], [1, 2, 3, 4] [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6] Object Length / Size #object target - @length(#integer number) Validates that the target object has the length or size specified by the number. If the length of the target object does not match the value specified by number, a validation error will generate. #object target - @length(#integer minimum, #integer maximum) Validates that the length or size of the target object satisfies the range requirement specified by the parameters. It checks that the length of the target object is equal to or greater than the minimum length specified and simultaneously less than or equal to the maximum length specified. If not, a validation error will generate. If either the parameter values for minimum or maximum are unspecified or undefined, the undefined symbol ! can be used in place of either of these parameters. The following examples illustrate the various use cases of the @length function of the two variations described above, for the target data type object: Ues Cases Valid Values Invalid Values @length(4) {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4} {\"k1\":1, \"k2\":2, \"k3\":3}, {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4, \"k5\":5} @length(2, 4) {\"k1\":1, \"k2\":2}, {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4} {}, {\"k1\":1}, {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4, \"k5\":5} @length(2, !) {\"k1\":1, \"k2\":2}, {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4, \"k5\":5} {}, {\"k1\":1} @length(!, 4) {}, {\"k1\":1, \"k2\":2}, {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4} {\"k1\":1, \"k2\":2, \"k3\":3, \"k4\":4, \"k5\":5} Number Range #number target - @range(#number minimum, #number maximum) Validates that the target number satisfies the range requirement specified by the parameters. It checks that the target number is equal to or greater than the minimum number specified and simultaneously less than or equal to the maximum number specified. If not, a validation error will generate. If either the parameter values for minimum or maximum are unspecified or undefined, the undefined symbol ! can be used in place of either of these parameters. The following examples illustrate the various use cases of the @range function of the two variations described above, for the target data type number: Ues Cases Valid Values Invalid Values @range(2, 4) 2, 3, 4 0, 1, -100, 100 @range(2, !) 2, 3, 4, 100 0, 1, -100 @range(!, 4) 0, 1, 4, -100 5, 10, 100 String Enum #string target - @enum(#string... items) Validates that the target string is equal to one of the strings specified by the items parameter. If not, a validation error will generate. Number Enum #number target - @enum(#number... items) Validates that the target number is equal to one of the numbers specified by the items parameter. If not, a validation error will generate. Array Elements #array target - @elements(#any... items) Validates that the target array contains every JSON value specified by the items parameter. If not, it generates a validation error. Object Keys #object target - @keys(#string... items) Validates that all the strings specified in the items parameter are present as keys in the target object. If any of them is missing, a validation error is generated. Object Values #object target - @values(#any... items) Validates that all the JSON values specified in the items parameter are present as values in the target object. If any of them is missing, a validation error is generated. String Regular Expression (Regex) #string target - @regex(#string pattern) Validates that the target string matches the regular expression pattern specified by the pattern parameter. The regular expression engine used here supports standard syntax from both POSIX (IEEE Portable Operating System Interface) Extended Regular Expressions and Perl-Compatible Regular Expressions (PCRE). For more details, please refer to POSIX Regular Expressions. Email Address #string target - @email Validates whether the target string represents a valid email address. It follows the SMTP protocol RFC 5322 specification for mailbox address format to identify a valid email address. In addition to conforming to this standard, it recognizes all widely used email address formats to ensure compatibility with various systems and user requirements. URL & URI Address #string target - @url(#string scheme) Validates whether the target string is a valid URL (Uniform Resource Locator) or URI (Uniform Resource Identifier) with a specific scheme provided by the scheme parameter. It follows the RFC 3986 URI Generic Syntax to determine the validity of the URL or URI. In addition to conforming to this standard, it recognizes all widely used URL and URI address formats, ensuring compatibility with a wide range of systems and user requirements. #string target - @url Validates whether the target string is a valid URL or URI with HTTP and HTTPS scheme. For more information please check the function #string target - @url(#string scheme). Phone Number #string target - @phone Validates whether the target string is a valid phone number. It follows the ITU-T E.163 and E.164 telephone number notation to determine the validity of the phone number. In addition to conforming to this standard, it recognizes all widely used national and international phone number formats, ensuring compatibility with a wide range of systems and user requirements. Date and Time #string target - @date(pattern) Validates that the target string matches the date and time pattern specified by the pattern parameter. It fully supports the ISO 8601 date and time format. Beyond this standard, it also allows custom date and time formats, ensuring compatibility with various systems and meeting diverse users and businesses requirements. This document provides a comprehensive overview of the date-time custom patterns. #string target - @time(pattern) Both the @date and @time functions support a complete range of date-time patterns, enabling the precise definition of any date and time scenario. Therefore, these functions can be used interchangeably. When the sole consideration is the date or day of the month in a year, employing the @date function is the more convenient choice. In contrast, when it becomes necessary to specify a particular time on a date, the @time function is the more appropriate option. To learn more about date-time patterns, please refer to this page. Number Positive #number target - @positive Validates that the target number is positive. If the target number is zero or negative, it generates a validation error. Number Negative #number target - @negative Validates that the target number is negative. If the target number is zero or positive, it generates a validation error. String Not Empty #string target - @nonempty Validates that the target string is not empty. If the target string is empty, it generates a validation error. Array Not Empty #array target - @nonempty Validates that the target array is not empty. If the target array is empty, it generates a validation error. Object Not Empty #object target - @nonempty Validates that the target object is not empty. If the target object is empty, it generates a validation error."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Json Schema",
    "keywords": "Introduction New JSON Schema is a practical tool for defining and validating the structure of JSON documents. It allows you to specify the expected format, data types, and constraints of JSON data. The following guides offer comprehensive details about the New JSON Schema. This document provides a list of previews, each corresponding to a specific detail document available within this project. Getting Started This guide will walk you through the essential steps to quickly get up and running with New JSON Schema library. It is also assumes a modest familiarity with the .NET SDK and .NET CLI (command-line interface) toolchain including basic familiarity with NuGet packages. Additionally, it considers a certain level of knowledge in C# language. For complete document please visit this page. Specification New JSON Schema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSON Schema, you can ensure that your JSON data follows a specific format and adheres to certain rules. For complete document please visit this page. Data Types Data types play a pivotal role in validating JSON data for compliance with the schema. Essentially, data types determine the kind of data that a JSON element or value can contain. This mechanism serves as a fundamental process in maintaining the accuracy, consistency, and integrity of JSON document and its structure throughout the system, where data quality and reliability are vital. For complete document please visit this page. Constraint Functions This document serves as a brief overview, providing key insights into the built-in constraint functions that are part of the core schema. These functions significantly extend the scope of data and structural validation, going beyond the limits of basic data type restrictions. These functions are designed to enhance the effectiveness of schema validation, ensuring the accuracy, consistency, integrity, and compliance of the JSON data to the schema. For complete document please visit this page. Date and Time Patterns Dates and times are fundamental data types used in a wide range of data exchange scenarios. This schema offers a comprehensive set of tools for managing dates and times, including pattern-based formatting to meet the unique requirements of various systems and applications. Simultaneously, it incorporates validation processes to ensure compliance with the schema. For complete document please visit this page. Build from Source Code This comprehensive guide illustrates the procedures for retrieving source code from a GitHub repository, compiling the project source code into a library, and seamlessly integrating the compiled library into your project. Within this document, we will navigate through these steps, presenting them clearly and straightforwardly. For complete document please visit this page."
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Getting Started | Json Schema",
    "keywords": "Getting Started This guide will walk you through the essential steps to quickly get up and running with New JSON Schema library. It is also assumes a modest familiarity with the .NET SDK and .NET CLI (command-line interface) toolchain including basic familiarity with NuGet packages. Additionally, it considers a certain level of knowledge in C# language. NuGet Library Package To get started, launch your preferred IDE (such as Visual Studio, JetBrains Rider, or VS Code) and open the C# project where you intend to include this library package. Within your IDE, navigate to the NuGet package manager and search for the package by the name 'RelogicLabs.JsonSchema'. Subsequently, proceed to add or install the package to your project. Alternatively, you have the option to utilize the .NET CLI by executing the following command to include the package within your project: dotnet add package RelogicLabs.JsonSchema --version 1.1.0 To verify the successful integration of the library into your project, you may manually inspect your project file, typically named .csproj, using a text editor, and search for the following XML snippet within the file: <ItemGroup> <PackageReference Include=\"RelogicLabs.JsonSchema\" Version=\"1.1.0\" /> </ItemGroup> Write a Sample to Test With the necessary components in place, you are now prepared to create a sample schema and validate a corresponding JSON against the schema. The subsequent example presents a C# class featuring a method designed for validating a sample JSON based on a provided schema. using RelogicLabs.JsonSchema; namespace CSharpApplication; public class SampleSchema { public bool CheckIsValid() { var schema = \"\"\" %title: \"User Profile Response\" %version: 1.0.0 %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"profile\": { \"firstName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"age\": @range(18, 130) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null } } } \"\"\"; var json = \"\"\" { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } \"\"\"; JsonSchema jsonSchema = new(schema); return jsonSchema.IsValid(json); } } For more information about the schema syntax format and library functionalities, please refer to the reference documentation here. Create Some Validation Errors Let's intentionally introduce a few errors by modifying the previous JSON document and then examine the validation results. To begin, we'll alter the id within the user object to a string type and observe the outcome. Additionally, we'll modify the username by inserting a space into its value, thus creating an invalid username. Below is the revised JSON representation, now containing these purposeful errors. { \"user\": { \"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } To achieve the desired outcome, please make the following changes to the preceding code. Specifically, ensure that any schema validation errors are displayed in the console. The modified code snippet that invokes the WriteError method to display the errors if validation fails is as follows: ... JsonSchema jsonSchema = new(schema); if(!jsonSchema.IsValid(json)) jsonSchema.WriteError(); ... Here is the error as displayed in the console. More specific errors will be listed first, followed by more general errors. Consequently, the specific errors will precisely pinpoint the issues within the JSON document, while the generic errors will provide contextual information about where the errors occurred. Schema (Line: 6:31) Json (Line: 3:14) [DTYP02]: Data type mismatch. Data type #integer is expected but found #string inferred by \"not number\". Schema (Line: 6:14) [FUNC03]: Function @range(1, 10000) is applicable on JNumber but applied on JString of \"not number\" Schema (Line: 8:20) Json (Line: 4:20) [REGX01]: Regex pattern does not match. String of pattern \"[a-z_]{3,30}\" is expected but found \"john doe\" that mismatches with pattern. Schema (Line: 5:12) Json (Line: 2:12) [VALD01]: Validation Failed. Value {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, \"profile\"...ing, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}} is expected but found {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": \"Doe\", \"a...: \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}. Schema (Line: 4:0) Json (Line: 1:0) [VALD01]: Validation Failed. Value {\"user\": {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, ...ng, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}}} is expected but found {\"user\": {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": ... \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}}."
  },
  "articles/sourcebuild.html": {
    "href": "articles/sourcebuild.html",
    "title": "Build from Source Code | Json Schema",
    "keywords": "Build from Source Code This comprehensive guide illustrates the procedures for retrieving source code from a GitHub repository, compiling the project source code into a library, and seamlessly integrating the compiled library into your project. Within this document, we will navigate through these steps, presenting them clearly and straightforwardly. Build the Library To get started, clone the project from the following URL using your preferred Git client (command line or GUI). You can open a terminal and enter the following Git clone command as shown below: git clone https://github.com/relogiclabs/JsonSchema-DotNet.git Next, use .NET build command dotnet build to build the project and Retrieve the DLL file, RelogicLabs.JsonSchema.dll from the bin folder. Add the Library to Your Project To integrate the library with your project, you can create a libs folder within your project directory and place the retrieved DLL file into the designated folder. Alternatively, if your IDE supports adding references, you can conveniently select the DLL from the libs folder. Alternatively, you can manually modify your project file .csproj using a text editor and include the following XML snippet: <ItemGroup> <Reference Include=\"RelogicLabs.JsonSchema\"> <HintPath>libs\\RelogicLabs.JsonSchema.dll</HintPath> </Reference> </ItemGroup> Additionally, this project has a dependency on ANTLR runtime, which you can integrate by executing the following command: dotnet add package Antlr4.Runtime.Standard --version 4.13.0 Write a Sample to Test With the necessary components in place, you are now prepared to create a sample schema and validate a corresponding JSON against the schema. The subsequent example presents a C# class featuring a method designed for validating a sample JSON based on a provided schema. using RelogicLabs.JsonSchema; namespace CSharpApplication; public class SampleSchema { public bool CheckIsValid() { var schema = \"\"\" %title: \"User Profile Response\" %version: 1.0.0 %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"profile\": { \"firstName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"age\": @range(18, 130) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null } } } \"\"\"; var json = \"\"\" { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } \"\"\"; JsonSchema jsonSchema = new(schema); return jsonSchema.IsValid(json); } } For more information about the schema syntax format and library functionalities, please refer to the reference documentation here. Create Some Validation Errors Let's intentionally introduce a few errors by modifying the previous JSON document and then examine the validation results. To begin, we'll alter the id within the user object to a string type and observe the outcome. Additionally, we'll modify the username by inserting a space into its value, thus creating an invalid username. Below is the revised JSON representation, now containing these purposeful errors. { \"user\": { \"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } To achieve the desired outcome, please make the following changes to the preceding code. Specifically, ensure that any schema validation errors are displayed in the console. The modified code snippet that invokes the WriteError method to display the errors if validation fails is as follows: ... JsonSchema jsonSchema = new(schema); if(!jsonSchema.IsValid(json)) jsonSchema.WriteError(); ... Here is the error as displayed in the console. More specific errors will be listed first, followed by more general errors. Consequently, the specific errors will precisely pinpoint the issues within the JSON document, while the generic errors will provide contextual information about where the errors occurred. Schema (Line: 6:31) Json (Line: 3:14) [DTYP02]: Data type mismatch. Data type #integer is expected but found #string inferred by \"not number\". Schema (Line: 6:14) [FUNC03]: Function @range(1, 10000) is applicable on JNumber but applied on JString of \"not number\" Schema (Line: 8:20) Json (Line: 4:20) [REGX01]: Regex pattern does not match. String of pattern \"[a-z_]{3,30}\" is expected but found \"john doe\" that mismatches with pattern. Schema (Line: 5:12) Json (Line: 2:12) [VALD01]: Validation Failed. Value {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, \"profile\"...ing, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}} is expected but found {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": \"Doe\", \"a...: \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}. Schema (Line: 4:0) Json (Line: 1:0) [VALD01]: Validation Failed. Value {\"user\": {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, ...ng, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}}} is expected but found {\"user\": {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": ... \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}}."
  },
  "articles/specification.html": {
    "href": "articles/specification.html",
    "title": "Specification | Json Schema",
    "keywords": "Specification New JSON Schema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSON Schema, you can ensure that your JSON data follows a specific format and adheres to certain rules. Grammar The New JSON Schema grammar is introduced through a notation similar to what is known as the McKeeman form grammar notation, which is a simplified version of the Backus-Naur form and Extended Backus–Naur form. This form minimizes the usage of complex structures of meta-characters, making the grammar highly readable and easy to understand without requiring extensive prior knowledge of grammar syntax. Moreover, inside the grammar whitespace defining rules are ignored to make it clear and concise. schema schema-header-opt defines-opt schema-core defines-opt validator schema-header-opt title-opt version-opt includes-opt pragmas-opt title-opt '' '%title' ':' string version-opt '' '%version' ':' version-digits version-digits digits digits '.' version-digits includes-opt '' includes includes include includes include '%include' ':' class-identifier class-identifier identifier identifier '.' class-identifier pragmas-opt '' pragmas pragmas pragma pragmas pragma '%pragma' identifier ':' primitive defines-opt '' defines defines define defines define '%define' alias-name ':' validator-main alias-name '$' identifier schema-core '%schema' ':' validator validator validator-main alias-name validator-main value-opt functions-opt datatypes-opt this-opt value-opt '' value value primitive object array functions-opt '' functions functions function functions function function-name function-params-opt function-name '@' identifier '@' identifier '*' function-params-opt '' '(' ')' '(' function-params ')' function-params value value ',' function-params datatypes-opt '' datatypes datatypes datatype datatypes datatype datatype-name datatype-param-opt datatype-name '#' alphas '#' alphas '*' alphas alpha alphas datatype-param-opt '' '(' alias-name ')' this-opt '' '?' object '{' '}' '{' properties '}' properties property property ',' properties property string ':' validator array '[' ']' '[' elements ']' elements validator validator ',' elements primitive string number undefined 'true' 'false' 'null' undefined '!' identifier alpha alpha alpha-numerics alpha-numerics alpha-numeric alpha-numerics alpha-numeric alpha '0' . '9' alpha 'A' . 'Z' 'a' . 'z' '_' string '\"' characters '\"' characters '' character characters character '0020' . '10FFFF' - '\"' - '\\' '\\' escape escape '\"' '\\' '/' 'b' 'f' 'n' 'r' 't' 'u' hex hex hex hex hex digit 'A' . 'F' 'a' . 'f' number integer float double integer positive-integer negative-integer float integer fraction fraction '.' digits double integer fraction-opt exponent fraction-opt '' '.' digits exponent 'E' sign-opt digits 'e' sign-opt digits sign-opt '' '+' '-' positive-integer digit one-to-nine digits negative-integer '-' digit '-' one-to-nine digits digits digit digit digits digit '0' one-to-nine one-to-nine '1' . '9' To explore more about McKeeman form grammar notation and standard JSON document grammar in McKeeman form notation, please visit this page. The resource offers valuable information regarding JSON specification and implementations in different programming languages."
  },
  "index.html": {
    "href": "index.html",
    "title": "A New JSON Schema | Json Schema",
    "keywords": "A New JSON Schema A JSON Schema is crucial for making communication, interoperability, validation, testing, documentation, and specification seamless. All of this combined contributes to better maintenance and evolution of data-driven applications and systems. For a comprehensive overview of the roles and uses of JSON Schema in modern web applications, we invite you to explore our dedicated post available here. Design Goals The traditional standard JSON Schema rigorously follows the conventional JSON structure, which unfortunately comes at the expense of simplicity, conciseness, and readability. Our goal is to develop a new JSON Schema that promotes these essential aspects that were previously missing. This new schema is simple, lucid, easy to grasp, and doesn't require much prior knowledge to understand it. It also offers a shallow learning curve for both reading and writing. Additionally, its simplicity and conciseness allow us and machines to read-write more efficiently. Moreover, a large set of constraint data types and functions within the core schema facilitates the precise definition of JSON documents, significantly reducing the potential for communication gaps among collaborators. Furthermore, its inherent extensibility simplifies the process of integrating new constraints and functionalities to meet the diverse requirements of modern web services. Basic Example Let's explore an example of our schema for a typical JSON API response containing information about a user profile or account. The schema is very self-explanatory and thus almost no prior knowledge is required to understand the schema and the JSON responses specified by this schema. %title: \"User Profile Response\" %version: 1.0.0 %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"registeredAt\": #time, \"profile\": { \"firstName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"dateOfBirth\": #date, \"age\": @range(18, 130) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null } } } In the above example, two types of constraint or rule descriptors are used: constraint functions (also known as validation functions, such as @range(1, 10000)) and constraint data types (also known as validation data types, such as #integer). All constraint functions begin with the @ symbol, while all constraint data types start with #. C-style comments are also permitted in the schema. Please note that address can be null (eg. an optional input for users) and if it is null then no constraints of address are applicable. The following JSON is one of the examples which can successfully validate against the above schema. To start your journey with the JSON validation library, please consult the documentation available here. { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"registeredAt\": \"2023-09-06T15:10:30.639Z\", \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"dateOfBirth\": \"1993-06-17\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } Extended Example The next example represents an expanded version of the previous one, which brings more complexity. To effectively construct such schemas with multiple layers of nested structures, it's beneficial to have a fundamental understanding of this schema format. While the syntax may seem difficult at first, it becomes straightforward once you have a basic understanding of it. For more detailed information, reference documentation is available here. %title: \"Extended User Profile Dashboard API Response\" %version: 2.0.0 %include: RelogicLabs.JsonSchema.Tests.Positive.ExternalFunctions, RelogicLabs.JsonSchema.Tests %pragma IgnoreUndefinedProperties: true %define $post: { \"id\": @range(1, 1000) #integer, \"title\": @length(10, 100) #string, \"content\": @length(30, 1000) #string, \"tags\": $tags } #object %define $product: { \"id\": @length(2, 10) @regex(\"[a-z][a-z0-9]+\") #string, \"name\": @length(5, 30) #string, \"brand\": @length(5, 30) #string, \"price\": @range(0.1, 1000000), \"inStock\": #boolean, \"specs\": { \"cpu\": @length(5, 30) #string, \"ram\": @regex(\"[0-9]{1,2}GB\") #string, \"storage\": @regex(\"[0-9]{1,4}GB (SSD|HDD)\") #string } #object #null } %define $tags: @length(1, 10) #array($tag) %define $tag: @length(3, 20) @regex(\"[A-Za-z_]+\") #string %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"registeredAt\": #time, \"profile\": { \"firstName\": @regex(\"[A-Za-z]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z]{3,50}\") #string, \"dateOfBirth\": @date(\"DD-MM-YYYY\") #string, \"age\": @range(18, 128) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null, \"hobbies\": !? }, \"posts\": @length(0, 1000) #object*($post) #array, \"preferences\": { \"theme\": @enum(\"light\", \"dark\") #string, \"fontSize\": @range(9, 24) #integer, \"autoSave\": #boolean } }, \"products\": #object*($product) #array, \"weather\": { \"temperature\": @range(-50.0, 60.0) #float, \"isCloudy\": #boolean } } The subsequent JSON sample is an illustrative example that successfully validates against the expanded schema mentioned earlier. Within this example, recurring JSON structure appear that can be validated through defining components. By reusing defined components, you can achieve a clear and concise schema when validating large JSON with repetitive structures instead of duplicating large and complex validation constraints across the schema. This improves the overall readability and maintainability of the schema. { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"registeredAt\": \"2023-09-06T15:10:30.639Z\", \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"dateOfBirth\": \"17-06-1993\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } }, \"posts\": [ { \"id\": 1, \"title\": \"Introduction to JSON\", \"content\": \"JSON (JavaScript Object Notation) is a lightweight data interchange format...\", \"tags\": [ \"JSON\", \"tutorial\", \"data\" ] }, { \"id\": 2, \"title\": \"Working with JSON in C#\", \"content\": \"C# provides built-in support for working with JSON...\", \"tags\": [ \"CSharp\", \"JSON\", \"tutorial\" ] }, { \"id\": 3, \"title\": \"Introduction to JSON Schema\", \"content\": \"A JSON schema defines the structure and data types of JSON objects...\", \"tags\": [ \"Schema\", \"JSON\", \"tutorial\" ] } ], \"preferences\": { \"theme\": \"dark\", \"fontSize\": 14, \"autoSave\": true } }, \"products\": [ { \"id\": \"p1\", \"name\": \"Smartphone\", \"brand\": \"TechGiant\", \"price\": 599.99, \"inStock\": true, \"specs\": null }, { \"id\": \"p2\", \"name\": \"Laptop\", \"brand\": \"SuperTech\", \"price\": 1299.99, \"inStock\": false, \"specs\": { \"cpu\": \"Intel i7\", \"ram\": \"16GB\", \"storage\": \"512GB SSD\" } } ], \"weather\": { \"temperature\": 25.5, \"isCloudy\": true, \"conditions\": null } } For more information about the schema syntax format and library functionalities, please refer to the reference documentation here."
  }
}