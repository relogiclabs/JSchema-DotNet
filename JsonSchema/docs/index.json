{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Json Schema",
    "keywords": "API Documentation The API documentation is auto-generated from both source code and source code comments. For broader understandings, exploring the source code itself often reveals even more valuable insights and details. To access and explore the source code, please visit the GitHub repository here."
  },
  "api/RelogicLabs.JsonSchema.Exceptions.ClassInstantiationException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.ClassInstantiationException.html",
    "title": "Class ClassInstantiationException | Json Schema",
    "keywords": "Class ClassInstantiationException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class ClassInstantiationException : CommonException, ISerializable Inheritance object Exception CommonException ClassInstantiationException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClassInstantiationException(ErrorDetail) public ClassInstantiationException(ErrorDetail detail) Parameters detail ErrorDetail ClassInstantiationException(ErrorDetail, Exception?) public ClassInstantiationException(ErrorDetail detail, Exception? innerException) Parameters detail ErrorDetail innerException Exception ClassInstantiationException(string, string) public ClassInstantiationException(string code, string message) Parameters code string message string ClassInstantiationException(string, string, Exception?) public ClassInstantiationException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.ClassNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.ClassNotFoundException.html",
    "title": "Class ClassNotFoundException | Json Schema",
    "keywords": "Class ClassNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class ClassNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException ClassNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ClassNotFoundException(ErrorDetail) public ClassNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail ClassNotFoundException(string, string) public ClassNotFoundException(string code, string message) Parameters code string message string ClassNotFoundException(string, string, Exception?) public ClassNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.CommonException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.CommonException.html",
    "title": "Class CommonException | Json Schema",
    "keywords": "Class CommonException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class CommonException : Exception, ISerializable Inheritance object Exception CommonException Implements ISerializable Derived ClassInstantiationException ClassNotFoundException DefinitionNotFoundException DuplicateDefinitionException DuplicateIncludeException DuplicatePragmaException DuplicatePropertyKeyException FunctionMismatchException FunctionNotFoundException InvalidFunctionException InvalidIncludeException InvalidPragmaValueException JsonLexerException JsonParserException JsonSchemaException PragmaNotFoundException SchemaLexerException SchemaParserException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommonException(ErrorDetail) protected CommonException(ErrorDetail detail) Parameters detail ErrorDetail CommonException(ErrorDetail, Exception?) protected CommonException(ErrorDetail detail, Exception? innerException) Parameters detail ErrorDetail innerException Exception CommonException(string, string) protected CommonException(string code, string message) Parameters code string message string CommonException(string, string, Exception?) protected CommonException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception Properties ErrorCode public string ErrorCode { get; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DefinitionNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DefinitionNotFoundException.html",
    "title": "Class DefinitionNotFoundException | Json Schema",
    "keywords": "Class DefinitionNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DefinitionNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException DefinitionNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DefinitionNotFoundException(ErrorDetail) public DefinitionNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail DefinitionNotFoundException(string, string) public DefinitionNotFoundException(string code, string message) Parameters code string message string DefinitionNotFoundException(string, string, Exception?) public DefinitionNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicateDefinitionException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicateDefinitionException.html",
    "title": "Class DuplicateDefinitionException | Json Schema",
    "keywords": "Class DuplicateDefinitionException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicateDefinitionException : CommonException, ISerializable Inheritance object Exception CommonException DuplicateDefinitionException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicateDefinitionException(ErrorDetail) public DuplicateDefinitionException(ErrorDetail detail) Parameters detail ErrorDetail DuplicateDefinitionException(string, string) public DuplicateDefinitionException(string code, string message) Parameters code string message string DuplicateDefinitionException(string, string, Exception?) public DuplicateDefinitionException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicateIncludeException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicateIncludeException.html",
    "title": "Class DuplicateIncludeException | Json Schema",
    "keywords": "Class DuplicateIncludeException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicateIncludeException : CommonException, ISerializable Inheritance object Exception CommonException DuplicateIncludeException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicateIncludeException(ErrorDetail) public DuplicateIncludeException(ErrorDetail detail) Parameters detail ErrorDetail DuplicateIncludeException(string, string, Exception?) public DuplicateIncludeException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePragmaException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePragmaException.html",
    "title": "Class DuplicatePragmaException | Json Schema",
    "keywords": "Class DuplicatePragmaException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicatePragmaException : CommonException, ISerializable Inheritance object Exception CommonException DuplicatePragmaException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicatePragmaException(ErrorDetail) public DuplicatePragmaException(ErrorDetail detail) Parameters detail ErrorDetail DuplicatePragmaException(string, string) public DuplicatePragmaException(string code, string message) Parameters code string message string DuplicatePragmaException(string, string, Exception?) public DuplicatePragmaException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePropertyKeyException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.DuplicatePropertyKeyException.html",
    "title": "Class DuplicatePropertyKeyException | Json Schema",
    "keywords": "Class DuplicatePropertyKeyException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class DuplicatePropertyKeyException : CommonException, ISerializable Inheritance object Exception CommonException DuplicatePropertyKeyException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicatePropertyKeyException(ErrorDetail) public DuplicatePropertyKeyException(ErrorDetail detail) Parameters detail ErrorDetail DuplicatePropertyKeyException(string, string) public DuplicatePropertyKeyException(string code, string message) Parameters code string message string DuplicatePropertyKeyException(string, string, Exception?) public DuplicatePropertyKeyException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.FunctionMismatchException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.FunctionMismatchException.html",
    "title": "Class FunctionMismatchException | Json Schema",
    "keywords": "Class FunctionMismatchException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class FunctionMismatchException : CommonException, ISerializable Inheritance object Exception CommonException FunctionMismatchException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionMismatchException(ErrorDetail) public FunctionMismatchException(ErrorDetail detail) Parameters detail ErrorDetail FunctionMismatchException(string, string) public FunctionMismatchException(string code, string message) Parameters code string message string FunctionMismatchException(string, string, Exception?) public FunctionMismatchException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.FunctionNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.FunctionNotFoundException.html",
    "title": "Class FunctionNotFoundException | Json Schema",
    "keywords": "Class FunctionNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class FunctionNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException FunctionNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FunctionNotFoundException(ErrorDetail) public FunctionNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail FunctionNotFoundException(string, string) public FunctionNotFoundException(string code, string message) Parameters code string message string FunctionNotFoundException(string, string, Exception?) public FunctionNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.html",
    "title": "Namespace RelogicLabs.JsonSchema.Exceptions | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Exceptions Classes ClassInstantiationException ClassNotFoundException CommonException DefinitionNotFoundException DuplicateDefinitionException DuplicateIncludeException DuplicatePragmaException DuplicatePropertyKeyException FunctionMismatchException FunctionNotFoundException InvalidFunctionException InvalidIncludeException InvalidPragmaValueException JsonLexerException JsonParserException JsonSchemaException PragmaNotFoundException SchemaLexerException SchemaParserException"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidFunctionException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidFunctionException.html",
    "title": "Class InvalidFunctionException | Json Schema",
    "keywords": "Class InvalidFunctionException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidFunctionException : CommonException, ISerializable Inheritance object Exception CommonException InvalidFunctionException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidFunctionException(ErrorDetail) public InvalidFunctionException(ErrorDetail detail) Parameters detail ErrorDetail InvalidFunctionException(string, string) public InvalidFunctionException(string code, string message) Parameters code string message string InvalidFunctionException(string, string, Exception?) public InvalidFunctionException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidIncludeException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidIncludeException.html",
    "title": "Class InvalidIncludeException | Json Schema",
    "keywords": "Class InvalidIncludeException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidIncludeException : CommonException, ISerializable Inheritance object Exception CommonException InvalidIncludeException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidIncludeException(ErrorDetail) public InvalidIncludeException(ErrorDetail detail) Parameters detail ErrorDetail InvalidIncludeException(string, string) public InvalidIncludeException(string code, string message) Parameters code string message string InvalidIncludeException(string, string, Exception?) public InvalidIncludeException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.InvalidPragmaValueException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.InvalidPragmaValueException.html",
    "title": "Class InvalidPragmaValueException | Json Schema",
    "keywords": "Class InvalidPragmaValueException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class InvalidPragmaValueException : CommonException, ISerializable Inheritance object Exception CommonException InvalidPragmaValueException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidPragmaValueException(ErrorDetail) public InvalidPragmaValueException(ErrorDetail detail) Parameters detail ErrorDetail InvalidPragmaValueException(string, string) public InvalidPragmaValueException(string code, string message) Parameters code string message string InvalidPragmaValueException(string, string, Exception?) public InvalidPragmaValueException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonLexerException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonLexerException.html",
    "title": "Class JsonLexerException | Json Schema",
    "keywords": "Class JsonLexerException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonLexerException : CommonException, ISerializable Inheritance object Exception CommonException JsonLexerException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonLexerException(string, string) public JsonLexerException(string code, string message) Parameters code string message string JsonLexerException(string, string, Exception?) public JsonLexerException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonParserException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonParserException.html",
    "title": "Class JsonParserException | Json Schema",
    "keywords": "Class JsonParserException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonParserException : CommonException, ISerializable Inheritance object Exception CommonException JsonParserException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonParserException(string, string) public JsonParserException(string code, string message) Parameters code string message string JsonParserException(string, string, Exception?) public JsonParserException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.JsonSchemaException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.JsonSchemaException.html",
    "title": "Class JsonSchemaException | Json Schema",
    "keywords": "Class JsonSchemaException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class JsonSchemaException : CommonException, ISerializable Inheritance object Exception CommonException JsonSchemaException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JsonSchemaException(ErrorDetail, ExpectedDetail, ActualDetail) public JsonSchemaException(ErrorDetail error, ExpectedDetail expected, ActualDetail actual) Parameters error ErrorDetail expected ExpectedDetail actual ActualDetail JsonSchemaException(ErrorDetail, ExpectedDetail, ActualDetail, Exception) public JsonSchemaException(ErrorDetail error, ExpectedDetail expected, ActualDetail actual, Exception innerException) Parameters error ErrorDetail expected ExpectedDetail actual ActualDetail innerException Exception Properties Actual public ActualDetail Actual { get; } Property Value ActualDetail Expected public ExpectedDetail Expected { get; } Property Value ExpectedDetail"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.PragmaNotFoundException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.PragmaNotFoundException.html",
    "title": "Class PragmaNotFoundException | Json Schema",
    "keywords": "Class PragmaNotFoundException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class PragmaNotFoundException : CommonException, ISerializable Inheritance object Exception CommonException PragmaNotFoundException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PragmaNotFoundException(ErrorDetail) public PragmaNotFoundException(ErrorDetail detail) Parameters detail ErrorDetail PragmaNotFoundException(string, string) public PragmaNotFoundException(string code, string message) Parameters code string message string PragmaNotFoundException(string, string, Exception?) public PragmaNotFoundException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.SchemaLexerException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.SchemaLexerException.html",
    "title": "Class SchemaLexerException | Json Schema",
    "keywords": "Class SchemaLexerException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class SchemaLexerException : CommonException, ISerializable Inheritance object Exception CommonException SchemaLexerException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SchemaLexerException(string, string) public SchemaLexerException(string code, string message) Parameters code string message string SchemaLexerException(string, string, Exception?) public SchemaLexerException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Exceptions.SchemaParserException.html": {
    "href": "api/RelogicLabs.JsonSchema.Exceptions.SchemaParserException.html",
    "title": "Class SchemaParserException | Json Schema",
    "keywords": "Class SchemaParserException Namespace RelogicLabs.JsonSchema.Exceptions Assembly RelogicLabs.JsonSchema.dll public class SchemaParserException : CommonException, ISerializable Inheritance object Exception CommonException SchemaParserException Implements ISerializable Inherited Members CommonException.ErrorCode Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SchemaParserException(string, string) public SchemaParserException(string code, string message) Parameters code string message string SchemaParserException(string, string, Exception?) public SchemaParserException(string code, string message, Exception? innerException) Parameters code string message string innerException Exception"
  },
  "api/RelogicLabs.JsonSchema.Functions.CoreFunctions.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.CoreFunctions.html",
    "title": "Class CoreFunctions | Json Schema",
    "keywords": "Class CoreFunctions Namespace RelogicLabs.JsonSchema.Functions Assembly RelogicLabs.JsonSchema.dll public class CoreFunctions : FunctionBase Inheritance object FunctionBase CoreFunctions Inherited Members FunctionBase.Runtime FunctionBase.Function FunctionBase.FailWith(JsonSchemaException) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CoreFunctions(RuntimeContext) public CoreFunctions(RuntimeContext runtime) Parameters runtime RuntimeContext Methods Elements(JArray, params JNode[]) public bool Elements(JArray source, params JNode[] nodes) Parameters source JArray nodes JNode[] Returns bool Email(JString) public bool Email(JString source) Parameters source JString Returns bool Enum(JNumber, params JNumber[]) public bool Enum(JNumber source, params JNumber[] numbers) Parameters source JNumber numbers JNumber[] Returns bool Enum(JString, params JString[]) public bool Enum(JString source, params JString[] strings) Parameters source JString strings JString[] Returns bool Keys(JObject, params JString[]) public bool Keys(JObject source, params JString[] nodes) Parameters source JObject nodes JString[] Returns bool Length(JArray, JInteger) public bool Length(JArray source, JInteger length) Parameters source JArray length JInteger Returns bool Length(JArray, JInteger, JInteger) public bool Length(JArray source, JInteger minLength, JInteger maxLength) Parameters source JArray minLength JInteger maxLength JInteger Returns bool Length(JArray, JInteger, JUnknown) public bool Length(JArray source, JInteger minLength, JUnknown unknown) Parameters source JArray minLength JInteger unknown JUnknown Returns bool Length(JArray, JUnknown, JInteger) public bool Length(JArray source, JUnknown unknown, JInteger maxLength) Parameters source JArray unknown JUnknown maxLength JInteger Returns bool Length(JString, JInteger) public bool Length(JString source, JInteger length) Parameters source JString length JInteger Returns bool Length(JString, JInteger, JInteger) public bool Length(JString source, JInteger minLength, JInteger maxLength) Parameters source JString minLength JInteger maxLength JInteger Returns bool Length(JString, JInteger, JUnknown) public bool Length(JString source, JInteger minLength, JUnknown unknown) Parameters source JString minLength JInteger unknown JUnknown Returns bool Length(JString, JUnknown, JInteger) public bool Length(JString source, JUnknown unknown, JInteger maxLength) Parameters source JString unknown JUnknown maxLength JInteger Returns bool Negative(JNumber) public bool Negative(JNumber source) Parameters source JNumber Returns bool Phone(JString) public bool Phone(JString source) Parameters source JString Returns bool Positive(JNumber) public bool Positive(JNumber source) Parameters source JNumber Returns bool Range(JNumber, JNumber, JNumber) public bool Range(JNumber source, JNumber minNumber, JNumber maxNumber) Parameters source JNumber minNumber JNumber maxNumber JNumber Returns bool Range(JNumber, JNumber, JUnknown) public bool Range(JNumber source, JNumber minNumber, JUnknown unknown) Parameters source JNumber minNumber JNumber unknown JUnknown Returns bool Range(JNumber, JUnknown, JNumber) public bool Range(JNumber source, JUnknown unknown, JNumber maxNumber) Parameters source JNumber unknown JUnknown maxNumber JNumber Returns bool Regex(JString, JString) public bool Regex(JString source, JString pattern) Parameters source JString pattern JString Returns bool Url(JString) public bool Url(JString source) Parameters source JString Returns bool Url(JString, JString) public bool Url(JString source, JString scheme) Parameters source JString scheme JString Returns bool Values(JObject, params JNode[]) public bool Values(JObject source, params JNode[] nodes) Parameters source JObject nodes JNode[] Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Functions.FunctionBase.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.FunctionBase.html",
    "title": "Class FunctionBase | Json Schema",
    "keywords": "Class FunctionBase Namespace RelogicLabs.JsonSchema.Functions Assembly RelogicLabs.JsonSchema.dll public abstract class FunctionBase Inheritance object FunctionBase Derived CoreFunctions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionBase(RuntimeContext) protected FunctionBase(RuntimeContext runtime) Parameters runtime RuntimeContext Properties Function public JFunction Function { get; set; } Property Value JFunction Runtime public required RuntimeContext Runtime { get; init; } Property Value RuntimeContext Methods FailWith(JsonSchemaException) protected bool FailWith(JsonSchemaException exception) Parameters exception JsonSchemaException Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Functions.html": {
    "href": "api/RelogicLabs.JsonSchema.Functions.html",
    "title": "Namespace RelogicLabs.JsonSchema.Functions | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Functions Classes CoreFunctions FunctionBase"
  },
  "api/RelogicLabs.JsonSchema.html": {
    "href": "api/RelogicLabs.JsonSchema.html",
    "title": "Namespace RelogicLabs.JsonSchema | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema Classes JsonAssert JsonSchema Provides Schema validation functionalities for JSON document."
  },
  "api/RelogicLabs.JsonSchema.JsonAssert.html": {
    "href": "api/RelogicLabs.JsonSchema.JsonAssert.html",
    "title": "Class JsonAssert | Json Schema",
    "keywords": "Class JsonAssert Namespace RelogicLabs.JsonSchema Assembly RelogicLabs.JsonSchema.dll public static class JsonAssert Inheritance object JsonAssert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AreEqual(string, string) Tests if the provided JSON strings are logically equivalent, meaning their structural composition and internal data are identical. If the JSON strings are not equivalent, an exception is thrown. public static void AreEqual(string jsonExpected, string jsonActual) Parameters jsonExpected string The expected JSON to compare. jsonActual string The actual JSON to compare. IsValid(string, string) Tests whether the specified JSON string conforms to the given Schema string and throws an exception if the JSON string does not conform to the Schema. public static void IsValid(string schemaExpected, string jsonActual) Parameters schemaExpected string The expected Schema to compare. jsonActual string The actual JSON to compare."
  },
  "api/RelogicLabs.JsonSchema.JsonSchema.html": {
    "href": "api/RelogicLabs.JsonSchema.JsonSchema.html",
    "title": "Class JsonSchema | Json Schema",
    "keywords": "Class JsonSchema Namespace RelogicLabs.JsonSchema Assembly RelogicLabs.JsonSchema.dll Provides Schema validation functionalities for JSON document. public class JsonSchema Inheritance object JsonSchema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonSchema(string) Initializes a new instance of the JsonSchema class for the specified Schema string. public JsonSchema(string schema) Parameters schema string A Schema string to compare. Properties Exceptions public Queue<Exception> Exceptions { get; } Property Value Queue<Exception> Runtime public RuntimeContext Runtime { get; } Property Value RuntimeContext SchemaTree public SchemaTree SchemaTree { get; } Property Value SchemaTree Methods IsValid(string) Indicates whether the input JSON string conforms to the Schema specified in the JsonSchema constructor. public bool IsValid(string json) Parameters json string The JSON to compare with Schema. Returns bool true if the JSON string conforms to the Schema; otherwise, false. IsValid(string, string) Indicates whether the input JSON string conforms to the given Schema string. public static bool IsValid(string schema, string json) Parameters schema string The Schema string to compare. json string The JSON string to compare. Returns bool true if the JSON string conforms to the Schema; otherwise, false. WriteError() Writes error messages that occur during Schema validation process, to the standard error stream. public void WriteError()"
  },
  "api/RelogicLabs.JsonSchema.Message.ActualDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ActualDetail.html",
    "title": "Class ActualDetail | Json Schema",
    "keywords": "Class ActualDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ActualDetail : CommonDetail<ActualDetail> Inheritance object CommonDetail<ActualDetail> ActualDetail Inherited Members CommonDetail<ActualDetail>.Context CommonDetail<ActualDetail>.Message CommonDetail<ActualDetail>.Location object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActualDetail(Context, string) public ActualDetail(Context context, string message) Parameters context Context message string ActualDetail(JNode, string) public ActualDetail(JNode node, string message) Parameters node JNode message string"
  },
  "api/RelogicLabs.JsonSchema.Message.CommonDetail-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.CommonDetail-1.html",
    "title": "Class CommonDetail<T> | Json Schema",
    "keywords": "Class CommonDetail<T> Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public abstract class CommonDetail<T> where T : CommonDetail<T> Type Parameters T Inheritance object CommonDetail<T> Derived ActualDetail ExpectedDetail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommonDetail(Context, string) protected CommonDetail(Context context, string message) Parameters context Context message string CommonDetail(JNode, string) protected CommonDetail(JNode node, string message) Parameters node JNode message string Properties Context public required Context Context { get; init; } Property Value Context Location public required Location Location { get; init; } Property Value Location Message public required string Message { get; init; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Message.ErrorDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ErrorDetail.html",
    "title": "Class ErrorDetail | Json Schema",
    "keywords": "Class ErrorDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ErrorDetail Inheritance object ErrorDetail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ErrorDetail(string, string) public ErrorDetail(string code, string message) Parameters code string message string Properties Code public required string Code { get; init; } Property Value string Message public required string Message { get; init; } Property Value string"
  },
  "api/RelogicLabs.JsonSchema.Message.ExpectedDetail.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.ExpectedDetail.html",
    "title": "Class ExpectedDetail | Json Schema",
    "keywords": "Class ExpectedDetail Namespace RelogicLabs.JsonSchema.Message Assembly RelogicLabs.JsonSchema.dll public class ExpectedDetail : CommonDetail<ExpectedDetail> Inheritance object CommonDetail<ExpectedDetail> ExpectedDetail Inherited Members CommonDetail<ExpectedDetail>.Context CommonDetail<ExpectedDetail>.Message CommonDetail<ExpectedDetail>.Location object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpectedDetail(Context, string) public ExpectedDetail(Context context, string message) Parameters context Context message string ExpectedDetail(JNode, string) public ExpectedDetail(JNode node, string message) Parameters node JNode message string"
  },
  "api/RelogicLabs.JsonSchema.Message.html": {
    "href": "api/RelogicLabs.JsonSchema.Message.html",
    "title": "Namespace RelogicLabs.JsonSchema.Message | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Message Classes ActualDetail CommonDetail<T> ErrorDetail ExpectedDetail"
  },
  "api/RelogicLabs.JsonSchema.Tree.Context.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.Context.html",
    "title": "Class Context | Json Schema",
    "keywords": "Class Context Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class Context Inheritance object Context Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Context(ParserRuleContext, RuntimeContext) public Context(ParserRuleContext parser, RuntimeContext runtime) Parameters parser ParserRuleContext runtime RuntimeContext Properties Parser public required ParserRuleContext Parser { get; init; } Property Value ParserRuleContext Runtime public required RuntimeContext Runtime { get; init; } Property Value RuntimeContext Methods GetLocation() public Location GetLocation() Returns Location GetText() public string GetText() Returns string"
  },
  "api/RelogicLabs.JsonSchema.Tree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.html",
    "title": "Namespace RelogicLabs.JsonSchema.Tree | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Tree Classes Context JsonTree Location RuntimeContext SchemaTree"
  },
  "api/RelogicLabs.JsonSchema.Tree.JsonTree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.JsonTree.html",
    "title": "Class JsonTree | Json Schema",
    "keywords": "Class JsonTree Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class JsonTree Inheritance object JsonTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonTree(RuntimeContext, string) public JsonTree(RuntimeContext context, string input) Parameters context RuntimeContext input string Properties Root public JRoot Root { get; } Property Value JRoot"
  },
  "api/RelogicLabs.JsonSchema.Tree.Location.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.Location.html",
    "title": "Class Location | Json Schema",
    "keywords": "Class Location Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class Location Inheritance object Location Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Location(int, int) public Location(int line, int column) Parameters line int column int Properties Column public required int Column { get; init; } Property Value int Line public required int Line { get; init; } Property Value int Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Tree.RuntimeContext.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.RuntimeContext.html",
    "title": "Class RuntimeContext | Json Schema",
    "keywords": "Class RuntimeContext Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class RuntimeContext Inheritance object RuntimeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Definitions public Dictionary<JAlias, JValidator> Definitions { get; } Property Value Dictionary<JAlias, JValidator> ErrorQueue public Queue<Exception> ErrorQueue { get; } Property Value Queue<Exception> FloatingPointTolerance public double FloatingPointTolerance { get; } Property Value double IgnoreObjectPropertyOrder public bool IgnoreObjectPropertyOrder { get; } Property Value bool IgnoreUnknownProperties public bool IgnoreUnknownProperties { get; } Property Value bool Pragmas public Dictionary<string, JPragma> Pragmas { get; } Property Value Dictionary<string, JPragma> ThrowException public bool ThrowException { get; set; } Property Value bool Methods AddDefinition(JDefinition) public JDefinition AddDefinition(JDefinition definition) Parameters definition JDefinition Returns JDefinition AddFunctions(string, Context?) public void AddFunctions(string className, Context? context = null) Parameters className string context Context AddInclude(JInclude) public JInclude AddInclude(JInclude include) Parameters include JInclude Returns JInclude AddPragma(JPragma) public JPragma AddPragma(JPragma pragma) Parameters pragma JPragma Returns JPragma InvokeFunction(JFunction, JNode) public bool InvokeFunction(JFunction function, JNode node) Parameters function JFunction node JNode Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Tree.SchemaTree.html": {
    "href": "api/RelogicLabs.JsonSchema.Tree.SchemaTree.html",
    "title": "Class SchemaTree | Json Schema",
    "keywords": "Class SchemaTree Namespace RelogicLabs.JsonSchema.Tree Assembly RelogicLabs.JsonSchema.dll public class SchemaTree Inheritance object SchemaTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SchemaTree(RuntimeContext, string) public SchemaTree(RuntimeContext context, string input) Parameters context RuntimeContext input string Properties Root public JRoot Root { get; } Property Value JRoot"
  },
  "api/RelogicLabs.JsonSchema.Types.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.html",
    "title": "Namespace RelogicLabs.JsonSchema.Types | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Types Classes JAlias JArray JBoolean JBranch JDataType JDefinition JDirective JDouble JFloat JFunction JInclude JInteger JLeaf JNode JNull JNumber JObject JPragma JPrimitive JProperty JRoot JString JTitle JUnknown JValidator JVersion JsonType Interfaces IJsonComposite IJsonFloat IJsonType<T> INestedMode IPragmaValue<T>"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonComposite.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonComposite.html",
    "title": "Interface IJsonComposite | Json Schema",
    "keywords": "Interface IJsonComposite Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonComposite Methods ExtractComponents() IList<JNode> ExtractComponents() Returns IList<JNode>"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonFloat.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonFloat.html",
    "title": "Interface IJsonFloat | Json Schema",
    "keywords": "Interface IJsonFloat Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonFloat Properties Value double Value { get; init; } Property Value double"
  },
  "api/RelogicLabs.JsonSchema.Types.IJsonType-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IJsonType-1.html",
    "title": "Interface IJsonType<T> | Json Schema",
    "keywords": "Interface IJsonType<T> Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IJsonType<out T> where T : JNode Type Parameters T Properties Node T Node { get; } Property Value T Type JsonType Type { get; } Property Value JsonType"
  },
  "api/RelogicLabs.JsonSchema.Types.INestedMode.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.INestedMode.html",
    "title": "Interface INestedMode | Json Schema",
    "keywords": "Interface INestedMode Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface INestedMode Fields NestedMarker public const string NestedMarker = \"*\" Field Value string Properties Nested bool Nested { get; init; } Property Value bool"
  },
  "api/RelogicLabs.JsonSchema.Types.IPragmaValue-1.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.IPragmaValue-1.html",
    "title": "Interface IPragmaValue<T> | Json Schema",
    "keywords": "Interface IPragmaValue<T> Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public interface IPragmaValue<out T> Type Parameters T Properties Value T Value { get; } Property Value T"
  },
  "api/RelogicLabs.JsonSchema.Types.JAlias.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JAlias.html",
    "title": "Class JAlias | Json Schema",
    "keywords": "Class JAlias Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JAlias : JLeaf Inheritance object JNode JLeaf JAlias Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Name public required string Name { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JArray.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JArray.html",
    "title": "Class JArray | Json Schema",
    "keywords": "Class JArray Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JArray : JBranch, IJsonType<JArray>, IJsonComposite Inheritance object JNode JBranch JArray Implements IJsonType<JArray> IJsonComposite Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Elements public required IList<JNode> Elements { get; init; } Property Value IList<JNode> Type public JsonType Type { get; } Property Value JsonType Methods ExtractComponents() public IList<JNode> ExtractComponents() Returns IList<JNode> Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JBoolean.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JBoolean.html",
    "title": "Class JBoolean | Json Schema",
    "keywords": "Class JBoolean Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JBoolean : JPrimitive, IJsonType<JBoolean>, IPragmaValue<bool> Inheritance object JNode JLeaf JPrimitive JBoolean Implements IJsonType<JBoolean> IPragmaValue<bool> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public JsonType Type { get; } Property Value JsonType Value public required bool Value { get; init; } Property Value bool Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JBranch.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JBranch.html",
    "title": "Class JBranch | Json Schema",
    "keywords": "Class JBranch Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JBranch : JNode Inheritance object JNode JBranch Derived JArray JDataType JFunction JObject JProperty JValidator Inherited Members JNode.Context JNode.Parent JNode.Children JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RelogicLabs.JsonSchema.Types.JDataType.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDataType.html",
    "title": "Class JDataType | Json Schema",
    "keywords": "Class JDataType Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDataType : JBranch, INestedMode Inheritance object JNode JBranch JDataType Implements INestedMode Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Alias public required JAlias? Alias { get; init; } Property Value JAlias Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> JsonType public required JsonType JsonType { get; init; } Property Value JsonType Nested public required bool Nested { get; init; } Property Value bool Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsApplicable(JNode) public bool IsApplicable(JNode node) Parameters node JNode Returns bool Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JDefinition.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDefinition.html",
    "title": "Class JDefinition | Json Schema",
    "keywords": "Class JDefinition Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDefinition : JDirective Inheritance object JNode JDirective JDefinition Inherited Members JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DefineMarker public const string DefineMarker = \"%define\" Field Value string Properties Alias public required JAlias Alias { get; init; } Property Value JAlias Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Validator public required JValidator Validator { get; init; } Property Value JValidator Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JDirective.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDirective.html",
    "title": "Class JDirective | Json Schema",
    "keywords": "Class JDirective Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JDirective : JNode Inheritance object JNode JDirective Derived JDefinition JInclude JPragma JTitle JVersion Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false."
  },
  "api/RelogicLabs.JsonSchema.Types.JDouble.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JDouble.html",
    "title": "Class JDouble | Json Schema",
    "keywords": "Class JDouble Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JDouble : JNumber, IJsonType<JNumber>, IJsonFloat, IPragmaValue<double> Inheritance object JNode JLeaf JPrimitive JNumber JDouble Implements IJsonType<JNumber> IJsonFloat IPragmaValue<double> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required double Value { get; init; } Property Value double Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JDouble) public static implicit operator double(JDouble @double) Parameters double JDouble Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JFloat.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JFloat.html",
    "title": "Class JFloat | Json Schema",
    "keywords": "Class JFloat Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JFloat : JNumber, IJsonType<JNumber>, IJsonFloat, IPragmaValue<double> Inheritance object JNode JLeaf JPrimitive JNumber JFloat Implements IJsonType<JNumber> IJsonFloat IPragmaValue<double> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required double Value { get; init; } Property Value double Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JFloat) public static implicit operator double(JFloat @float) Parameters float JFloat Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JFunction.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JFunction.html",
    "title": "Class JFunction | Json Schema",
    "keywords": "Class JFunction Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JFunction : JBranch, INestedMode Inheritance object JNode JBranch JFunction Implements INestedMode Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Arguments public required IList<JNode> Arguments { get; init; } Property Value IList<JNode> Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Name public required string Name { get; init; } Property Value string Nested public required bool Nested { get; init; } Property Value bool Methods IsApplicable(JNode) public bool IsApplicable(JNode node) Parameters node JNode Returns bool Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JInclude.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JInclude.html",
    "title": "Class JInclude | Json Schema",
    "keywords": "Class JInclude Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JInclude : JDirective Inheritance object JNode JDirective JInclude Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields IncludeMarker public const string IncludeMarker = \"%include\" Field Value string Properties ClassName public required string ClassName { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JInteger.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JInteger.html",
    "title": "Class JInteger | Json Schema",
    "keywords": "Class JInteger Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JInteger : JNumber, IJsonType<JNumber>, IPragmaValue<long> Inheritance object JNode JLeaf JPrimitive JNumber JInteger Implements IJsonType<JNumber> IPragmaValue<long> Inherited Members JNumber.Compare(double) JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public override JsonType Type { get; } Property Value JsonType Value public required long Value { get; init; } Property Value long Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToDouble() protected override double ToDouble() Returns double ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator double(JInteger) public static implicit operator double(JInteger integer) Parameters integer JInteger Returns double implicit operator long(JInteger) public static implicit operator long(JInteger integer) Parameters integer JInteger Returns long"
  },
  "api/RelogicLabs.JsonSchema.Types.JLeaf.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JLeaf.html",
    "title": "Class JLeaf | Json Schema",
    "keywords": "Class JLeaf Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JLeaf : JNode Inheritance object JNode JLeaf Derived JAlias JPrimitive Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode>"
  },
  "api/RelogicLabs.JsonSchema.Types.JNode.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNode.html",
    "title": "Class JNode | Json Schema",
    "keywords": "Class JNode Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JNode Inheritance object JNode Derived JBranch JDirective JLeaf JRoot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Children public abstract IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Context public required Context Context { get; init; } Property Value Context Parent public virtual JNode? Parent { get; } Property Value JNode Parser public ParserRuleContext Parser { get; } Property Value ParserRuleContext Runtime public RuntimeContext Runtime { get; } Property Value RuntimeContext Methods CastType<T>(JNode) protected T? CastType<T>(JNode node) Parameters node JNode Returns T Type Parameters T CheckType<T>(JNode) protected bool CheckType<T>(JNode node) Parameters node JNode Returns bool Type Parameters T Match(JNode) Determines whether the specified node matches with the current node. public abstract bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public abstract string ToJson() Returns string A JSON string that represents the current object. ToOutline() Returns an abbreviated version of the string obtained from the ToJson() method of the specified length from OutlineLength and replaces a portion of the string with ellipses to match the specified length; otherwise, returns the string unmodified. public virtual string ToOutline() Returns string An abbreviated version of the ToJson() string."
  },
  "api/RelogicLabs.JsonSchema.Types.JNull.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNull.html",
    "title": "Class JNull | Json Schema",
    "keywords": "Class JNull Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JNull : JPrimitive, IJsonType<JNull> Inheritance object JNode JLeaf JPrimitive JNull Implements IJsonType<JNull> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields NullMarker public const string NullMarker = \"null\" Field Value string Properties Type public JsonType Type { get; } Property Value JsonType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JNumber.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JNumber.html",
    "title": "Class JNumber | Json Schema",
    "keywords": "Class JNumber Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JNumber : JPrimitive, IJsonType<JNumber> Inheritance object JNode JLeaf JPrimitive JNumber Implements IJsonType<JNumber> Derived JDouble JFloat JInteger Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type public virtual JsonType Type { get; } Property Value JsonType Methods Compare(double) public int Compare(double other) Parameters other double Returns int Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToDouble() protected abstract double ToDouble() Returns double Operators implicit operator double(JNumber) public static implicit operator double(JNumber number) Parameters number JNumber Returns double"
  },
  "api/RelogicLabs.JsonSchema.Types.JObject.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JObject.html",
    "title": "Class JObject | Json Schema",
    "keywords": "Class JObject Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JObject : JBranch, IJsonType<JObject>, IJsonComposite Inheritance object JNode JBranch JObject Implements IJsonType<JObject> IJsonComposite Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Properties public required IProperties<JProperty, string, JNode> Properties { get; init; } Property Value IProperties<JProperty, string, JNode> Type public JsonType Type { get; } Property Value JsonType Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. ExtractComponents() public IList<JNode> ExtractComponents() Returns IList<JNode> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JPragma.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JPragma.html",
    "title": "Class JPragma | Json Schema",
    "keywords": "Class JPragma Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JPragma : JDirective Inheritance object JNode JDirective JPragma Inherited Members JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields PragmaMarker public const string PragmaMarker = \"%pragma\" Field Value string Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Name public required string Name { get; init; } Property Value string Value public required JPrimitive Value { get; init; } Property Value JPrimitive Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JPrimitive.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JPrimitive.html",
    "title": "Class JPrimitive | Json Schema",
    "keywords": "Class JPrimitive Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public abstract class JPrimitive : JLeaf Inheritance object JNode JLeaf JPrimitive Derived JBoolean JNull JNumber JString JUnknown Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.Match(JNode) JNode.ToJson() JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RelogicLabs.JsonSchema.Types.JProperty.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JProperty.html",
    "title": "Class JProperty | Json Schema",
    "keywords": "Class JProperty Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JProperty : JBranch, IProperty<string, JNode> Inheritance object JNode JBranch JProperty Implements IProperty<string, JNode> Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Key public required string Key { get; init; } Property Value string Value public required JNode Value { get; init; } Property Value JNode Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetPropertyKey() public string GetPropertyKey() Returns string GetPropertyValue() public JNode GetPropertyValue() Returns JNode Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JRoot.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JRoot.html",
    "title": "Class JRoot | Json Schema",
    "keywords": "Class JRoot Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JRoot : JNode Inheritance object JNode JRoot Inherited Members JNode.Context JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> Definitions public IList<JDefinition>? Definitions { get; init; } Property Value IList<JDefinition> Includes public IList<JInclude>? Includes { get; init; } Property Value IList<JInclude> Parent public override JNode Parent { get; } Property Value JNode Pragmas public IList<JPragma>? Pragmas { get; init; } Property Value IList<JPragma> Title public JTitle? Title { get; init; } Property Value JTitle Value public required JNode Value { get; init; } Property Value JNode Version public JVersion? Version { get; init; } Property Value JVersion Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JsonType.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JsonType.html",
    "title": "Class JsonType | Json Schema",
    "keywords": "Class JsonType Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JsonType Inheritance object JsonType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Any public static readonly JsonType Any Field Value JsonType Array public static readonly JsonType Array Field Value JsonType Boolean public static readonly JsonType Boolean Field Value JsonType Decimal public static readonly JsonType Decimal Field Value JsonType Float public static readonly JsonType Float Field Value JsonType Integer public static readonly JsonType Integer Field Value JsonType Null public static readonly JsonType Null Field Value JsonType Number public static readonly JsonType Number Field Value JsonType Object public static readonly JsonType Object Field Value JsonType String public static readonly JsonType String Field Value JsonType Properties Name public string Name { get; } Property Value string Type public Type Type { get; } Property Value Type Methods From(string) public static JsonType From(string name) Parameters name string Returns JsonType Match(JNode) public bool Match(JNode node) Parameters node JNode Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JString.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JString.html",
    "title": "Class JString | Json Schema",
    "keywords": "Class JString Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JString : JPrimitive, IJsonType<JString>, IPragmaValue<string> Inheritance object JNode JLeaf JPrimitive JString Implements IJsonType<JString> IPragmaValue<string> Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Type public JsonType Type { get; } Property Value JsonType Value public required string Value { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(JString) public static implicit operator string(JString @string) Parameters string JString Returns string"
  },
  "api/RelogicLabs.JsonSchema.Types.JTitle.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JTitle.html",
    "title": "Class JTitle | Json Schema",
    "keywords": "Class JTitle Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JTitle : JDirective Inheritance object JNode JDirective JTitle Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields TitleMarker public const string TitleMarker = \"%title\" Field Value string Properties Title public required string Title { get; init; } Property Value string Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JUnknown.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JUnknown.html",
    "title": "Class JUnknown | Json Schema",
    "keywords": "Class JUnknown Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JUnknown : JPrimitive Inheritance object JNode JLeaf JPrimitive JUnknown Inherited Members JLeaf.Children JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields UnknownMarker public const string UnknownMarker = \"!\" Field Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JValidator.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JValidator.html",
    "title": "Class JValidator | Json Schema",
    "keywords": "Class JValidator Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JValidator : JBranch Inheritance object JNode JBranch JValidator Inherited Members JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields OptionalMarker public const string OptionalMarker = \"?\" Field Value string Properties Children public override IEnumerable<JNode> Children { get; } Property Value IEnumerable<JNode> DataTypes public required IList<JDataType> DataTypes { get; init; } Property Value IList<JDataType> Functions public required IList<JFunction> Functions { get; init; } Property Value IList<JFunction> Optional public bool Optional { get; init; } Property Value bool Value public JNode? Value { get; init; } Property Value JNode Methods Match(JNode) Determines whether the specified node matches with the current node. public override bool Match(JNode node) Parameters node JNode The node to compare with the current node. Returns bool true if the specified node matches with the current node; otherwise, false. ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Types.JVersion.html": {
    "href": "api/RelogicLabs.JsonSchema.Types.JVersion.html",
    "title": "Class JVersion | Json Schema",
    "keywords": "Class JVersion Namespace RelogicLabs.JsonSchema.Types Assembly RelogicLabs.JsonSchema.dll public class JVersion : JDirective Inheritance object JNode JDirective JVersion Inherited Members JDirective.Children JDirective.Match(JNode) JNode.Context JNode.Parent JNode.Parser JNode.Runtime JNode.ToOutline() JNode.CastType<T>(JNode) JNode.CheckType<T>(JNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields VersionMarker public const string VersionMarker = \"%version\" Field Value string Properties Version public required string Version { get; init; } Property Value string Methods ToJson() Returns a JSON string that represents the current object. public override string ToJson() Returns string A JSON string that represents the current object."
  },
  "api/RelogicLabs.JsonSchema.Utilities.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.html",
    "title": "Namespace RelogicLabs.JsonSchema.Utilities | Json Schema",
    "keywords": "Namespace RelogicLabs.JsonSchema.Utilities Classes Properties<T, TK, TV> Interfaces IProperties<T, TK, TV> IProperty<TKey, TValue>"
  },
  "api/RelogicLabs.JsonSchema.Utilities.IProperties-3.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.IProperties-3.html",
    "title": "Interface IProperties<T, TK, TV> | Json Schema",
    "keywords": "Interface IProperties<T, TK, TV> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public interface IProperties<T, TK, TV> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : IProperty<TK, TV> where TK : notnull Type Parameters T TK TV Inherited Members IList<T>.IndexOf(T) IList<T>.Insert(int, T) IList<T>.RemoveAt(int) IList<T>.this[int] ICollection<T>.Add(T) ICollection<T>.Clear() ICollection<T>.Contains(T) ICollection<T>.CopyTo(T[], int) ICollection<T>.Remove(T) ICollection<T>.Count ICollection<T>.IsReadOnly IEnumerable<T>.GetEnumerator() Properties this[TK] T this[TK key] { get; } Parameters key TK Property Value T Keys IEnumerable<TK> Keys { get; } Property Value IEnumerable<TK> Pairs IEnumerable<T> Pairs { get; } Property Value IEnumerable<T> Values IEnumerable<TV> Values { get; } Property Value IEnumerable<TV> Methods ContainsKey(TK) bool ContainsKey(TK key) Parameters key TK Returns bool ContainsValue(TV) bool ContainsValue(TV value) Parameters value TV Returns bool TryGetValue(TK, out T) bool TryGetValue(TK key, out T value) Parameters key TK value T Returns bool"
  },
  "api/RelogicLabs.JsonSchema.Utilities.IProperty-2.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.IProperty-2.html",
    "title": "Interface IProperty<TKey, TValue> | Json Schema",
    "keywords": "Interface IProperty<TKey, TValue> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public interface IProperty<out TKey, out TValue> Type Parameters TKey TValue Methods GetPropertyKey() TKey GetPropertyKey() Returns TKey GetPropertyValue() TValue GetPropertyValue() Returns TValue"
  },
  "api/RelogicLabs.JsonSchema.Utilities.Properties-3.html": {
    "href": "api/RelogicLabs.JsonSchema.Utilities.Properties-3.html",
    "title": "Class Properties<T, TK, TV> | Json Schema",
    "keywords": "Class Properties<T, TK, TV> Namespace RelogicLabs.JsonSchema.Utilities Assembly RelogicLabs.JsonSchema.dll public class Properties<T, TK, TV> : IProperties<T, TK, TV>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : IProperty<TK, TV> where TK : notnull Type Parameters T TK TV Inheritance object Properties<T, TK, TV> Implements IProperties<T, TK, TV> IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Properties(IEnumerable<T>) public Properties(IEnumerable<T> properties) Parameters properties IEnumerable<T> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value T The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. this[TK] public T this[TK key] { get; } Parameters key TK Property Value T Keys public IEnumerable<TK> Keys { get; } Property Value IEnumerable<TK> Pairs public IEnumerable<T> Pairs { get; } Property Value IEnumerable<T> Values public IEnumerable<TV> Values { get; } Property Value IEnumerable<TV> Methods Add(T) Adds an item to the ICollection<T>. public void Add(T item) Parameters item T The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<T>) public IProperties<T, TK, TV> AddRange(IEnumerable<T> values) Parameters values IEnumerable<T> Returns IProperties<T, TK, TV> Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T value) Parameters value T Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TK) public bool ContainsKey(TK key) Parameters key TK Returns bool ContainsValue(TV) public bool ContainsValue(TV value) Parameters value TV Returns bool CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. IndexOf(T) Determines the index of a specific item in the IList<T>. public int IndexOf(T item) Parameters item T The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, T) Inserts an item to the IList<T> at the specified index. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(T value) Parameters value T Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. RemoveRange(IEnumerable<T>) public IProperties<T, TK, TV> RemoveRange(IEnumerable<T> keys) Parameters keys IEnumerable<T> Returns IProperties<T, TK, TV> TryGetValue(TK, out T) public bool TryGetValue(TK key, out T value) Parameters key TK value T Returns bool"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started | Json Schema",
    "keywords": "This document provides a list of previews, each corresponding to a specific detail document available within this project. Getting Started This guide will walk you through the essential steps to quickly get up and running with New JSON Schema library. It is also assume that you are familiar with .NET SDK and C# programming language. For complete document please visit this page Specification New JSON Schema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSON Schema, you can ensure that your JSON data follows a specific format and adheres to certain rules. For complete document please visit this page"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Getting Started | Json Schema",
    "keywords": "New JSON Schema is a practical tool for defining and validating the structure of JSON documents. It allows you to specify the expected format, data types, and constraints of JSON data. This guide will help you get started with the New JSON Schema. Getting Started This guide will walk you through the essential steps to quickly get up and running with New JSON Schema library. It is also assume that you are familiar with .NET SDK and C# programming language. You can use a prebuilt library and skip the build library section. Build the Library To get started, clone the project from the following URL using your preferred Git client (command line or GUI). You can open a terminal and enter the following Git clone command as shown below: git clone https://github.com/relogiclabs/JsonSchema-DotNet.git Next, use .NET build command dotnet build to build the project and Retrieve the DLL file, RelogicLabs.JsonSchema.dll from the bin folder. Add the Library to Your Project To integrate the library with your project, you can create a libs folder within your project directory and place the retrieved DLL file (or any prebuilt DLL file) into the designated folder. Alternatively, if your IDE supports adding references, you can conveniently select the DLL from the libs folder. Alternatively, you can manually modify your project file .csproj using a text editor and include the following XML snippet: <ItemGroup> <Reference Include=\"RelogicLabs.JsonSchema\"> <HintPath>libs\\RelogicLabs.JsonSchema.dll</HintPath> </Reference> </ItemGroup> Additionally, this project has a dependency on ANTLR runtime, which you can integrate by executing the following command: dotnet add package Antlr4.Runtime.Standard --version 4.13.0 Write a Sample to Test With the necessary components in place, you are now prepared to create a sample schema and validate a corresponding JSON against the schema. The subsequent example presents a C# class featuring a method designed for validating a sample JSON based on a provided schema. using RelogicLabs.JsonSchema; namespace CSharpApplication; public class SampleSchema { public bool CheckIsValid() { var schema = \"\"\" %title: \"User Profile Response\" %version: 1.0.0 %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"profile\": { \"firstName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"age\": @range(18, 130) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null } } } \"\"\"; var json = \"\"\" { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } \"\"\"; JsonSchema jsonSchema = new(schema); return jsonSchema.IsValid(json); } } For more information about the schema syntax format and library functionalities, please refer to the reference documentation here. Create Some Validation Errors Let's intentionally introduce a few errors by modifying the previous JSON document and then examine the validation results. To begin, we'll alter the id within the user object to a string type and observe the outcome. Additionally, we'll modify the username by inserting a space into its value, thus creating an invalid username. Below is the revised JSON representation, now containing these purposeful errors. { \"user\": { \"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } To achieve the desired outcome, please make the following changes to the preceding code. Specifically, ensure that any schema validation errors are displayed in the console. The modified code snippet that invokes the WriteError method to display the errors if validation fails is as follows: ... JsonSchema jsonSchema = new(schema); if(!jsonSchema.IsValid(json)) jsonSchema.WriteError(); ... Here is the error as displayed in the console. More specific errors will be listed first, followed by more general errors. Consequently, the specific errors will precisely pinpoint the issues within the JSON document, while the generic errors will provide contextual information about where the errors occurred. Schema (Line: 6:31) Json (Line: 3:14) [DTYP02]: Data type mismatch. Data type #integer is expected but found #string inferred by \"not number\". Schema (Line: 6:14) [FUNC03]: Function @range(1, 10000) is applicable on JNumber but applied on JString of \"not number\" Schema (Line: 8:20) Json (Line: 4:20) [REGX01]: Regex pattern does not match. String of pattern \"[a-z_]{3,30}\" is expected but found \"john doe\" that mismatches with pattern. Schema (Line: 5:12) Json (Line: 2:12) [VALD01]: Validation Failed. Value {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, \"profile\"...ing, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}} is expected but found {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": \"Doe\", \"a...: \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}. Schema (Line: 4:0) Json (Line: 1:0) [VALD01]: Validation Failed. Value {\"user\": {\"id\": @range(1, 10000) #integer, \"username\": @regex(\"[a-z_]{3,30}\") #string, \"role\": \"user\" #string, \"isActive\": #boolean, ...ng, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string} #object #null}}} is expected but found {\"user\": {\"id\": \"not number\", \"username\": \"john doe\", \"role\": \"user\", \"isActive\": true, \"profile\": {\"firstName\": \"John\", \"lastName\": ... \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\"}}}}."
  },
  "articles/specification.html": {
    "href": "articles/specification.html",
    "title": "Specification | Json Schema",
    "keywords": "Specification New JSON Schema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSON Schema, you can ensure that your JSON data follows a specific format and adheres to certain rules. Grammar The New JSON Schema grammar is introduced through a notation similar to what is known as the McKeeman form grammar notation, which is a simplified version of the Backus-Naur form and Extended Backus–Naur form. This form minimizes the usage of complex structures of meta-characters, making the grammar highly readable and easy to understand without requiring extensive prior knowledge of grammar syntax. Moreover, inside the grammar whitespace defining rules are ignored to make it clear and concise. schema schema-header-opt defines-opt schema-core defines-opt validator schema-header-opt title-opt version-opt includes-opt pragmas-opt title-opt '' '%title' ':' string version-opt '' '%version' ':' version-digits version-digits digits digits '.' version-digits includes-opt '' includes includes include includes include '%include' ':' class-identifier class-identifier identifier identifier '.' class-identifier pragmas-opt '' pragmas pragmas pragma pragmas pragma '%pragma' identifier ':' primitive defines-opt '' defines defines define defines define '%define' alias-name ':' validator-main alias-name '$' identifier schema-core '%schema' ':' validator validator validator-main alias-name validator-main value-opt functions-opt datatypes-opt this-opt value-opt '' value value primitive object array functions-opt '' functions functions function functions function function-name function-params-opt function-name '@' identifier '@' identifier '*' function-params-opt '' '(' ')' '(' function-params ')' function-params value value ',' function-params datatypes-opt '' datatypes datatypes datatype datatypes datatype datatype-name datatype-param-opt datatype-name '#' alphas '#' alphas '*' alphas alpha alphas datatype-param-opt '' '(' alias-name ')' this-opt '' '?' object '{' '}' '{' properties '}' properties property property ',' properties property string ':' validator array '[' ']' '[' elements ']' elements validator validator ',' elements primitive string number unknown 'true' 'false' 'null' unknown '!' identifier alpha alpha alpha-numerics alpha-numerics alpha-numeric alpha-numerics alpha-numeric alpha '0' . '9' alpha 'A' . 'Z' 'a' . 'z' '_' string '\"' characters '\"' characters '' character characters character '0020' . '10FFFF' - '\"' - '\\' '\\' escape escape '\"' '\\' '/' 'b' 'f' 'n' 'r' 't' 'u' hex hex hex hex hex digit 'A' . 'F' 'a' . 'f' number integer float double integer positive-integer negative-integer float integer fraction fraction '.' digits double integer fraction-opt exponent fraction-opt '' '.' digits exponent 'E' sign-opt digits 'e' sign-opt digits sign-opt '' '+' '-' positive-integer digit one-to-nine digits negative-integer '-' digit '-' one-to-nine digits digits digit digit digits digit '0' one-to-nine one-to-nine '1' . '9' To explore more about McKeeman form grammar notation and standard JSON document grammar in McKeeman form notation, please visit this page. The resource offers valuable information regarding JSON specification and implementations in different programming languages."
  },
  "index.html": {
    "href": "index.html",
    "title": "A New JSON Schema | Json Schema",
    "keywords": "A New JSON Schema A JSON Schema is crucial for making communication, interoperability, validation, testing, documentation, and specification seamless. All of this combined contributes to better maintenance and evolution of web services. Design Goals The traditional standard JSON Schema rigorously follows the conventional JSON structure, which unfortunately comes at the expense of simplicity, conciseness, and readability. Our goal is to develop a new JSON Schema that promotes these essential aspects that were previously missing. This new schema is simple, lucid, easy to grasp, and doesn't require much prior knowledge to understand it. It also offers a shallow learning curve for both reading and writing. Furthermore, its inherent extensibility simplifies the process of integrating new constraints and functionalities to meet the diverse requirements of modern web services. Basic Example Let's explore an example of our schema for a typical JSON API response containing information about a user profile or account. The schema is very self-explanatory and thus almost no prior knowledge is required to understand the schema and the JSON responses specified by this schema. %title: \"User Profile Response\" %version: 1.0.0 %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"profile\": { \"firstName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z ]{3,50}\") #string, \"age\": @range(18, 130) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null } } } In the above example, two types of constraint or rule descriptors are used: constraint functions (also known as validation functions, such as @range(1, 10000)) and constraint data types (also known as validation data types, such as #integer). All constraint functions begin with the @ symbol, while all constraint data types start with #. C-style comments are also permitted in the schema. Please note that address can be null (eg. an optional input for users) and if it is null then no constraints of address are applicable. The following JSON is one of the examples which can successfully validate against the above schema. To start your journey with the JSON validation library, please consult the documentation available here. { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } } } } Extended Example The next example represents an expanded version of the previous one, which brings more complexity. To effectively construct such schemas with multiple layers of nested structures, it's beneficial to have a fundamental understanding of this schema format. While the syntax may seem difficult at first, it becomes straightforward once you have a basic understanding of it. For more detailed information, reference documentation is available here. %title: \"Extended User Profile Dashboard API Response\" %version: 2.0.0 %include: RelogicLabs.JsonSchema.Tests.Positive.ExternalFunctions, RelogicLabs.JsonSchema.Tests %pragma IgnoreUnknownProperties: true %define $post: { \"id\": @range(1, 1000) #integer, \"title\": @length(10, 100) #string, \"content\": @length(30, 1000) #string, \"tags\": $tags } #object %define $product: { \"id\": @length(2, 10) @regex(\"[a-z][a-z0-9]+\") #string, \"name\": @length(5, 30) #string, \"brand\": @length(5, 30) #string, \"price\": @range(0.1, 1000000), \"inStock\": #boolean, \"specs\": { \"cpu\": @length(5, 30) #string, \"ram\": @regex(\"[0-9]{1,2}GB\") #string, \"storage\": @regex(\"[0-9]{1,4}GB (SSD|HDD)\") #string } #object #null } %define $tags: @length(1, 10) #array($tag) %define $tag: @length(3, 20) @regex(\"[A-Za-z_]+\") #string %schema: { \"user\": { \"id\": @range(1, 10000) #integer, /*username does not allow special characters*/ \"username\": @regex(\"[a-z_]{3,30}\") #string, /*currently only one role is allowed by system*/ \"role\": \"user\" #string, \"isActive\": #boolean, //user account current status \"profile\": { \"firstName\": @regex(\"[A-Za-z]{3,50}\") #string, \"lastName\": @regex(\"[A-Za-z]{3,50}\") #string, \"age\": @range(18, 128) #integer, \"email\": @email #string, \"pictureURL\": @url #string, \"address\": { \"street\": @length(10, 200) #string, \"city\": @length(3, 50) #string, \"country\": @regex(\"[A-Za-z ]{3,50}\") #string } #object #null, \"hobbies\": !? }, \"posts\": @length(0, 1000) #object*($post) #array, \"preferences\": { \"theme\": @enum(\"light\", \"dark\") #string, \"fontSize\": @range(9, 24) #integer, \"autoSave\": #boolean } }, \"products\": #object*($product) #array, \"weather\": { \"temperature\": @range(-50.0, 60.0) #float, \"isCloudy\": #boolean } } The subsequent JSON sample is an illustrative example that successfully validates against the expanded schema mentioned earlier. Within this example, recurring JSON structure appear that can be validated through defining components. By reusing defined components, you can achieve a clear and concise schema when validating large JSON with repetitive structures instead of duplicating large and complex validation constraints across the schema. This improves the overall readability and maintainability of the schema. { \"user\": { \"id\": 1234, \"username\": \"johndoe\", \"role\": \"user\", \"isActive\": true, \"profile\": { \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 30, \"email\": \"john.doe@example.com\", \"pictureURL\": \"https://example.com/picture.jpg\", \"address\": { \"street\": \"123 Some St\", \"city\": \"Some town\", \"country\": \"Some Country\" } }, \"posts\": [ { \"id\": 1, \"title\": \"Introduction to JSON\", \"content\": \"JSON (JavaScript Object Notation) is a lightweight data interchange format...\", \"tags\": [ \"JSON\", \"tutorial\", \"data\" ] }, { \"id\": 2, \"title\": \"Working with JSON in C#\", \"content\": \"C# provides built-in support for working with JSON...\", \"tags\": [ \"CSharp\", \"JSON\", \"tutorial\" ] }, { \"id\": 3, \"title\": \"Introduction to JSON Schema\", \"content\": \"A JSON schema defines the structure and data types of JSON objects...\", \"tags\": [ \"Schema\", \"JSON\", \"tutorial\" ] } ], \"preferences\": { \"theme\": \"dark\", \"fontSize\": 14, \"autoSave\": true } }, \"products\": [ { \"id\": \"p1\", \"name\": \"Smartphone\", \"brand\": \"TechGiant\", \"price\": 599.99, \"inStock\": true, \"specs\": null }, { \"id\": \"p2\", \"name\": \"Laptop\", \"brand\": \"SuperTech\", \"price\": 1299.99, \"inStock\": false, \"specs\": { \"cpu\": \"Intel i7\", \"ram\": \"16GB\", \"storage\": \"512GB SSD\" } } ], \"weather\": { \"temperature\": 25.5, \"isCloudy\": true, \"conditions\": null } } For more information about the schema syntax format and library functionalities, please refer to the reference documentation here."
  }
}