//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JsonSchema.Antlr {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="SchemaParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
internal interface ISchemaParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>AggregateSchema</c>
	/// labeled alternative in <see cref="SchemaParser.schema"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAggregateSchema([NotNull] SchemaParser.AggregateSchemaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CoreSchema</c>
	/// labeled alternative in <see cref="SchemaParser.schema"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCoreSchema([NotNull] SchemaParser.CoreSchemaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.schemaBase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSchemaBase([NotNull] SchemaParser.SchemaBaseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.title"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTitle([NotNull] SchemaParser.TitleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.version"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVersion([NotNull] SchemaParser.VersionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInclude([NotNull] SchemaParser.IncludeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.pragma"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPragma([NotNull] SchemaParser.PragmaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.define"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefine([NotNull] SchemaParser.DefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.aliasName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAliasName([NotNull] SchemaParser.AliasNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.validatorMain"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValidatorMain([NotNull] SchemaParser.ValidatorMainContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.validator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValidator([NotNull] SchemaParser.ValidatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] SchemaParser.ValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.object"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObject([NotNull] SchemaParser.ObjectContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.property"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProperty([NotNull] SchemaParser.PropertyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArray([NotNull] SchemaParser.ArrayContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDatatype([NotNull] SchemaParser.DatatypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SchemaParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] SchemaParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveTrue</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveTrue([NotNull] SchemaParser.PrimitiveTrueContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveFalse</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveFalse([NotNull] SchemaParser.PrimitiveFalseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveString</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveString([NotNull] SchemaParser.PrimitiveStringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveInteger</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveInteger([NotNull] SchemaParser.PrimitiveIntegerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveFloat</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveFloat([NotNull] SchemaParser.PrimitiveFloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveDouble</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveDouble([NotNull] SchemaParser.PrimitiveDoubleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveNull</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveNull([NotNull] SchemaParser.PrimitiveNullContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimitiveUnknown</c>
	/// labeled alternative in <see cref="SchemaParser.primitive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveUnknown([NotNull] SchemaParser.PrimitiveUnknownContext context);
}
} // namespace RelogicLabs.JsonSchema.Antlr
