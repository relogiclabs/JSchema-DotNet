//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JsonSchema.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
internal partial class JsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, NULL=3, LBRACKET=4, RBRACKET=5, LBRACE=6, RBRACE=7, COMMA=8, 
		COLON=9, STRING=10, INTEGER=11, FLOAT=12, DOUBLE=13, WHITE_SPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "NULL", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "COMMA", 
		"COLON", "STRING", "ESCAPE", "UNICODE", "HEXDIGIT", "SAFECODEPOINT", "INTEGER", 
		"FLOAT", "DOUBLE", "INTDIGIT", "EXPONENT", "DIGIT", "WHITE_SPACE"
	};


	public JsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'null'", "'['", "']'", "'{'", "'}'", "','", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "NULL", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
		"COMMA", "COLON", "STRING", "INTEGER", "FLOAT", "DOUBLE", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,147,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,75,8,9,10,9,12,9,78,
		9,9,1,9,1,9,1,10,1,10,1,10,3,10,85,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,3,14,98,8,14,1,14,1,14,1,15,1,15,1,15,4,15,105,
		8,15,11,15,12,15,106,1,16,1,16,1,16,4,16,112,8,16,11,16,12,16,113,3,16,
		116,8,16,1,16,1,16,1,17,1,17,1,17,5,17,123,8,17,10,17,12,17,126,9,17,3,
		17,128,8,17,1,18,1,18,3,18,132,8,18,1,18,4,18,135,8,18,11,18,12,18,136,
		1,19,1,19,1,20,4,20,142,8,20,11,20,12,20,143,1,20,1,20,0,0,21,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,0,23,0,25,0,27,0,29,11,31,12,
		33,13,35,0,37,0,39,0,41,14,1,0,8,8,0,34,34,47,47,92,92,98,98,102,102,110,
		110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,49,
		57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,3,0,9,10,13,13,32,32,151,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,48,1,0,0,0,5,54,1,0,0,
		0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,65,1,0,0,0,15,67,1,0,0,0,
		17,69,1,0,0,0,19,71,1,0,0,0,21,81,1,0,0,0,23,86,1,0,0,0,25,92,1,0,0,0,
		27,94,1,0,0,0,29,97,1,0,0,0,31,101,1,0,0,0,33,108,1,0,0,0,35,127,1,0,0,
		0,37,129,1,0,0,0,39,138,1,0,0,0,41,141,1,0,0,0,43,44,5,116,0,0,44,45,5,
		114,0,0,45,46,5,117,0,0,46,47,5,101,0,0,47,2,1,0,0,0,48,49,5,102,0,0,49,
		50,5,97,0,0,50,51,5,108,0,0,51,52,5,115,0,0,52,53,5,101,0,0,53,4,1,0,0,
		0,54,55,5,110,0,0,55,56,5,117,0,0,56,57,5,108,0,0,57,58,5,108,0,0,58,6,
		1,0,0,0,59,60,5,91,0,0,60,8,1,0,0,0,61,62,5,93,0,0,62,10,1,0,0,0,63,64,
		5,123,0,0,64,12,1,0,0,0,65,66,5,125,0,0,66,14,1,0,0,0,67,68,5,44,0,0,68,
		16,1,0,0,0,69,70,5,58,0,0,70,18,1,0,0,0,71,76,5,34,0,0,72,75,3,21,10,0,
		73,75,3,27,13,0,74,72,1,0,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,
		0,76,77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,34,0,0,80,20,1,0,0,
		0,81,84,5,92,0,0,82,85,7,0,0,0,83,85,3,23,11,0,84,82,1,0,0,0,84,83,1,0,
		0,0,85,22,1,0,0,0,86,87,5,117,0,0,87,88,3,25,12,0,88,89,3,25,12,0,89,90,
		3,25,12,0,90,91,3,25,12,0,91,24,1,0,0,0,92,93,7,1,0,0,93,26,1,0,0,0,94,
		95,8,2,0,0,95,28,1,0,0,0,96,98,5,45,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,
		99,1,0,0,0,99,100,3,35,17,0,100,30,1,0,0,0,101,102,3,29,14,0,102,104,5,
		46,0,0,103,105,3,39,19,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,
		0,106,107,1,0,0,0,107,32,1,0,0,0,108,115,3,29,14,0,109,111,5,46,0,0,110,
		112,3,39,19,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,
		1,0,0,0,114,116,1,0,0,0,115,109,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,
		0,117,118,3,37,18,0,118,34,1,0,0,0,119,128,5,48,0,0,120,124,7,3,0,0,121,
		123,3,39,19,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,
		1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,127,119,1,0,0,0,127,120,1,0,0,
		0,128,36,1,0,0,0,129,131,7,4,0,0,130,132,7,5,0,0,131,130,1,0,0,0,131,132,
		1,0,0,0,132,134,1,0,0,0,133,135,3,39,19,0,134,133,1,0,0,0,135,136,1,0,
		0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,38,1,0,0,0,138,139,7,6,0,0,139,
		40,1,0,0,0,140,142,7,7,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,
		0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,6,20,0,0,146,42,1,0,0,0,13,
		0,74,76,84,97,106,113,115,124,127,131,136,143,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RelogicLabs.JsonSchema.Antlr