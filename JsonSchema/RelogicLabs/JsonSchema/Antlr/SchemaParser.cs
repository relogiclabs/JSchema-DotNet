//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RelogicLabs.JsonSchema.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
internal partial class SchemaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TITLE=1, VERSION=2, INCLUDE=3, PRAGMA=4, DEFINE=5, SCHEMA=6, TRUE=7, FALSE=8, 
		NULL=9, COLON=10, COMMA=11, STAR=12, LBRACE=13, RBRACE=14, LBRACKET=15, 
		RBRACKET=16, LPAREN=17, RPAREN=18, OPTIONAL=19, UNKNOWN=20, IDENTIFIER=21, 
		ALIAS=22, DATATYPE=23, FUNCTION=24, STRING=25, INTEGER=26, FLOAT=27, DOUBLE=28, 
		MULTILINE_COMMENT=29, LINE_COMMENT=30, WHITE_SPACE=31, COLON1=32, VERSION_NUMBER1=33, 
		WHITE_SPACE1=34, MULTILINE_COMMENT1=35, LINE_COMMENT1=36;
	public const int
		RULE_schema = 0, RULE_schemaBase = 1, RULE_title = 2, RULE_version = 3, 
		RULE_include = 4, RULE_pragma = 5, RULE_define = 6, RULE_aliasName = 7, 
		RULE_validatorMain = 8, RULE_validator = 9, RULE_value = 10, RULE_object = 11, 
		RULE_property = 12, RULE_array = 13, RULE_datatype = 14, RULE_function = 15, 
		RULE_primitive = 16;
	public static readonly string[] ruleNames = {
		"schema", "schemaBase", "title", "version", "include", "pragma", "define", 
		"aliasName", "validatorMain", "validator", "value", "object", "property", 
		"array", "datatype", "function", "primitive"
	};

	private static readonly string[] _LiteralNames = {
		null, "'%title'", "'%version'", "'%include'", "'%pragma'", "'%define'", 
		"'%schema'", "'true'", "'false'", "'null'", null, "','", "'*'", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'?'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TITLE", "VERSION", "INCLUDE", "PRAGMA", "DEFINE", "SCHEMA", "TRUE", 
		"FALSE", "NULL", "COLON", "COMMA", "STAR", "LBRACE", "RBRACE", "LBRACKET", 
		"RBRACKET", "LPAREN", "RPAREN", "OPTIONAL", "UNKNOWN", "IDENTIFIER", "ALIAS", 
		"DATATYPE", "FUNCTION", "STRING", "INTEGER", "FLOAT", "DOUBLE", "MULTILINE_COMMENT", 
		"LINE_COMMENT", "WHITE_SPACE", "COLON1", "VERSION_NUMBER1", "WHITE_SPACE1", 
		"MULTILINE_COMMENT1", "LINE_COMMENT1"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SchemaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SchemaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SchemaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SchemaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SchemaContext : ParserRuleContext {
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
	 
		public SchemaContext() { }
		public virtual void CopyFrom(SchemaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoreSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		public CoreSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoreSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateSchemaContext : SchemaContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaBaseContext schemaBase() {
			return GetRuleContext<SchemaBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SchemaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext[] pragma() {
			return GetRuleContexts<PragmaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma(int i) {
			return GetRuleContext<PragmaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext[] define() {
			return GetRuleContexts<DefineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define(int i) {
			return GetRuleContext<DefineContext>(i);
		}
		public AggregateSchemaContext(SchemaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TITLE:
			case VERSION:
			case INCLUDE:
			case PRAGMA:
			case DEFINE:
			case SCHEMA:
				_localctx = new AggregateSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TITLE) {
					{
					State = 34;
					title();
					}
				}

				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 37;
					version();
					}
				}

				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INCLUDE) {
					{
					{
					State = 40;
					include();
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PRAGMA) {
					{
					{
					State = 46;
					pragma();
					}
					}
					State = 51;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE) {
					{
					{
					State = 52;
					define();
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58;
				schemaBase();
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFINE) {
					{
					{
					State = 59;
					define();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65;
				Match(Eof);
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNKNOWN:
			case ALIAS:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				_localctx = new CoreSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				validator();
				State = 68;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(SchemaParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		public SchemaBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaBaseContext schemaBase() {
		SchemaBaseContext _localctx = new SchemaBaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_schemaBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(SCHEMA);
			State = 73;
			Match(COLON);
			State = 74;
			validator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(SchemaParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 4, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(TITLE);
			State = 77;
			Match(COLON);
			State = 78;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(SchemaParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON1() { return GetToken(SchemaParser.COLON1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_NUMBER1() { return GetToken(SchemaParser.VERSION_NUMBER1, 0); }
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 6, RULE_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(VERSION);
			State = 81;
			Match(COLON1);
			State = 82;
			Match(VERSION_NUMBER1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(SchemaParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SchemaParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SchemaParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SchemaParser.COMMA, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 8, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(INCLUDE);
			State = 85;
			Match(COLON);
			State = 86;
			Match(IDENTIFIER);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 87;
				Match(COMMA);
				State = 88;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(SchemaParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SchemaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 10, RULE_pragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(PRAGMA);
			State = 92;
			Match(IDENTIFIER);
			State = 93;
			Match(COLON);
			State = 94;
			primitive();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(SchemaParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 12, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(DEFINE);
			State = 97;
			aliasName();
			State = 98;
			Match(COLON);
			State = 99;
			validatorMain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(SchemaParser.ALIAS, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_aliasName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorMainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(SchemaParser.OPTIONAL, 0); }
		public ValidatorMainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validatorMain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidatorMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorMainContext validatorMain() {
		ValidatorMainContext _localctx = new ValidatorMainContext(Context, State);
		EnterRule(_localctx, 16, RULE_validatorMain);
		int _la;
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNKNOWN:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				value();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FUNCTION) {
					{
					{
					State = 104;
					function();
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 110;
					datatype();
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 116;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 119;
					function();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FUNCTION );
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DATATYPE) {
					{
					{
					State = 124;
					datatype();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 130;
					Match(OPTIONAL);
					}
				}

				}
				break;
			case DATATYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 133;
					datatype();
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DATATYPE );
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONAL) {
					{
					State = 138;
					Match(OPTIONAL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorMainContext validatorMain() {
			return GetRuleContext<ValidatorMainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		public ValidatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatorContext validator() {
		ValidatorContext _localctx = new ValidatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_validator);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case LBRACE:
			case LBRACKET:
			case UNKNOWN:
			case DATATYPE:
			case FUNCTION:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				validatorMain();
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				aliasName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case NULL:
			case UNKNOWN:
			case STRING:
			case INTEGER:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				primitive();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				@object();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 149;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(SchemaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(SchemaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 22, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(LBRACE);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 153;
				property();
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 154;
					Match(COMMA);
					State = 155;
					property();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 163;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SchemaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator() {
			return GetRuleContext<ValidatorContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 24, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(STRING);
			State = 166;
			Match(COLON);
			State = 167;
			validator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(SchemaParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(SchemaParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext[] validator() {
			return GetRuleContexts<ValidatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidatorContext validator(int i) {
			return GetRuleContext<ValidatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 26, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(LBRACKET);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 533767040L) != 0)) {
				{
				State = 170;
				validator();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 171;
					Match(COMMA);
					State = 172;
					validator();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 180;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATATYPE() { return GetToken(SchemaParser.DATATYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(DATATYPE);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 183;
				Match(STAR);
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 186;
				Match(LPAREN);
				State = 187;
				aliasName();
				State = 188;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SchemaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SchemaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SchemaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SchemaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SchemaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SchemaParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(FUNCTION);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 193;
				Match(STAR);
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 196;
				Match(LPAREN);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 504406912L) != 0)) {
					{
					State = 197;
					value();
					State = 202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 198;
						Match(COMMA);
						State = 199;
						value();
						}
						}
						State = 204;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 207;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	 
		public PrimitiveContext() { }
		public virtual void CopyFrom(PrimitiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveDoubleContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(SchemaParser.DOUBLE, 0); }
		public PrimitiveDoubleContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFloatContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SchemaParser.FLOAT, 0); }
		public PrimitiveFloatContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveNullContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SchemaParser.NULL, 0); }
		public PrimitiveNullContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveUnknownContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(SchemaParser.UNKNOWN, 0); }
		public PrimitiveUnknownContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveUnknown(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveTrueContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SchemaParser.TRUE, 0); }
		public PrimitiveTrueContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFalseContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SchemaParser.FALSE, 0); }
		public PrimitiveFalseContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveStringContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SchemaParser.STRING, 0); }
		public PrimitiveStringContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveIntegerContext : PrimitiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(SchemaParser.INTEGER, 0); }
		public PrimitiveIntegerContext(PrimitiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISchemaParserVisitor<TResult> typedVisitor = visitor as ISchemaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 32, RULE_primitive);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				_localctx = new PrimitiveTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new PrimitiveFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(FALSE);
				}
				break;
			case STRING:
				_localctx = new PrimitiveStringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new PrimitiveIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new PrimitiveFloatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				_localctx = new PrimitiveDoubleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 215;
				Match(DOUBLE);
				}
				break;
			case NULL:
				_localctx = new PrimitiveNullContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 216;
				Match(NULL);
				}
				break;
			case UNKNOWN:
				_localctx = new PrimitiveUnknownContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 217;
				Match(UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,3,0,36,8,0,1,0,3,0,39,8,0,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,5,0,54,8,0,10,0,12,0,57,
		9,0,1,0,1,0,5,0,61,8,0,10,0,12,0,64,9,0,1,0,1,0,1,0,1,0,1,0,3,0,71,8,0,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,
		4,90,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,5,8,106,
		8,8,10,8,12,8,109,9,8,1,8,5,8,112,8,8,10,8,12,8,115,9,8,1,8,3,8,118,8,
		8,1,8,4,8,121,8,8,11,8,12,8,122,1,8,5,8,126,8,8,10,8,12,8,129,9,8,1,8,
		3,8,132,8,8,1,8,4,8,135,8,8,11,8,12,8,136,1,8,3,8,140,8,8,3,8,142,8,8,
		1,9,1,9,3,9,146,8,9,1,10,1,10,1,10,3,10,151,8,10,1,11,1,11,1,11,1,11,5,
		11,157,8,11,10,11,12,11,160,9,11,3,11,162,8,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,5,13,174,8,13,10,13,12,13,177,9,13,3,13,179,8,
		13,1,13,1,13,1,14,1,14,3,14,185,8,14,1,14,1,14,1,14,1,14,3,14,191,8,14,
		1,15,1,15,3,15,195,8,15,1,15,1,15,1,15,1,15,5,15,201,8,15,10,15,12,15,
		204,9,15,3,15,206,8,15,1,15,3,15,209,8,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,3,16,219,8,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,0,0,241,0,70,1,0,0,0,2,72,1,0,0,0,4,76,1,0,0,0,6,80,1,0,0,
		0,8,84,1,0,0,0,10,91,1,0,0,0,12,96,1,0,0,0,14,101,1,0,0,0,16,141,1,0,0,
		0,18,145,1,0,0,0,20,150,1,0,0,0,22,152,1,0,0,0,24,165,1,0,0,0,26,169,1,
		0,0,0,28,182,1,0,0,0,30,192,1,0,0,0,32,218,1,0,0,0,34,36,3,4,2,0,35,34,
		1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,39,3,6,3,0,38,37,1,0,0,0,38,39,
		1,0,0,0,39,43,1,0,0,0,40,42,3,8,4,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,
		1,0,0,0,43,44,1,0,0,0,44,49,1,0,0,0,45,43,1,0,0,0,46,48,3,10,5,0,47,46,
		1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,55,1,0,0,0,51,49,
		1,0,0,0,52,54,3,12,6,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,
		1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,62,3,2,1,0,59,61,3,12,6,0,60,59,
		1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,
		1,0,0,0,65,66,5,0,0,1,66,71,1,0,0,0,67,68,3,18,9,0,68,69,5,0,0,1,69,71,
		1,0,0,0,70,35,1,0,0,0,70,67,1,0,0,0,71,1,1,0,0,0,72,73,5,6,0,0,73,74,5,
		10,0,0,74,75,3,18,9,0,75,3,1,0,0,0,76,77,5,1,0,0,77,78,5,10,0,0,78,79,
		5,25,0,0,79,5,1,0,0,0,80,81,5,2,0,0,81,82,5,32,0,0,82,83,5,33,0,0,83,7,
		1,0,0,0,84,85,5,3,0,0,85,86,5,10,0,0,86,89,5,21,0,0,87,88,5,11,0,0,88,
		90,5,21,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,9,1,0,0,0,91,92,5,4,0,0,92,
		93,5,21,0,0,93,94,5,10,0,0,94,95,3,32,16,0,95,11,1,0,0,0,96,97,5,5,0,0,
		97,98,3,14,7,0,98,99,5,10,0,0,99,100,3,16,8,0,100,13,1,0,0,0,101,102,5,
		22,0,0,102,15,1,0,0,0,103,107,3,20,10,0,104,106,3,30,15,0,105,104,1,0,
		0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,113,1,0,0,0,109,
		107,1,0,0,0,110,112,3,28,14,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,
		1,0,0,0,113,114,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,116,118,5,19,0,
		0,117,116,1,0,0,0,117,118,1,0,0,0,118,142,1,0,0,0,119,121,3,30,15,0,120,
		119,1,0,0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,127,1,
		0,0,0,124,126,3,28,14,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,
		0,127,128,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,130,132,5,19,0,0,131,
		130,1,0,0,0,131,132,1,0,0,0,132,142,1,0,0,0,133,135,3,28,14,0,134,133,
		1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,
		0,138,140,5,19,0,0,139,138,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,
		103,1,0,0,0,141,120,1,0,0,0,141,134,1,0,0,0,142,17,1,0,0,0,143,146,3,16,
		8,0,144,146,3,14,7,0,145,143,1,0,0,0,145,144,1,0,0,0,146,19,1,0,0,0,147,
		151,3,32,16,0,148,151,3,22,11,0,149,151,3,26,13,0,150,147,1,0,0,0,150,
		148,1,0,0,0,150,149,1,0,0,0,151,21,1,0,0,0,152,161,5,13,0,0,153,158,3,
		24,12,0,154,155,5,11,0,0,155,157,3,24,12,0,156,154,1,0,0,0,157,160,1,0,
		0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,161,
		153,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,5,14,0,0,164,23,1,
		0,0,0,165,166,5,25,0,0,166,167,5,10,0,0,167,168,3,18,9,0,168,25,1,0,0,
		0,169,178,5,15,0,0,170,175,3,18,9,0,171,172,5,11,0,0,172,174,3,18,9,0,
		173,171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,179,
		1,0,0,0,177,175,1,0,0,0,178,170,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,
		0,180,181,5,16,0,0,181,27,1,0,0,0,182,184,5,23,0,0,183,185,5,12,0,0,184,
		183,1,0,0,0,184,185,1,0,0,0,185,190,1,0,0,0,186,187,5,17,0,0,187,188,3,
		14,7,0,188,189,5,18,0,0,189,191,1,0,0,0,190,186,1,0,0,0,190,191,1,0,0,
		0,191,29,1,0,0,0,192,194,5,24,0,0,193,195,5,12,0,0,194,193,1,0,0,0,194,
		195,1,0,0,0,195,208,1,0,0,0,196,205,5,17,0,0,197,202,3,20,10,0,198,199,
		5,11,0,0,199,201,3,20,10,0,200,198,1,0,0,0,201,204,1,0,0,0,202,200,1,0,
		0,0,202,203,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,205,197,1,0,0,0,205,
		206,1,0,0,0,206,207,1,0,0,0,207,209,5,18,0,0,208,196,1,0,0,0,208,209,1,
		0,0,0,209,31,1,0,0,0,210,219,5,7,0,0,211,219,5,8,0,0,212,219,5,25,0,0,
		213,219,5,26,0,0,214,219,5,27,0,0,215,219,5,28,0,0,216,219,5,9,0,0,217,
		219,5,20,0,0,218,210,1,0,0,0,218,211,1,0,0,0,218,212,1,0,0,0,218,213,1,
		0,0,0,218,214,1,0,0,0,218,215,1,0,0,0,218,216,1,0,0,0,218,217,1,0,0,0,
		219,33,1,0,0,0,30,35,38,43,49,55,62,70,89,107,113,117,122,127,131,136,
		139,141,145,150,158,161,175,178,184,190,194,202,205,208,218
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RelogicLabs.JsonSchema.Antlr
